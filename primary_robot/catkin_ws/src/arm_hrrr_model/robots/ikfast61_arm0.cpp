/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-02-24 17:12:10.585203
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=((0.102)*x1);
x3=IKcos(j[1]);
x4=((0.004)*x3);
x5=((0.03499941)*x0);
x6=IKsin(j[2]);
x7=(x1*x6);
x8=IKcos(j[2]);
x9=(x1*x8);
x10=(x0*x9);
x11=(x3*x6);
x12=(x0*x11);
x13=(x3*x8);
x14=IKsin(j[3]);
x15=((0.042)*x7);
x16=((0.042)*x13);
x17=IKcos(j[3]);
x18=((0.042)*x9);
x19=((0.042)*x11);
x20=IKcos(j[0]);
x21=(x20*x7);
x22=(x1*x20*x8);
x23=(x20*x3*x6);
x24=((1.0)*x7);
x25=((1.0)*x13);
IkReal x26=((1.0)*x0);
eetrans[0]=((((0.08000026)*x10))+(((0.08000026)*x12))+(((-1.0)*x2*x26))+(((-1.0)*(0.0365)*x0))+((x14*(((((-1.0)*x15*x26))+((x0*x16))))))+((x17*((((x0*x19))+((x0*x18))))))+((x5*x7))+((x0*x4))+(((-1.0)*(1.0)*x13*x5)));
IkReal x27=((1.0)*x20);
eetrans[1]=((((0.03499941)*x21))+(((-1.0)*(0.0365)*x20))+((x20*x4))+((x17*((((x18*x20))+((x19*x20))))))+(((-1.0)*x2*x27))+(((-1.0)*(0.03499941)*x13*x20))+(((0.08000026)*x23))+((x14*((((x16*x20))+(((-1.0)*x15*x27))))))+(((0.08000026)*x22)));
eetrans[2]=((-0.0658)+((x17*((x16+(((-1.0)*(1.0)*x15))))))+(((0.08000026)*x13))+(((0.03499941)*x9))+((x14*(((((-1.0)*(1.0)*x19))+(((-1.0)*(1.0)*x18))))))+(((-1.0)*(0.08000026)*x7))+(((0.03499941)*x11))+(((-1.0)*(0.102)*x3))+(((-1.0)*(0.004)*x1)));
eerot[0]=(((x14*((x12+x10))))+((x17*((((x0*x24))+(((-1.0)*(1.0)*x0*x25)))))));
eerot[1]=(((x14*(((((1.0)*x23))+(((1.0)*x22))))))+((x17*((x21+(((-1.0)*(1.0)*x20*x25)))))));
eerot[2]=(((x14*((x25+(((-1.0)*(1.0)*x24))))))+((x17*((x11+x9)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 4; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x46000005; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.0)*(((1.0)*r01)));
new_py=((-1.0)*(((1.0)*py)));
new_r02=((-1.0)*(((1.0)*r02)));
new_pz=((-0.0658)+(((-1.0)*(1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; 
IkReal new_pdotd = new_px*new_r00+new_py*new_r01+new_pz*new_r02;
px = new_px-new_pdotd * new_r00; py = new_py- new_pdotd * new_r01; pz = new_pz - new_pdotd * new_r02;

pp=((pz*pz)+(py*py)+(px*px));
{
IkReal verifyeval[1];
verifyeval[0]=((1.0)+(((-1.0)*(1.0)*(r02*r02)))+(((-1.0)*(1.0)*(r01*r01)))+(((-1.0)*(1.0)*(r00*r00))));
if( IKabs(verifyeval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(r00))+(IKabs(r01)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x29 = IKatan2WithCheck(IkReal(r00),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x29.valid){
continue;
}
IkReal x28=((-1.0)*(((1.0)*(x29.value))));
j0array[0]=x28;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x28);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[1];
IkReal x30=(cj0*r00);
IkReal x31=((1.0)*r01);
j1eval[0]=((IKabs((((py*r02*sj0))+(((-1.0)*pz*x30))+(((-1.0)*pz*sj0*x31))+((cj0*px*r02)))))+(IKabs(((((-1.0)*(0.0365)*r01*sj0))+(((-1.0)*px*x31))+((py*r00))+(((-0.0365)*x30))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x32=(cj0*r00);
IkReal x33=(r01*sj0);
IkReal x34=((1.0)*pz);
j1eval[0]=((IKabs(((((-1.0)*(1.0)*py*r00))+(((0.0365)*x32))+(((0.0365)*x33))+((px*r01)))))+(IKabs((((py*r02*sj0))+(((-1.0)*x32*x34))+((cj0*px*r02))+(((-1.0)*x33*x34))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x35=((1.0)*pz);
IkReal x36=(cj0*r00);
IkReal x37=(r01*sj0);
CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal((((py*r02*sj0))+(((-1.0)*x35*x36))+((cj0*px*r02))+(((-1.0)*x35*x37)))),IkReal(((((0.0365)*x37))+(((-1.0)*(1.0)*py*r00))+((px*r01))+(((0.0365)*x36)))),IKFAST_ATAN2_MAGTHRESH);
if(!x39.valid){
continue;
}
IkReal x38=((-1.0)*(x39.value));
j1array[0]=x38;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x38);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x40=IKcos(j1);
IkReal x41=(r00*x40);
IkReal x42=(r01*x40);
IkReal x43=IKsin(j1);
IkReal x44=(r02*x43);
IkReal x45=((1.0)*pz*x43);
evalcond[0]=(((py*sj0*x44))+(((-0.0365)*sj0*x42))+(((-1.0)*r01*sj0*x45))+((py*x41))+(((-0.0365)*cj0*x41))+(((-1.0)*px*x42))+((cj0*px*x44))+(((-1.0)*cj0*r00*x45)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x46=(cj1*r02);
IkReal x47=(r02*sj1);
IkReal x48=(cj0*cj1*r01);
IkReal x49=(cj0*py*r02);
IkReal x50=(cj0*pz*r01);
IkReal x51=(cj0*r01*sj1);
IkReal x52=(cj1*r00*sj0);
IkReal x53=(px*r02*sj0);
IkReal x54=(pz*r00*sj0);
IkReal x55=(r00*sj0*sj1);
IkReal x56=((((1.224)*x52))+(((-1.224)*x48))+(((-0.048)*x46))+(((12.0)*x53))+(((-12.0)*x49))+(((-12.0)*x54))+(((0.048)*x55))+(((0.438)*r02))+(((1.224)*x47))+(((-0.048)*x51))+(((12.0)*x50)));
j3eval[0]=((1.11998112)+(IKabs(((-0.15200104)+(((-0.016)*x51))+(((-4.0)*x54))+(((-0.016)*x46))+(((4.0)*x50))+(((4.0)*x53))+(((0.016)*x55))+(((0.408)*x47))+(((0.146)*r02))+(((0.408)*x52))+(((-0.408)*x48))+(((-4.0)*x49)))))+(IKabs(((0.18399896)+x56)))+(IKabs(((0.82400104)+x56))));
if( IKabs(j3eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x57=(cj1*r02);
IkReal x58=(r02*sj1);
IkReal x59=(cj0*cj1*r01);
IkReal x60=(cj0*py*r02);
IkReal x61=(cj0*pz*r01);
IkReal x62=(cj0*r01*sj1);
IkReal x63=(cj1*r00*sj0);
IkReal x64=(px*r02*sj0);
IkReal x65=(pz*r00*sj0);
IkReal x66=(r00*sj0*sj1);
IkReal x67=((((-4.0)*x65))+(((-0.016)*x62))+(((-0.016)*x57))+(((4.0)*x61))+(((0.016)*x66))+(((0.408)*x58))+(((-0.408)*x59))+(((4.0)*x64))+(((0.146)*r02))+(((-4.0)*x60))+(((0.408)*x63)));
IkReal x68=((((-12.0)*x60))+(((1.224)*x63))+(((-12.0)*x65))+(((-1.224)*x59))+(((12.0)*x61))+(((0.438)*r02))+(((-0.048)*x62))+(((12.0)*x64))+(((1.224)*x58))+(((0.048)*x66))+(((-0.048)*x57)));
op[0]=((-0.15200104)+x67);
op[1]=-0.27999528;
op[2]=((0.18399896)+x68);
op[3]=-0.55999056;
op[4]=((0.82400104)+x68);
op[5]=-0.27999528;
op[6]=((0.48800104)+x67);
polyroots6(op,zeror,numroots);
IkReal j3array[6], cj3array[6], sj3array[6], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[6]={true,true,true,true,true,true};
_nj3 = 6;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x69=(r02*sj3);
IkReal x70=((1.0)*cj1);
IkReal x71=(cj3*r02);
IkReal x72=(r00*sj0*sj3);
IkReal x73=(cj3*r00*sj0);
IkReal x74=(cj0*r01*sj3);
IkReal x75=((1.0)*sj1);
IkReal x76=(cj0*cj3*r01);
if( IKabs((((sj1*x73))+(((-1.0)*x70*x74))+((sj1*x69))+(((-1.0)*x75*x76))+((cj1*x72))+(((-1.0)*x70*x71)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x70*x73))+(((-1.0)*x69*x70))+((sj1*x72))+(((-1.0)*x74*x75))+((cj1*x76))+(((-1.0)*x71*x75)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x73))+(((-1.0)*x70*x74))+((sj1*x69))+(((-1.0)*x75*x76))+((cj1*x72))+(((-1.0)*x70*x71))))+IKsqr(((((-1.0)*x70*x73))+(((-1.0)*x69*x70))+((sj1*x72))+(((-1.0)*x74*x75))+((cj1*x76))+(((-1.0)*x71*x75))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x73))+(((-1.0)*x70*x74))+((sj1*x69))+(((-1.0)*x75*x76))+((cj1*x72))+(((-1.0)*x70*x71))), ((((-1.0)*x70*x73))+(((-1.0)*x69*x70))+((sj1*x72))+(((-1.0)*x74*x75))+((cj1*x76))+(((-1.0)*x71*x75))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x77=IKcos(j2);
IkReal x78=(cj3*x77);
IkReal x79=(r00*sj0);
IkReal x80=IKsin(j2);
IkReal x81=(sj3*x80);
IkReal x82=((1.0)*cj1);
IkReal x83=(cj0*r01);
IkReal x84=(cj3*x80);
IkReal x85=(sj3*x77);
IkReal x86=((1.0)*cj0*r01);
IkReal x87=(pz*x79);
IkReal x88=(px*r02);
IkReal x89=(cj3*sj3);
IkReal x90=cj3*cj3;
IkReal x91=r01*r01;
IkReal x92=((0.00133225)*x91);
IkReal x93=r02*r02;
IkReal x94=sj3*sj3*sj3;
IkReal x95=(sj3*x90);
IkReal x96=(x77*x80);
IkReal x97=((2.0)*py);
IkReal x98=x80*x80*x80;
IkReal x99=x77*x77;
IkReal x100=r00*r00;
IkReal x101=((0.073)*cj0*py);
IkReal x102=((0.073)*px*sj0);
IkReal x103=cj0*cj0;
IkReal x104=((1.0)*(px*px));
IkReal x105=((1.0)*(py*py));
IkReal x106=((1.0)*(pz*pz));
IkReal x107=(x80*x99);
IkReal x108=((0.01604005776)*cj3*sj3);
IkReal x109=((0.073)*py*r01);
IkReal x110=sj0*sj0*sj0;
IkReal x111=((0.00777988172)*x90);
IkReal x112=(x90*x99);
IkReal x113=((0.008568)*x98);
evalcond[0]=(((r02*sj1))+((cj1*x79))+x78+(((-1.0)*x81))+(((-1.0)*x82*x83)));
evalcond[1]=((((-1.0)*r02*x82))+(((-1.0)*x85))+(((-1.0)*sj1*x86))+(((-1.0)*x84))+((sj1*x79)));
evalcond[2]=((-0.042)+(((-1.0)*(0.08000026)*cj3))+(((0.102)*x78))+(((-1.0)*pz*x86))+(((-0.102)*x81))+x87+((py*((cj0*r02))))+(((0.03499941)*sj3))+(((-1.0)*(0.0365)*r02))+(((-1.0)*sj0*x88))+(((-0.004)*x85))+(((-0.004)*x84)));
evalcond[3]=((0.0133929587003481)+(((0.00777988172)*x77*x89))+(((0.000336)*x84*x99))+(((0.000816)*x96))+(((0.073)*r02*x87))+(((0.00672002184)*cj3))+(((-0.0052129171002805)*x90))+(((-0.00293995044)*x94))+(((-0.001632)*x90*x96))+((x108*x98))+(((-1.0)*x100*x105))+(((-1.0)*x106*x91))+((x103*x92))+(((-0.00713987964)*x107))+((x107*x111))+(((0.008568)*sj3*x112*x80))+((x107*x108))+(((-0.00027999528)*x77))+(((-0.073)*px*x110*x91))+(((-0.010388)*x99))+((pz*r01*r02*x97))+(((-0.0047839237996932)*x89))+(((-0.020776)*cj3*sj3*x96))+(((0.000336)*cj3*x98))+((x113*x94))+(((0.020776)*x112))+(((-1.0)*x105*x93))+((x100*x101))+(((-0.073)*cj0*pz*r01*r02))+(((-1.0)*x102*x93))+(((-1.0)*x104*x93))+(((-1.0)*x92))+((px*r00*r01*x97))+(((-1.0)*x100*x106))+((x101*x93))+(((-0.001632)*x89*x99))+((x111*x98))+(((-0.073)*cj0*px*r00*r01))+(((2.0)*pz*r00*x88))+(((-0.01604005776)*x77*x90))+((r00*x109*x110))+((x113*x95))+(((-1.0)*x102*x103*x91))+(((-0.00293995044)*x95))+(((-0.00133225)*x100*x103))+(((0.000336)*x85*x90))+(((-0.00133225)*x93))+(((-0.0026645)*r00*sj0*x83))+(((-0.00713987964)*x98))+(((0.008568)*x107*x94))+(((0.000336)*x77*x94))+(((-1.0)*x104*x91))+((r00*sj0*x103*x109))+(((-0.008568)*x78)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x114=(cj0*r00);
IkReal x115=((1.0)*r01);
CheckValue<IkReal> x117 = IKatan2WithCheck(IkReal(((((-1.0)*(0.0365)*r01*sj0))+(((-0.0365)*x114))+(((-1.0)*px*x115))+((py*r00)))),IkReal((((py*r02*sj0))+(((-1.0)*pz*x114))+(((-1.0)*pz*sj0*x115))+((cj0*px*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x117.valid){
continue;
}
IkReal x116=((-1.0)*(x117.value));
j1array[0]=x116;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x116);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x118=IKsin(j1);
IkReal x119=(r01*x118);
IkReal x120=(r00*x118);
IkReal x121=IKcos(j1);
IkReal x122=(r02*x121);
IkReal x123=((1.0)*pz*x121);
evalcond[0]=((((-1.0)*r01*sj0*x123))+(((0.0365)*cj0*x120))+(((-1.0)*py*x120))+(((0.0365)*sj0*x119))+((py*sj0*x122))+((cj0*px*x122))+((px*x119))+(((-1.0)*cj0*r00*x123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x124=(cj1*r02);
IkReal x125=(r02*sj1);
IkReal x126=(cj0*cj1*r01);
IkReal x127=(cj0*py*r02);
IkReal x128=(cj0*pz*r01);
IkReal x129=(cj0*r01*sj1);
IkReal x130=(cj1*r00*sj0);
IkReal x131=(px*r02*sj0);
IkReal x132=(pz*r00*sj0);
IkReal x133=(r00*sj0*sj1);
IkReal x134=((((12.0)*x131))+(((-12.0)*x127))+(((0.438)*r02))+(((-12.0)*x132))+(((1.224)*x130))+(((-0.048)*x129))+(((-0.048)*x124))+(((0.048)*x133))+(((-1.224)*x126))+(((12.0)*x128))+(((1.224)*x125)));
j3eval[0]=((1.11998112)+(IKabs(((0.18399896)+x134)))+(IKabs(((0.82400104)+x134)))+(IKabs(((-0.15200104)+(((-4.0)*x127))+(((-0.408)*x126))+(((-4.0)*x132))+(((4.0)*x128))+(((4.0)*x131))+(((-0.016)*x129))+(((0.408)*x125))+(((0.016)*x133))+(((-0.016)*x124))+(((0.146)*r02))+(((0.408)*x130))))));
if( IKabs(j3eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x135=(cj1*r02);
IkReal x136=(r02*sj1);
IkReal x137=(cj0*cj1*r01);
IkReal x138=(cj0*py*r02);
IkReal x139=(cj0*pz*r01);
IkReal x140=(cj0*r01*sj1);
IkReal x141=(cj1*r00*sj0);
IkReal x142=(px*r02*sj0);
IkReal x143=(pz*r00*sj0);
IkReal x144=(r00*sj0*sj1);
IkReal x145=((((-0.016)*x140))+(((-0.408)*x137))+(((-4.0)*x138))+(((-0.016)*x135))+(((4.0)*x142))+(((0.408)*x141))+(((-4.0)*x143))+(((0.408)*x136))+(((0.146)*r02))+(((0.016)*x144))+(((4.0)*x139)));
IkReal x146=((((1.224)*x141))+(((-1.224)*x137))+(((0.048)*x144))+(((12.0)*x142))+(((1.224)*x136))+(((-0.048)*x140))+(((12.0)*x139))+(((0.438)*r02))+(((-0.048)*x135))+(((-12.0)*x138))+(((-12.0)*x143)));
op[0]=((-0.15200104)+x145);
op[1]=-0.27999528;
op[2]=((0.18399896)+x146);
op[3]=-0.55999056;
op[4]=((0.82400104)+x146);
op[5]=-0.27999528;
op[6]=((0.48800104)+x145);
polyroots6(op,zeror,numroots);
IkReal j3array[6], cj3array[6], sj3array[6], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[6]={true,true,true,true,true,true};
_nj3 = 6;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x147=(r02*sj3);
IkReal x148=((1.0)*cj1);
IkReal x149=(cj3*r02);
IkReal x150=(r00*sj0*sj3);
IkReal x151=(cj3*r00*sj0);
IkReal x152=(cj0*r01*sj3);
IkReal x153=((1.0)*sj1);
IkReal x154=(cj0*cj3*r01);
if( IKabs(((((-1.0)*x148*x152))+((sj1*x151))+(((-1.0)*x148*x149))+(((-1.0)*x153*x154))+((cj1*x150))+((sj1*x147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x147*x148))+(((-1.0)*x148*x151))+(((-1.0)*x149*x153))+(((-1.0)*x152*x153))+((sj1*x150))+((cj1*x154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x148*x152))+((sj1*x151))+(((-1.0)*x148*x149))+(((-1.0)*x153*x154))+((cj1*x150))+((sj1*x147))))+IKsqr(((((-1.0)*x147*x148))+(((-1.0)*x148*x151))+(((-1.0)*x149*x153))+(((-1.0)*x152*x153))+((sj1*x150))+((cj1*x154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x148*x152))+((sj1*x151))+(((-1.0)*x148*x149))+(((-1.0)*x153*x154))+((cj1*x150))+((sj1*x147))), ((((-1.0)*x147*x148))+(((-1.0)*x148*x151))+(((-1.0)*x149*x153))+(((-1.0)*x152*x153))+((sj1*x150))+((cj1*x154))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x155=IKcos(j2);
IkReal x156=(cj3*x155);
IkReal x157=(r00*sj0);
IkReal x158=IKsin(j2);
IkReal x159=(sj3*x158);
IkReal x160=((1.0)*cj1);
IkReal x161=(cj0*r01);
IkReal x162=(cj3*x158);
IkReal x163=(sj3*x155);
IkReal x164=((1.0)*cj0*r01);
IkReal x165=(pz*x157);
IkReal x166=(px*r02);
IkReal x167=(cj3*sj3);
IkReal x168=cj3*cj3;
IkReal x169=r01*r01;
IkReal x170=((0.00133225)*x169);
IkReal x171=r02*r02;
IkReal x172=sj3*sj3*sj3;
IkReal x173=(sj3*x168);
IkReal x174=(x155*x158);
IkReal x175=((2.0)*py);
IkReal x176=x158*x158*x158;
IkReal x177=x155*x155;
IkReal x178=r00*r00;
IkReal x179=((0.073)*cj0*py);
IkReal x180=((0.073)*px*sj0);
IkReal x181=cj0*cj0;
IkReal x182=((1.0)*(px*px));
IkReal x183=((1.0)*(py*py));
IkReal x184=((1.0)*(pz*pz));
IkReal x185=(x158*x177);
IkReal x186=((0.01604005776)*cj3*sj3);
IkReal x187=((0.073)*py*r01);
IkReal x188=sj0*sj0*sj0;
IkReal x189=((0.00777988172)*x168);
IkReal x190=(x168*x177);
IkReal x191=((0.008568)*x176);
evalcond[0]=(((r02*sj1))+((cj1*x157))+x156+(((-1.0)*x160*x161))+(((-1.0)*x159)));
evalcond[1]=(((sj1*x157))+(((-1.0)*x162))+(((-1.0)*sj1*x164))+(((-1.0)*x163))+(((-1.0)*r02*x160)));
evalcond[2]=((-0.042)+(((-0.004)*x163))+(((-1.0)*(0.08000026)*cj3))+(((-1.0)*sj0*x166))+(((-0.004)*x162))+((py*((cj0*r02))))+(((0.03499941)*sj3))+(((0.102)*x156))+(((-1.0)*(0.0365)*r02))+x165+(((-0.102)*x159))+(((-1.0)*pz*x164)));
evalcond[3]=((0.0133929587003481)+(((0.000336)*x162*x177))+(((-1.0)*x169*x180*x181))+(((-0.008568)*x156))+(((0.000336)*x155*x172))+(((-1.0)*x171*x180))+(((-1.0)*x170))+(((-0.073)*px*x169*x188))+(((0.00672002184)*cj3))+((px*r00*r01*x175))+(((-0.010388)*x177))+(((-0.00293995044)*x173))+((x170*x181))+((x178*x179))+(((-0.0026645)*r00*sj0*x161))+(((-1.0)*x171*x183))+(((-0.001632)*x168*x174))+(((-0.00293995044)*x172))+((x185*x189))+(((-0.00027999528)*x155))+(((0.008568)*x172*x185))+((x171*x179))+(((0.008568)*sj3*x158*x190))+(((2.0)*pz*r00*x166))+(((-0.00133225)*x178*x181))+(((-0.00133225)*x171))+(((0.000816)*x174))+(((-1.0)*x169*x182))+((r00*x187*x188))+((x185*x186))+(((-0.0047839237996932)*x167))+(((-0.073)*cj0*pz*r01*r02))+(((-1.0)*x178*x183))+(((-0.01604005776)*x155*x168))+((x176*x186))+(((-0.00713987964)*x185))+((r00*sj0*x181*x187))+((x172*x191))+(((-1.0)*x178*x184))+(((-0.073)*cj0*px*r00*r01))+((x173*x191))+(((-0.020776)*cj3*sj3*x174))+(((0.000336)*cj3*x176))+(((-1.0)*x169*x184))+(((0.020776)*x190))+(((-0.0052129171002805)*x168))+((pz*r01*r02*x175))+(((0.000336)*x163*x168))+(((-1.0)*x171*x182))+(((-0.001632)*x167*x177))+(((0.073)*r02*x165))+(((0.00777988172)*x155*x167))+((x176*x189))+(((-0.00713987964)*x176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}

}

}

} else
{
continue; // verifyAllEquations

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - arm_hrrr (6c7789238a9f579755fc86257a633df4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
