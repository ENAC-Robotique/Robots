
tester.elf:     format de fichier elf32-avr

Sections:
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .data         000001c2  00800100  000035d4  00003668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d8  008002c2  008002c2  0000382a  2**0
                  ALLOC
  3 .stab         00013938  00000000  00000000  0000382c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009793  00000000  00000000  00017164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000208f7  2**0
                  CONTENTS, READONLY

DÃ©assemblage de la section .text:

00000000 <__vectors>:
       0:	64 c0       	rjmp	.+200    	; 0xca <__ctors_end>
       2:	00 00       	nop
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_11>
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_16>
      44:	6a c0       	rjmp	.+212    	; 0x11a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__vector_18>
      4c:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__vector_19>
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__vector_24>
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
	...

00000068 <digital_pin_to_timer_PGM>:
      68:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	70 01       	movw	r14, r0
      c4:	02 03       	mulsu	r16, r18
      c6:	4a 0e       	add	r4, r26
      c8:	52 12       	cpse	r5, r18

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	12 e0       	ldi	r17, 0x02	; 2
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	e4 ed       	ldi	r30, 0xD4	; 212
      de:	f5 e3       	ldi	r31, 0x35	; 53
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	a2 3c       	cpi	r26, 0xC2	; 194
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
      ec:	15 e0       	ldi	r17, 0x05	; 5
      ee:	a2 ec       	ldi	r26, 0xC2	; 194
      f0:	b2 e0       	ldi	r27, 0x02	; 2
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	aa 39       	cpi	r26, 0x9A	; 154
      f8:	b1 07       	cpc	r27, r17
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	ca ec       	ldi	r28, 0xCA	; 202
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	04 c0       	rjmp	.+8      	; 0x10c <__do_global_ctors+0x10>
     104:	22 97       	sbiw	r28, 0x02	; 2
     106:	fe 01       	movw	r30, r28
     108:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__tablejump__>
     10c:	c2 3c       	cpi	r28, 0xC2	; 194
     10e:	d1 07       	cpc	r29, r17
     110:	c9 f7       	brne	.-14     	; 0x104 <__do_global_ctors+0x8>
     112:	0e 94 54 13 	call	0x26a8	; 0x26a8 <main>
     116:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <_Z20deinitMenu_principalP6sState>:
	myEnc.write(0);
	afficher(menu_principal[0]);

}

void deinitMenu_principal(sState *next){
     11c:	08 95       	ret

0000011e <_Z18initMenu_principalP6sState>:
		int32_t ret = encoder.position;
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     11e:	f8 94       	cli
		encoder.position = p;
     120:	10 92 cb 02 	sts	0x02CB, r1
     124:	10 92 cc 02 	sts	0x02CC, r1
     128:	10 92 cd 02 	sts	0x02CD, r1
     12c:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     130:	78 94       	sei
			  "Analog Read",
			  "I2C",
			  "LIAISON SERIE",
			};
	myEnc.write(0);
	afficher(menu_principal[0]);
     132:	89 e7       	ldi	r24, 0x79	; 121
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	6b c3       	rjmp	.+1750   	; 0x80e <_Z8afficherPKc>

00000138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>:
     138:	dc 01       	movw	r26, r24
     13a:	ed 91       	ld	r30, X+
     13c:	fd 91       	ld	r31, X+
     13e:	80 81       	ld	r24, Z
     140:	ed 91       	ld	r30, X+
     142:	fd 91       	ld	r31, X+
     144:	90 81       	ld	r25, Z
     146:	ed 91       	ld	r30, X+
     148:	fd 91       	ld	r31, X+
     14a:	6c 91       	ld	r22, X
     14c:	63 70       	andi	r22, 0x03	; 3
     14e:	8e 23       	and	r24, r30
     150:	09 f0       	breq	.+2      	; 0x154 <L311>
     152:	64 60       	ori	r22, 0x04	; 4

00000154 <L311>:
     154:	9f 23       	and	r25, r31
     156:	09 f0       	breq	.+2      	; 0x15a <L312>
     158:	68 60       	ori	r22, 0x08	; 8

0000015a <L312>:
     15a:	e9 eb       	ldi	r30, 0xB9	; 185
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	e6 0f       	add	r30, r22
     160:	f1 1d       	adc	r31, r1
     162:	65 95       	asr	r22
     164:	65 95       	asr	r22
     166:	6d 93       	st	X+, r22
     168:	6d 91       	ld	r22, X+
     16a:	7d 91       	ld	r23, X+
     16c:	8d 91       	ld	r24, X+
     16e:	9d 91       	ld	r25, X+
     170:	09 94       	ijmp

00000172 <L31table>:
     172:	23 c0       	rjmp	.+70     	; 0x1ba <L31end>
     174:	1a c0       	rjmp	.+52     	; 0x1aa <L31plus1>
     176:	12 c0       	rjmp	.+36     	; 0x19c <L31minus1>
     178:	16 c0       	rjmp	.+44     	; 0x1a6 <L31plus2>
     17a:	10 c0       	rjmp	.+32     	; 0x19c <L31minus1>
     17c:	1e c0       	rjmp	.+60     	; 0x1ba <L31end>
     17e:	09 c0       	rjmp	.+18     	; 0x192 <L31minus2>
     180:	14 c0       	rjmp	.+40     	; 0x1aa <L31plus1>
     182:	13 c0       	rjmp	.+38     	; 0x1aa <L31plus1>
     184:	06 c0       	rjmp	.+12     	; 0x192 <L31minus2>
     186:	19 c0       	rjmp	.+50     	; 0x1ba <L31end>
     188:	09 c0       	rjmp	.+18     	; 0x19c <L31minus1>
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <L31plus2>
     18c:	07 c0       	rjmp	.+14     	; 0x19c <L31minus1>
     18e:	0d c0       	rjmp	.+26     	; 0x1aa <L31plus1>
     190:	14 c0       	rjmp	.+40     	; 0x1ba <L31end>

00000192 <L31minus2>:
     192:	62 50       	subi	r22, 0x02	; 2
     194:	70 40       	sbci	r23, 0x00	; 0
     196:	80 40       	sbci	r24, 0x00	; 0
     198:	90 40       	sbci	r25, 0x00	; 0
     19a:	0b c0       	rjmp	.+22     	; 0x1b2 <L31store>

0000019c <L31minus1>:
     19c:	61 50       	subi	r22, 0x01	; 1
     19e:	70 40       	sbci	r23, 0x00	; 0
     1a0:	80 40       	sbci	r24, 0x00	; 0
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <L31store>

000001a6 <L31plus2>:
     1a6:	6e 5f       	subi	r22, 0xFE	; 254
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <L31z>

000001aa <L31plus1>:
     1aa:	6f 5f       	subi	r22, 0xFF	; 255

000001ac <L31z>:
     1ac:	7f 4f       	sbci	r23, 0xFF	; 255
     1ae:	8f 4f       	sbci	r24, 0xFF	; 255
     1b0:	9f 4f       	sbci	r25, 0xFF	; 255

000001b2 <L31store>:
     1b2:	9e 93       	st	-X, r25
     1b4:	8e 93       	st	-X, r24
     1b6:	7e 93       	st	-X, r23
     1b8:	6e 93       	st	-X, r22

000001ba <L31end>:
     1ba:	08 95       	ret

000001bc <_ZN7Encoder4readEv>:
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
     1c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c4:	82 30       	cpi	r24, 0x02	; 2
     1c6:	20 f4       	brcc	.+8      	; 0x1d0 <_ZN7Encoder4readEv+0x14>
     1c8:	f8 94       	cli
     1ca:	ce 01       	movw	r24, r28
     1cc:	b5 df       	rcall	.-150    	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <_ZN7Encoder4readEv+0x16>
     1d0:	f8 94       	cli
     1d2:	6f 81       	ldd	r22, Y+7	; 0x07
     1d4:	78 85       	ldd	r23, Y+8	; 0x08
     1d6:	89 85       	ldd	r24, Y+9	; 0x09
     1d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1da:	78 94       	sei
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <_Z18testMenu_principalv>:
#define NB_menu_principal 5

Encoder myEnc(4, 5);


sState* testMenu_principal(){
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	2a 97       	sbiw	r28, 0x0a	; 10
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
		  "SERVOS",
		  "PWM",
		  "Analog Read",
		  "I2C",
		  "LIAISON SERIE",
		};
     1fa:	8a e0       	ldi	r24, 0x0A	; 10
     1fc:	e3 e6       	ldi	r30, 0x63	; 99
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	de 01       	movw	r26, r28
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	01 90       	ld	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	8a 95       	dec	r24
     20a:	e1 f7       	brne	.-8      	; 0x204 <_Z18testMenu_principalv+0x22>


		static int memPosition;
		int Position = (abs(myEnc.read())/2)%NB_menu_principal;    //position du selecteur
     20c:	84 ec       	ldi	r24, 0xC4	; 196
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	d5 df       	rcall	.-86     	; 0x1bc <_ZN7Encoder4readEv>
     212:	16 16       	cp	r1, r22
     214:	17 06       	cpc	r1, r23
     216:	18 06       	cpc	r1, r24
     218:	19 06       	cpc	r1, r25
     21a:	54 f4       	brge	.+20     	; 0x230 <_Z18testMenu_principalv+0x4e>
     21c:	84 ec       	ldi	r24, 0xC4	; 196
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	cd df       	rcall	.-102    	; 0x1bc <_ZN7Encoder4readEv>
     222:	22 e0       	ldi	r18, 0x02	; 2
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     22e:	10 c0       	rjmp	.+32     	; 0x250 <_Z18testMenu_principalv+0x6e>
     230:	84 ec       	ldi	r24, 0xC4	; 196
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	c3 df       	rcall	.-122    	; 0x1bc <_ZN7Encoder4readEv>
     236:	22 e0       	ldi	r18, 0x02	; 2
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     242:	50 95       	com	r21
     244:	40 95       	com	r20
     246:	30 95       	com	r19
     248:	21 95       	neg	r18
     24a:	3f 4f       	sbci	r19, 0xFF	; 255
     24c:	4f 4f       	sbci	r20, 0xFF	; 255
     24e:	5f 4f       	sbci	r21, 0xFF	; 255
     250:	ca 01       	movw	r24, r20
     252:	b9 01       	movw	r22, r18
     254:	25 e0       	ldi	r18, 0x05	; 5
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     260:	8b 01       	movw	r16, r22
     262:	80 91 c2 02 	lds	r24, 0x02C2
     266:	90 91 c3 02 	lds	r25, 0x02C3
		//int Position = (myEnc.read()/2)%NB_menu_principal;    //position du selecteur

		   if(Position != memPosition)  //on affiche que si on change de position
     26a:	08 17       	cp	r16, r24
     26c:	19 07       	cpc	r17, r25
     26e:	81 f0       	breq	.+32     	; 0x290 <_Z18testMenu_principalv+0xae>
     270:	f8 01       	movw	r30, r16
     272:	ee 0f       	add	r30, r30
     274:	ff 1f       	adc	r31, r31
		   {
		      afficher(menu_principal[Position]);
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	8c 0f       	add	r24, r28
     27c:	9d 1f       	adc	r25, r29
     27e:	e8 0f       	add	r30, r24
     280:	f9 1f       	adc	r31, r25
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	c3 d2       	rcall	.+1414   	; 0x80e <_Z8afficherPKc>
     288:	10 93 c3 02 	sts	0x02C3, r17
     28c:	00 93 c2 02 	sts	0x02C2, r16
		      memPosition=Position;
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
     296:	89 2b       	or	r24, r25
		   }

		  if(!digitalRead(SELECT))
     298:	99 f4       	brne	.+38     	; 0x2c0 <_Z18testMenu_principalv+0xde>
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
     2a0:	89 2b       	or	r24, r25
		  {
			  while(!digitalRead(SELECT));
     2a2:	d9 f3       	breq	.-10     	; 0x29a <_Z18testMenu_principalv+0xb8>
     2a4:	01 30       	cpi	r16, 0x01	; 1
     2a6:	11 05       	cpc	r17, r1
     2a8:	71 f0       	breq	.+28     	; 0x2c6 <_Z18testMenu_principalv+0xe4>
     2aa:	02 30       	cpi	r16, 0x02	; 2

		    switch (Position)
     2ac:	11 05       	cpc	r17, r1
     2ae:	29 f0       	breq	.+10     	; 0x2ba <_Z18testMenu_principalv+0xd8>
     2b0:	01 2b       	or	r16, r17
     2b2:	31 f4       	brne	.+12     	; 0x2c0 <_Z18testMenu_principalv+0xde>
     2b4:	84 e1       	ldi	r24, 0x14	; 20
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <_Z18testMenu_principalv+0xe8>
     2ba:	8c e1       	ldi	r24, 0x1C	; 28
		    {
		        case 0:{ return(&sMenu_servo); break; }
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	05 c0       	rjmp	.+10     	; 0x2ca <_Z18testMenu_principalv+0xe8>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
		        case 1:{ return(&sMenu_pwm); break; }
		        case 2:{ return(&sanalogRead); break; }
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_Z18testMenu_principalv+0xe8>
     2c6:	8c e0       	ldi	r24, 0x0C	; 12
		        //default:
		     }
		  }


    return NULL;
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	2a 96       	adiw	r28, 0x0a	; 10
     2cc:	0f b6       	in	r0, 0x3f	; 63
			  while(!digitalRead(SELECT));

		    switch (Position)
		    {
		        case 0:{ return(&sMenu_servo); break; }
		        case 1:{ return(&sMenu_pwm); break; }
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
		     }
		  }


    return NULL;
}
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret

000002e0 <_GLOBAL__sub_I_myEnc>:
class Encoder
{
public:
	Encoder(uint8_t pin1, uint8_t pin2) {
		#ifdef INPUT_PULLUP
		pinMode(pin1, INPUT_PULLUP);
     2e0:	62 e0       	ldi	r22, 0x02	; 2
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
     2e8:	62 e0       	ldi	r22, 0x02	; 2
     2ea:	85 e0       	ldi	r24, 0x05	; 5
     2ec:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
		pinMode(pin1, INPUT);
		digitalWrite(pin1, HIGH);
		pinMode(pin2, INPUT);
		digitalWrite(pin2, HIGH);
		#endif
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
     2f0:	e4 e9       	ldi	r30, 0x94	; 148
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	e4 91       	lpm	r30, Z
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	ec 55       	subi	r30, 0x5C	; 92
     2fe:	ff 4f       	sbci	r31, 0xFF	; 255
     300:	85 91       	lpm	r24, Z+
     302:	94 91       	lpm	r25, Z
     304:	90 93 c5 02 	sts	0x02C5, r25
     308:	80 93 c4 02 	sts	0x02C4, r24
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
     30c:	e0 e8       	ldi	r30, 0x80	; 128
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e4 91       	lpm	r30, Z
     312:	e0 93 c8 02 	sts	0x02C8, r30
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
     316:	e5 e9       	ldi	r30, 0x95	; 149
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	e4 91       	lpm	r30, Z
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	ec 55       	subi	r30, 0x5C	; 92
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	85 91       	lpm	r24, Z+
     328:	94 91       	lpm	r25, Z
     32a:	90 93 c7 02 	sts	0x02C7, r25
     32e:	80 93 c6 02 	sts	0x02C6, r24
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
     332:	e1 e8       	ldi	r30, 0x81	; 129
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	e4 91       	lpm	r30, Z
     338:	e0 93 c9 02 	sts	0x02C9, r30
		encoder.position = 0;
     33c:	10 92 cb 02 	sts	0x02CB, r1
     340:	10 92 cc 02 	sts	0x02CC, r1
     344:	10 92 cd 02 	sts	0x02CD, r1
     348:	10 92 ce 02 	sts	0x02CE, r1
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
     34c:	80 ed       	ldi	r24, 0xD0	; 208
     34e:	97 e0       	ldi	r25, 0x07	; 7
     350:	0e 94 07 14 	call	0x280e	; 0x280e <delayMicroseconds>
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
     354:	e0 91 c4 02 	lds	r30, 0x02C4
     358:	f0 91 c5 02 	lds	r31, 0x02C5
     35c:	90 81       	ld	r25, Z
     35e:	80 91 c8 02 	lds	r24, 0x02C8
     362:	98 23       	and	r25, r24
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	09 f4       	brne	.+2      	; 0x36a <_GLOBAL__sub_I_myEnc+0x8a>
     368:	80 e0       	ldi	r24, 0x00	; 0
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
     36a:	e0 91 c6 02 	lds	r30, 0x02C6
     36e:	f0 91 c7 02 	lds	r31, 0x02C7
     372:	90 81       	ld	r25, Z
     374:	20 91 c9 02 	lds	r18, 0x02C9
     378:	92 23       	and	r25, r18
     37a:	09 f0       	breq	.+2      	; 0x37e <_GLOBAL__sub_I_myEnc+0x9e>
     37c:	82 60       	ori	r24, 0x02	; 2
		encoder.state = s;
     37e:	80 93 ca 02 	sts	0x02CA, r24
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = attach_interrupt(pin1, &encoder);
     382:	10 92 cf 02 	sts	0x02CF, r1
     386:	08 95       	ret

00000388 <_Z14deinitMenu_pwmP6sState>:
}
void initMenu_pwm(sState *prev){
			myEnc.write(0);
			afficher("  0 - 255");
}
void deinitMenu_pwm(sState *next){
     388:	08 95       	ret

0000038a <_Z12initMenu_pwmP6sState>:
		int32_t ret = encoder.position;
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     38a:	f8 94       	cli
		encoder.position = p;
     38c:	10 92 cb 02 	sts	0x02CB, r1
     390:	10 92 cc 02 	sts	0x02CC, r1
     394:	10 92 cd 02 	sts	0x02CD, r1
     398:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     39c:	78 94       	sei

    return NULL;
}
void initMenu_pwm(sState *prev){
			myEnc.write(0);
			afficher("  0 - 255");
     39e:	82 ea       	ldi	r24, 0xA2	; 162
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	35 c2       	rjmp	.+1130   	; 0x80e <_Z8afficherPKc>

000003a4 <_Z12testMenu_pwmv>:
#include "state_pwm_0_255.h"
#include "state_pwm_pc.h"
#include "state_pwm_0_5.h"
#define NB_menu_pwm 3

sState* testMenu_pwm(){
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <_Z12testMenu_pwmv+0x12>
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <_Z12testMenu_pwmv+0x14>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <_Z12testMenu_pwmv+0x16>
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
	const char *menu_pwm[] = {
		  "  0 - 255",
		  "   %",
		  "  0 - 5 V",
		};
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	ed e6       	ldi	r30, 0x6D	; 109
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	de 01       	movw	r26, r28
     3c6:	11 96       	adiw	r26, 0x01	; 1
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	8a 95       	dec	r24
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <_Z12testMenu_pwmv+0x24>
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     3d0:	80 91 cf 02 	lds	r24, 0x02CF
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	28 f4       	brcc	.+10     	; 0x3e2 <_Z12testMenu_pwmv+0x3e>
			noInterrupts();
     3d8:	f8 94       	cli
			update(&encoder);
     3da:	84 ec       	ldi	r24, 0xC4	; 196
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	ac de       	rcall	.-680    	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <_Z12testMenu_pwmv+0x40>
     3e2:	f8 94       	cli
		} else {
			noInterrupts();
     3e4:	60 91 cb 02 	lds	r22, 0x02CB
		}
		int32_t ret = encoder.position;
     3e8:	70 91 cc 02 	lds	r23, 0x02CC
     3ec:	80 91 cd 02 	lds	r24, 0x02CD
     3f0:	90 91 ce 02 	lds	r25, 0x02CE
     3f4:	78 94       	sei
     3f6:	22 e0       	ldi	r18, 0x02	; 2


		static int memPosition;
		int Position = (myEnc.read()/2)%NB_menu_pwm;    //position du selecteur
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     402:	ca 01       	movw	r24, r20
     404:	b9 01       	movw	r22, r18
     406:	23 e0       	ldi	r18, 0x03	; 3
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     412:	6b 01       	movw	r12, r22
     414:	7c 01       	movw	r14, r24
     416:	8b 01       	movw	r16, r22
     418:	80 91 d0 02 	lds	r24, 0x02D0
		   if(Position != memPosition)  //on affiche que si on change de position
     41c:	90 91 d1 02 	lds	r25, 0x02D1
     420:	c8 16       	cp	r12, r24
     422:	d9 06       	cpc	r13, r25
     424:	81 f0       	breq	.+32     	; 0x446 <_Z12testMenu_pwmv+0xa2>
     426:	f6 01       	movw	r30, r12
		   {
		      afficher(menu_pwm[Position]);
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	8c 0f       	add	r24, r28
     432:	9d 1f       	adc	r25, r29
     434:	e8 0f       	add	r30, r24
     436:	f9 1f       	adc	r31, r25
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	e8 d1       	rcall	.+976    	; 0x80e <_Z8afficherPKc>
     43e:	d0 92 d1 02 	sts	0x02D1, r13
		      memPosition=Position;
     442:	c0 92 d0 02 	sts	0x02D0, r12
     446:	86 e0       	ldi	r24, 0x06	; 6
     448:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		   }

		  if(!digitalRead(SELECT))
     44c:	89 2b       	or	r24, r25
     44e:	99 f4       	brne	.+38     	; 0x476 <_Z12testMenu_pwmv+0xd2>
     450:	86 e0       	ldi	r24, 0x06	; 6
     452:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		  {
			while(!digitalRead(SELECT));
     456:	89 2b       	or	r24, r25
     458:	d9 f3       	breq	.-10     	; 0x450 <_Z12testMenu_pwmv+0xac>
     45a:	01 30       	cpi	r16, 0x01	; 1
     45c:	11 05       	cpc	r17, r1
		    switch (Position)
     45e:	11 f1       	breq	.+68     	; 0x4a4 <_Z12testMenu_pwmv+0x100>
     460:	02 30       	cpi	r16, 0x02	; 2
     462:	11 05       	cpc	r17, r1
     464:	29 f0       	breq	.+10     	; 0x470 <_Z12testMenu_pwmv+0xcc>
     466:	01 2b       	or	r16, r17
     468:	31 f4       	brne	.+12     	; 0x476 <_Z12testMenu_pwmv+0xd2>
     46a:	8e e2       	ldi	r24, 0x2E	; 46
     46c:	91 e0       	ldi	r25, 0x01	; 1
		    {
		        case 0:{ return(&spwm_0_255); break; }
     46e:	1c c0       	rjmp	.+56     	; 0x4a8 <_Z12testMenu_pwmv+0x104>
     470:	86 e3       	ldi	r24, 0x36	; 54
     472:	91 e0       	ldi	r25, 0x01	; 1
		        case 1:{ return(&spwm_pc); break; }
		        case 2:{ return(&spwm_0_5); break; }
     474:	19 c0       	rjmp	.+50     	; 0x4a8 <_Z12testMenu_pwmv+0x104>
     476:	87 e0       	ldi	r24, 0x07	; 7
     478:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		        //default:
		     }
		  }

		  if(!digitalRead(RETOUR))
     47c:	89 2b       	or	r24, r25
     47e:	61 f4       	brne	.+24     	; 0x498 <_Z12testMenu_pwmv+0xf4>
     480:	6f e0       	ldi	r22, 0x0F	; 15
     482:	70 e0       	ldi	r23, 0x00	; 0
		  {
			  delay(DELAY_BOUNCE);	//anti rebond
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
     48c:	87 e0       	ldi	r24, 0x07	; 7
     48e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
			  while(!digitalRead(RETOUR));	//attente du relachement du bouton
     492:	89 2b       	or	r24, r25
     494:	d9 f3       	breq	.-10     	; 0x48c <_Z12testMenu_pwmv+0xe8>
     496:	03 c0       	rjmp	.+6      	; 0x49e <_Z12testMenu_pwmv+0xfa>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
			  return(&sMenu_principal);
		  }


    return NULL;
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <_Z12testMenu_pwmv+0x104>
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	91 e0       	ldi	r25, 0x01	; 1

		  if(!digitalRead(RETOUR))
		  {
			  delay(DELAY_BOUNCE);	//anti rebond
			  while(!digitalRead(RETOUR));	//attente du relachement du bouton
			  return(&sMenu_principal);
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <_Z12testMenu_pwmv+0x104>
     4a4:	8e e3       	ldi	r24, 0x3E	; 62
     4a6:	91 e0       	ldi	r25, 0x01	; 1
		  {
			while(!digitalRead(SELECT));
		    switch (Position)
		    {
		        case 0:{ return(&spwm_0_255); break; }
		        case 1:{ return(&spwm_pc); break; }
     4a8:	26 96       	adiw	r28, 0x06	; 6
     4aa:	0f b6       	in	r0, 0x3f	; 63
			  return(&sMenu_principal);
		  }


    return NULL;
}
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	cf 90       	pop	r12
     4c4:	08 95       	ret

000004c6 <_Z16deinitMenu_servoP6sState>:
void initMenu_servo(sState *prev){
			myEnc.write(0);
//int Position = (abs(myEnc.read())/2)%NB_menu_servo;
			afficher("ANGLE tps reel");
}
void deinitMenu_servo(sState *next){
     4c6:	08 95       	ret

000004c8 <_Z14initMenu_servoP6sState>:
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     4c8:	f8 94       	cli
		encoder.position = p;
     4ca:	10 92 cb 02 	sts	0x02CB, r1
     4ce:	10 92 cc 02 	sts	0x02CC, r1
     4d2:	10 92 cd 02 	sts	0x02CD, r1
     4d6:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     4da:	78 94       	sei
    return NULL;
}
void initMenu_servo(sState *prev){
			myEnc.write(0);
//int Position = (abs(myEnc.read())/2)%NB_menu_servo;
			afficher("ANGLE tps reel");
     4dc:	8b eb       	ldi	r24, 0xBB	; 187
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	96 c1       	rjmp	.+812    	; 0x80e <_Z8afficherPKc>

000004e2 <_Z14testMenu_servov>:


Servo servotest;


sState* testMenu_servo(){
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <_Z14testMenu_servov+0x12>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <_Z14testMenu_servov+0x14>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <_Z14testMenu_servov+0x16>
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	const char *menu_servo[] = {
		  "ANGLE tps reel",
		  "ANGLE validation",
		  "MICROSECONDES",
		};
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	e3 e7       	ldi	r30, 0x73	; 115
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	de 01       	movw	r26, r28
     504:	11 96       	adiw	r26, 0x01	; 1
     506:	01 90       	ld	r0, Z+
     508:	0d 92       	st	X+, r0
     50a:	8a 95       	dec	r24
     50c:	e1 f7       	brne	.-8      	; 0x506 <_Z14testMenu_servov+0x24>
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     50e:	80 91 cf 02 	lds	r24, 0x02CF
     512:	82 30       	cpi	r24, 0x02	; 2
     514:	28 f4       	brcc	.+10     	; 0x520 <_Z14testMenu_servov+0x3e>
			noInterrupts();
     516:	f8 94       	cli
			update(&encoder);
     518:	84 ec       	ldi	r24, 0xC4	; 196
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	0d de       	rcall	.-998    	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     51e:	01 c0       	rjmp	.+2      	; 0x522 <_Z14testMenu_servov+0x40>
     520:	f8 94       	cli
		} else {
			noInterrupts();
     522:	60 91 cb 02 	lds	r22, 0x02CB
		}
		int32_t ret = encoder.position;
     526:	70 91 cc 02 	lds	r23, 0x02CC
     52a:	80 91 cd 02 	lds	r24, 0x02CD
     52e:	90 91 ce 02 	lds	r25, 0x02CE
     532:	78 94       	sei
     534:	22 e0       	ldi	r18, 0x02	; 2


		static int memPosition;
//int Position = (abs(myEnc.read())/2)%NB_menu_servo;    //position du selecteur
		int Position = (myEnc.read()/2)%NB_menu_servo;    //position du selecteur
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     540:	ca 01       	movw	r24, r20
     542:	b9 01       	movw	r22, r18
     544:	23 e0       	ldi	r18, 0x03	; 3
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     550:	6b 01       	movw	r12, r22
     552:	7c 01       	movw	r14, r24
     554:	8b 01       	movw	r16, r22
     556:	80 91 d2 02 	lds	r24, 0x02D2
		   if(Position != memPosition)  //on affiche que si on change de position
     55a:	90 91 d3 02 	lds	r25, 0x02D3
     55e:	c8 16       	cp	r12, r24
     560:	d9 06       	cpc	r13, r25
     562:	81 f0       	breq	.+32     	; 0x584 <_Z14testMenu_servov+0xa2>
     564:	f6 01       	movw	r30, r12
		   {
		      afficher(menu_servo[Position]);
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	8c 0f       	add	r24, r28
     570:	9d 1f       	adc	r25, r29
     572:	e8 0f       	add	r30, r24
     574:	f9 1f       	adc	r31, r25
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	49 d1       	rcall	.+658    	; 0x80e <_Z8afficherPKc>
     57c:	d0 92 d3 02 	sts	0x02D3, r13
		      memPosition=Position;
     580:	c0 92 d2 02 	sts	0x02D2, r12
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		   }

		  if(!digitalRead(SELECT))
     58a:	89 2b       	or	r24, r25
     58c:	99 f4       	brne	.+38     	; 0x5b4 <_Z14testMenu_servov+0xd2>
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		  {
			while(!digitalRead(SELECT));
     594:	89 2b       	or	r24, r25
     596:	d9 f3       	breq	.-10     	; 0x58e <_Z14testMenu_servov+0xac>
     598:	01 30       	cpi	r16, 0x01	; 1
     59a:	11 05       	cpc	r17, r1
		    switch (Position)
     59c:	11 f1       	breq	.+68     	; 0x5e2 <_Z14testMenu_servov+0x100>
     59e:	02 30       	cpi	r16, 0x02	; 2
     5a0:	11 05       	cpc	r17, r1
     5a2:	29 f0       	breq	.+10     	; 0x5ae <_Z14testMenu_servov+0xcc>
     5a4:	01 2b       	or	r16, r17
     5a6:	31 f4       	brne	.+12     	; 0x5b4 <_Z14testMenu_servov+0xd2>
     5a8:	88 e5       	ldi	r24, 0x58	; 88
     5aa:	91 e0       	ldi	r25, 0x01	; 1
		    {
		        case 0:{ return(&sservo_selecter2); break; }
     5ac:	1c c0       	rjmp	.+56     	; 0x5e6 <_Z14testMenu_servov+0x104>
     5ae:	88 e4       	ldi	r24, 0x48	; 72
     5b0:	91 e0       	ldi	r25, 0x01	; 1
		        case 1:{ return(&sservo_selecter1); break; }
		        case 2:{ return(&sservo_micros); break; }
     5b2:	19 c0       	rjmp	.+50     	; 0x5e6 <_Z14testMenu_servov+0x104>
     5b4:	87 e0       	ldi	r24, 0x07	; 7
     5b6:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		        //default:
		     }
		  }

		  if(!digitalRead(RETOUR))
     5ba:	89 2b       	or	r24, r25
     5bc:	61 f4       	brne	.+24     	; 0x5d6 <_Z14testMenu_servov+0xf4>
     5be:	6f e0       	ldi	r22, 0x0F	; 15
     5c0:	70 e0       	ldi	r23, 0x00	; 0
		  {
			  delay(DELAY_BOUNCE);	//anti rebond
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
     5ca:	87 e0       	ldi	r24, 0x07	; 7
     5cc:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
			  while(!digitalRead(RETOUR));	//attente du relachement du bouton
     5d0:	89 2b       	or	r24, r25
     5d2:	d9 f3       	breq	.-10     	; 0x5ca <_Z14testMenu_servov+0xe8>
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <_Z14testMenu_servov+0xfa>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
			  return(&sMenu_principal);
		  }


    return NULL;
     5da:	05 c0       	rjmp	.+10     	; 0x5e6 <_Z14testMenu_servov+0x104>
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	91 e0       	ldi	r25, 0x01	; 1

		  if(!digitalRead(RETOUR))
		  {
			  delay(DELAY_BOUNCE);	//anti rebond
			  while(!digitalRead(RETOUR));	//attente du relachement du bouton
			  return(&sMenu_principal);
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <_Z14testMenu_servov+0x104>
     5e2:	80 e5       	ldi	r24, 0x50	; 80
     5e4:	91 e0       	ldi	r25, 0x01	; 1
		  {
			while(!digitalRead(SELECT));
		    switch (Position)
		    {
		        case 0:{ return(&sservo_selecter2); break; }
		        case 1:{ return(&sservo_selecter1); break; }
     5e6:	26 96       	adiw	r28, 0x06	; 6
     5e8:	0f b6       	in	r0, 0x3f	; 63
			  return(&sMenu_principal);
		  }


    return NULL;
}
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	08 95       	ret

00000604 <_GLOBAL__sub_I_servotest>:
#include "state_servo_micros.h"
#define NB_menu_servo 3



Servo servotest;
     604:	84 ed       	ldi	r24, 0xD4	; 212
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <_ZN5ServoC1Ev>

0000060c <_Z14initanalogReadP6sState>:
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     60c:	f8 94       	cli
		encoder.position = p;
     60e:	10 92 cb 02 	sts	0x02CB, r1
     612:	10 92 cc 02 	sts	0x02CC, r1
     616:	10 92 cd 02 	sts	0x02CD, r1
     61a:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     61e:	78 94       	sei
     620:	08 95       	ret

00000622 <_Z16deinitanalogReadP6sState>:
    return NULL;
}
void initanalogRead(sState *prev){
	myEnc.write(0);
}
void deinitanalogRead(sState *next){
     622:	08 95       	ret

00000624 <_Z14testanalogReadv>:
#include "state_analogRead.h"
#include "state_blink.h"

// test;

sState* testanalogRead(){
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	60 97       	sbiw	r28, 0x10	; 16
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     644:	80 91 cf 02 	lds	r24, 0x02CF
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	28 f4       	brcc	.+10     	; 0x656 <_Z14testanalogReadv+0x32>
			noInterrupts();
     64c:	f8 94       	cli
			update(&encoder);
     64e:	84 ec       	ldi	r24, 0xC4	; 196
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	72 dd       	rcall	.-1308   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     654:	01 c0       	rjmp	.+2      	; 0x658 <_Z14testanalogReadv+0x34>
     656:	f8 94       	cli
		} else {
			noInterrupts();
     658:	60 91 cb 02 	lds	r22, 0x02CB
		}
		int32_t ret = encoder.position;
     65c:	70 91 cc 02 	lds	r23, 0x02CC
     660:	80 91 cd 02 	lds	r24, 0x02CD
     664:	90 91 ce 02 	lds	r25, 0x02CE
     668:	78 94       	sei
     66a:	22 e0       	ldi	r18, 0x02	; 2
	static int memValue[]={0,0,0,0,0,0};
	int Position = (myEnc.read()/2)%6;    //position du selecteur
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     676:	ca 01       	movw	r24, r20
     678:	b9 01       	movw	r22, r18
     67a:	26 e0       	ldi	r18, 0x06	; 6
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     686:	86 2f       	mov	r24, r22
     688:	06 2f       	mov	r16, r22
     68a:	17 2f       	mov	r17, r23
     68c:	0e 94 4d 14 	call	0x289a	; 0x289a <analogRead>
	int Value = analogRead(Position);
     690:	7c 01       	movw	r14, r24
     692:	68 01       	movw	r12, r16

	if(abs(Value-memValue[Position])>11)
     694:	cc 0c       	add	r12, r12
     696:	dd 1c       	adc	r13, r13
     698:	f6 01       	movw	r30, r12
     69a:	e9 52       	subi	r30, 0x29	; 41
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	80 81       	ld	r24, Z
     6a0:	91 81       	ldd	r25, Z+1	; 0x01
     6a2:	97 01       	movw	r18, r14
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	c9 01       	movw	r24, r18
     6aa:	37 ff       	sbrs	r19, 7
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <_Z14testanalogReadv+0x90>
     6ae:	91 95       	neg	r25
     6b0:	81 95       	neg	r24
     6b2:	91 09       	sbc	r25, r1
     6b4:	0c 97       	sbiw	r24, 0x0c	; 12
     6b6:	9c f1       	brlt	.+102    	; 0x71e <_Z14testanalogReadv+0xfa>
     6b8:	b7 01       	movw	r22, r14
	{
		char affich[16];
		double val;
		val=Value/1024.0;
     6ba:	88 27       	eor	r24, r24
     6bc:	77 fd       	sbrc	r23, 7
     6be:	80 95       	com	r24
     6c0:	98 2f       	mov	r25, r24
     6c2:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__floatsisf>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5a e3       	ldi	r21, 0x3A	; 58
     6ce:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__mulsf3>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
		int pe=val*100;
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	48 ec       	ldi	r20, 0xC8	; 200
     6d8:	52 e4       	ldi	r21, 0x42	; 66
     6da:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__mulsf3>
     6de:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__fixsfsi>
     6e2:	7f 93       	push	r23
		snprintf(affich,17,"CH%d : %d %%",Position,pe);
     6e4:	6f 93       	push	r22
     6e6:	1f 93       	push	r17
     6e8:	0f 93       	push	r16
     6ea:	89 ee       	ldi	r24, 0xE9	; 233
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	1f 92       	push	r1
     6f4:	81 e1       	ldi	r24, 0x11	; 17
     6f6:	8f 93       	push	r24
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	1f 93       	push	r17
     700:	0f 93       	push	r16
     702:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
     706:	c8 01       	movw	r24, r16
		afficher(affich);
     708:	82 d0       	rcall	.+260    	; 0x80e <_Z8afficherPKc>
     70a:	f6 01       	movw	r30, r12
     70c:	e9 52       	subi	r30, 0x29	; 41
		memValue[Position]=Value;
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	f1 82       	std	Z+1, r15	; 0x01
     712:	e0 82       	st	Z, r14
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
	}

	if(!digitalRead(RETOUR))
     724:	89 2b       	or	r24, r25
     726:	61 f4       	brne	.+24     	; 0x740 <_Z14testanalogReadv+0x11c>
     728:	6f e0       	ldi	r22, 0x0F	; 15
     72a:	70 e0       	ldi	r23, 0x00	; 0
	{
		delay(DELAY_BOUNCE);	//anti rebond
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
     734:	87 e0       	ldi	r24, 0x07	; 7
     736:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
     73a:	89 2b       	or	r24, r25
     73c:	d9 f3       	breq	.-10     	; 0x734 <_Z14testanalogReadv+0x110>
     73e:	03 c0       	rjmp	.+6      	; 0x746 <_Z14testanalogReadv+0x122>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
		return(&sMenu_principal);
	}
    return NULL;
     744:	02 c0       	rjmp	.+4      	; 0x74a <_Z14testanalogReadv+0x126>
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	91 e0       	ldi	r25, 0x01	; 1

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_principal);
     74a:	60 96       	adiw	r28, 0x10	; 16
     74c:	0f b6       	in	r0, 0x3f	; 63
	}
    return NULL;
}
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <_Z5blinkv>:
}
void deinitBlink(sState *next){
    digitalWrite(PIN_LED,LOW);
}

void blink(){
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
    static int state=1;
    static unsigned long prevMillis=millis();
     76c:	80 91 e7 02 	lds	r24, 0x02E7
     770:	81 11       	cpse	r24, r1
     772:	14 c0       	rjmp	.+40     	; 0x79c <_Z5blinkv+0x34>
     774:	87 ee       	ldi	r24, 0xE7	; 231
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
     77c:	89 2b       	or	r24, r25
     77e:	71 f0       	breq	.+28     	; 0x79c <_Z5blinkv+0x34>
     780:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
     784:	60 93 e3 02 	sts	0x02E3, r22
     788:	70 93 e4 02 	sts	0x02E4, r23
     78c:	80 93 e5 02 	sts	0x02E5, r24
     790:	90 93 e6 02 	sts	0x02E6, r25
     794:	87 ee       	ldi	r24, 0xE7	; 231
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
    if ( (millis()-prevMillis) >100){
     79c:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
     7a0:	00 91 e3 02 	lds	r16, 0x02E3
     7a4:	10 91 e4 02 	lds	r17, 0x02E4
     7a8:	20 91 e5 02 	lds	r18, 0x02E5
     7ac:	30 91 e6 02 	lds	r19, 0x02E6
     7b0:	60 1b       	sub	r22, r16
     7b2:	71 0b       	sbc	r23, r17
     7b4:	82 0b       	sbc	r24, r18
     7b6:	93 0b       	sbc	r25, r19
     7b8:	65 36       	cpi	r22, 0x65	; 101
     7ba:	71 05       	cpc	r23, r1
     7bc:	81 05       	cpc	r24, r1
     7be:	91 05       	cpc	r25, r1
     7c0:	18 f1       	brcs	.+70     	; 0x808 <_Z5blinkv+0xa0>
        digitalWrite(PIN_LED, state);    // set the LED off
     7c2:	60 91 24 01 	lds	r22, 0x0124
     7c6:	8d e0       	ldi	r24, 0x0D	; 13
     7c8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <digitalWrite>
        state^=1;
     7cc:	80 91 24 01 	lds	r24, 0x0124
     7d0:	90 91 25 01 	lds	r25, 0x0125
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	82 27       	eor	r24, r18
     7d8:	90 93 25 01 	sts	0x0125, r25
     7dc:	80 93 24 01 	sts	0x0124, r24
        prevMillis+=100;
     7e0:	80 91 e3 02 	lds	r24, 0x02E3
     7e4:	90 91 e4 02 	lds	r25, 0x02E4
     7e8:	a0 91 e5 02 	lds	r26, 0x02E5
     7ec:	b0 91 e6 02 	lds	r27, 0x02E6
     7f0:	8c 59       	subi	r24, 0x9C	; 156
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	af 4f       	sbci	r26, 0xFF	; 255
     7f6:	bf 4f       	sbci	r27, 0xFF	; 255
     7f8:	80 93 e3 02 	sts	0x02E3, r24
     7fc:	90 93 e4 02 	sts	0x02E4, r25
     800:	a0 93 e5 02 	sts	0x02E5, r26
     804:	b0 93 e6 02 	sts	0x02E6, r27
    }




}
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <_Z8afficherPKc>:
	  lcd.clear();
	  lcd.home();
	  lcd.write(chaine);
#endif
#ifdef NOLCD
		Serial.println(chaine);
     80e:	bc 01       	movw	r22, r24
     810:	87 ee       	ldi	r24, 0xE7	; 231
     812:	94 e0       	ldi	r25, 0x04	; 4
     814:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN5Print7printlnEPKc>

00000818 <_Z7reBlinkv>:
#include "states/state_servo_selecter1.h"
#include "states/state_servo_selecter2.h"

sState* reBlink(){
    return &sMenu_principal;
}
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	08 95       	ret

0000081e <_Z8initHardP6sState>:
void initHard(sState *prev){

#ifdef DEBUG
    Serial.println("debut init matÃ©rielles");
     81e:	66 ef       	ldi	r22, 0xF6	; 246
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	87 ee       	ldi	r24, 0xE7	; 231
     824:	94 e0       	ldi	r25, 0x04	; 4
     826:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN5Print7printlnEPKc>
#endif

#ifdef DEBUG
    Serial.println("fin init matÃ©rielles");
     82a:	6e e0       	ldi	r22, 0x0E	; 14
     82c:	72 e0       	ldi	r23, 0x02	; 2
     82e:	87 ee       	ldi	r24, 0xE7	; 231
     830:	94 e0       	ldi	r25, 0x04	; 4
     832:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN5Print7printlnEPKc>

00000836 <_Z15deinitpwm_0_255P6sState>:
	analogWrite(PIN_PWM_SERVO,0);
	char affich[16];
	snprintf(affich,17,"Pos= 0 /255");
	afficher(affich);
}
void deinitpwm_0_255(sState *next){
     836:	08 95       	ret

00000838 <_Z13initpwm_0_255P6sState>:
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_pwm);
	}
    return NULL;
}
void initpwm_0_255(sState *prev){
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	60 97       	sbiw	r28, 0x10	; 16
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
	pinMode(PIN_PWM_SERVO,OUTPUT);
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	8b e0       	ldi	r24, 0x0B	; 11
     850:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     854:	f8 94       	cli
		encoder.position = p;
     856:	10 92 cb 02 	sts	0x02CB, r1
     85a:	10 92 cc 02 	sts	0x02CC, r1
     85e:	10 92 cd 02 	sts	0x02CD, r1
     862:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     866:	78 94       	sei
	myEnc.write(0);
	analogWrite(PIN_PWM_SERVO,0);
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	8b e0       	ldi	r24, 0x0B	; 11
     86e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <analogWrite>
	char affich[16];
	snprintf(affich,17,"Pos= 0 /255");
     872:	64 e2       	ldi	r22, 0x24	; 36
     874:	72 e0       	ldi	r23, 0x02	; 2
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	0e 94 14 18 	call	0x3028	; 0x3028 <strcpy>
	afficher(affich);
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	c5 df       	rcall	.-118    	; 0x80e <_Z8afficherPKc>
     884:	60 96       	adiw	r28, 0x10	; 16
}
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <_Z13testpwm_0_255v>:
#include "state_Menu_pwm.h"
#include "state_pwm_0_255.h"
#include "state_blink.h"


sState* testpwm_0_255(){
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	60 97       	sbiw	r28, 0x10	; 16
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
		memPosition=Position;
	}
*/
	static int memValue=0;
	static long temps_enc=0;
	static int pos_enc_old=myEnc.read();
     8b6:	80 91 f7 02 	lds	r24, 0x02F7
     8ba:	81 11       	cpse	r24, r1
     8bc:	21 c0       	rjmp	.+66     	; 0x900 <__stack+0x1>
     8be:	87 ef       	ldi	r24, 0xF7	; 247
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
     8c6:	89 2b       	or	r24, r25
     8c8:	d9 f0       	breq	.+54     	; 0x900 <__stack+0x1>
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     8ca:	80 91 cf 02 	lds	r24, 0x02CF
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	28 f4       	brcc	.+10     	; 0x8dc <_Z13testpwm_0_255v+0x46>
			noInterrupts();
     8d2:	f8 94       	cli
			update(&encoder);
     8d4:	84 ec       	ldi	r24, 0xC4	; 196
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	2f dc       	rcall	.-1954   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     8da:	01 c0       	rjmp	.+2      	; 0x8de <_Z13testpwm_0_255v+0x48>
     8dc:	f8 94       	cli
		} else {
			noInterrupts();
     8de:	80 91 cb 02 	lds	r24, 0x02CB
		}
		int32_t ret = encoder.position;
     8e2:	90 91 cc 02 	lds	r25, 0x02CC
     8e6:	a0 91 cd 02 	lds	r26, 0x02CD
     8ea:	b0 91 ce 02 	lds	r27, 0x02CE
     8ee:	78 94       	sei
     8f0:	90 93 f6 02 	sts	0x02F6, r25
     8f4:	80 93 f5 02 	sts	0x02F5, r24
     8f8:	87 ef       	ldi	r24, 0xF7	; 247
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
     900:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	28 f4       	brcc	.+10     	; 0x912 <__stack+0x13>
     908:	f8 94       	cli
			noInterrupts();
     90a:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	14 dc       	rcall	.-2008   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
     912:	f8 94       	cli
     914:	60 91 cb 02 	lds	r22, 0x02CB
		} else {
			noInterrupts();
		}
		int32_t ret = encoder.position;
     918:	70 91 cc 02 	lds	r23, 0x02CC
     91c:	80 91 cd 02 	lds	r24, 0x02CD
     920:	90 91 ce 02 	lds	r25, 0x02CE
     924:	78 94       	sei
     926:	22 e0       	ldi	r18, 0x02	; 2
     928:	30 e0       	ldi	r19, 0x00	; 0

	int pos_enc=myEnc.read()/2;
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     932:	89 01       	movw	r16, r18
     934:	37 ff       	sbrs	r19, 7
     936:	0c c0       	rjmp	.+24     	; 0x950 <__stack+0x51>
     938:	f8 94       	cli
     93a:	10 92 cb 02 	sts	0x02CB, r1
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
		encoder.position = p;
     93e:	10 92 cc 02 	sts	0x02CC, r1
     942:	10 92 cd 02 	sts	0x02CD, r1
     946:	10 92 ce 02 	sts	0x02CE, r1
     94a:	78 94       	sei
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	10 e0       	ldi	r17, 0x00	; 0
	if (pos_enc < 0)
	{
		pos_enc=0;
     950:	80 91 f5 02 	lds	r24, 0x02F5
		myEnc.write(0);
	}
	int delta=1;

	if(pos_enc!=pos_enc_old)
     954:	90 91 f6 02 	lds	r25, 0x02F6
     958:	08 17       	cp	r16, r24
     95a:	19 07       	cpc	r17, r25
     95c:	29 f1       	breq	.+74     	; 0x9a8 <__stack+0xa9>
     95e:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
	{
		long deltat=millis()-temps_enc;
     962:	c0 90 f1 02 	lds	r12, 0x02F1
     966:	d0 90 f2 02 	lds	r13, 0x02F2
     96a:	e0 90 f3 02 	lds	r14, 0x02F3
     96e:	f0 90 f4 02 	lds	r15, 0x02F4
     972:	6c 19       	sub	r22, r12
     974:	7d 09       	sbc	r23, r13
     976:	8e 09       	sbc	r24, r14
     978:	9f 09       	sbc	r25, r15
     97a:	64 31       	cpi	r22, 0x14	; 20
     97c:	71 05       	cpc	r23, r1
		if(deltat<DUREE_BIG_STEPS)
     97e:	81 05       	cpc	r24, r1
     980:	91 05       	cpc	r25, r1
     982:	24 f0       	brlt	.+8      	; 0x98c <__stack+0x8d>
     984:	cc 24       	eor	r12, r12
     986:	c3 94       	inc	r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
     988:	d1 2c       	mov	r13, r1
     98a:	03 c0       	rjmp	.+6      	; 0x992 <__stack+0x93>
     98c:	2a e0       	ldi	r18, 0x0A	; 10
     98e:	c2 2e       	mov	r12, r18
	if(pos_enc!=pos_enc_old)
	{
		long deltat=millis()-temps_enc;
		if(deltat<DUREE_BIG_STEPS)
		{
			delta=10;
     990:	d1 2c       	mov	r13, r1
     992:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
		}
		temps_enc=millis();
     996:	60 93 f1 02 	sts	0x02F1, r22
     99a:	70 93 f2 02 	sts	0x02F2, r23
     99e:	80 93 f3 02 	sts	0x02F3, r24
     9a2:	90 93 f4 02 	sts	0x02F4, r25
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <__stack+0xaf>
     9a8:	cc 24       	eor	r12, r12
     9aa:	c3 94       	inc	r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
     9ac:	d1 2c       	mov	r13, r1
     9ae:	80 91 f5 02 	lds	r24, 0x02F5
		{
			delta=10;
		}
		temps_enc=millis();
	}
	int Value = max((memValue+delta*(pos_enc-pos_enc_old)),0);
     9b2:	90 91 f6 02 	lds	r25, 0x02F6
     9b6:	98 01       	movw	r18, r16
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	c2 9e       	mul	r12, r18
     9be:	70 01       	movw	r14, r0
     9c0:	c3 9e       	mul	r12, r19
     9c2:	f0 0c       	add	r15, r0
     9c4:	d2 9e       	mul	r13, r18
     9c6:	f0 0c       	add	r15, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	80 91 ef 02 	lds	r24, 0x02EF
     9ce:	90 91 f0 02 	lds	r25, 0x02F0
     9d2:	e8 0e       	add	r14, r24
     9d4:	f9 1e       	adc	r15, r25
     9d6:	f7 fe       	sbrs	r15, 7
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
     9da:	e1 2c       	mov	r14, r1
     9dc:	f1 2c       	mov	r15, r1
     9de:	3f ef       	ldi	r19, 0xFF	; 255
     9e0:	e3 16       	cp	r14, r19
	Value=min(Value,255);
     9e2:	f1 04       	cpc	r15, r1
     9e4:	21 f0       	breq	.+8      	; 0x9ee <__stack+0xef>
     9e6:	1c f0       	brlt	.+6      	; 0x9ee <__stack+0xef>
     9e8:	ee 24       	eor	r14, r14
     9ea:	ea 94       	dec	r14
     9ec:	f1 2c       	mov	r15, r1
     9ee:	10 93 f6 02 	sts	0x02F6, r17
	pos_enc_old=pos_enc;
     9f2:	00 93 f5 02 	sts	0x02F5, r16
     9f6:	86 e0       	ldi	r24, 0x06	; 6
     9f8:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>

	if(!digitalRead(SELECT))	//nÃ©cessite de valider avant que le servo ne se dÃ©place
     9fc:	89 2b       	or	r24, r25
     9fe:	21 f4       	brne	.+8      	; 0xa08 <__stack+0x109>
     a00:	b7 01       	movw	r22, r14
     a02:	8b e0       	ldi	r24, 0x0B	; 11
	{
		analogWrite(PIN_PWM_SERVO,Value);
     a04:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <analogWrite>
     a08:	80 91 ef 02 	lds	r24, 0x02EF
	}

	if(Value!=memValue)
     a0c:	90 91 f0 02 	lds	r25, 0x02F0
     a10:	e8 16       	cp	r14, r24
     a12:	f9 06       	cpc	r15, r25
     a14:	d9 f0       	breq	.+54     	; 0xa4c <__stack+0x14d>
     a16:	ff 92       	push	r15
     a18:	ef 92       	push	r14
	{
		char affich[16];
		snprintf(affich,17,"Pos= %d /255",Value);
     a1a:	80 e3       	ldi	r24, 0x30	; 48
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	1f 92       	push	r1
     a24:	81 e1       	ldi	r24, 0x11	; 17
     a26:	8f 93       	push	r24
     a28:	8e 01       	movw	r16, r28
     a2a:	0f 5f       	subi	r16, 0xFF	; 255
     a2c:	1f 4f       	sbci	r17, 0xFF	; 255
     a2e:	1f 93       	push	r17
     a30:	0f 93       	push	r16
     a32:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
     a36:	c8 01       	movw	r24, r16
     a38:	ea de       	rcall	.-556    	; 0x80e <_Z8afficherPKc>
		afficher(affich);
     a3a:	f0 92 f0 02 	sts	0x02F0, r15
     a3e:	e0 92 ef 02 	sts	0x02EF, r14
		memValue=Value;
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	87 e0       	ldi	r24, 0x07	; 7
     a4e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
	}

	if(!digitalRead(RETOUR))
     a52:	89 2b       	or	r24, r25
     a54:	61 f4       	brne	.+24     	; 0xa6e <__stack+0x16f>
     a56:	6f e0       	ldi	r22, 0x0F	; 15
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
	{
		delay(DELAY_BOUNCE);	//anti rebond
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
     a68:	89 2b       	or	r24, r25
     a6a:	d9 f3       	breq	.-10     	; 0xa62 <__stack+0x163>
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <__stack+0x175>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x179>
		return(&sMenu_pwm);
	}
    return NULL;
     a74:	8c e0       	ldi	r24, 0x0C	; 12
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	60 96       	adiw	r28, 0x10	; 16

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_pwm);
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
	}
    return NULL;
}
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	08 95       	ret

00000a96 <_Z13deinitpwm_0_5P6sState>:
	analogWrite(PIN_PWM_SERVO,0);
	char affich[16];
	snprintf(affich,17,"Pos= 0,0 V");
	afficher(affich);
}
void deinitpwm_0_5(sState *next){
     a96:	08 95       	ret

00000a98 <_Z11initpwm_0_5P6sState>:
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_pwm);
	}
    return NULL;
}
void initpwm_0_5(sState *prev){
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	60 97       	sbiw	r28, 0x10	; 16
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
	pinMode(PIN_PWM_SERVO,OUTPUT);
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	8b e0       	ldi	r24, 0x0B	; 11
     ab0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
		int32_t ret = encoder.position;
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     ab4:	f8 94       	cli
		encoder.position = p;
     ab6:	10 92 cb 02 	sts	0x02CB, r1
     aba:	10 92 cc 02 	sts	0x02CC, r1
     abe:	10 92 cd 02 	sts	0x02CD, r1
     ac2:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     ac6:	78 94       	sei
	myEnc.write(0);
	analogWrite(PIN_PWM_SERVO,0);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	8b e0       	ldi	r24, 0x0B	; 11
     ace:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <analogWrite>
	char affich[16];
	snprintf(affich,17,"Pos= 0,0 V");
     ad2:	6d e3       	ldi	r22, 0x3D	; 61
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	ce 01       	movw	r24, r28
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	0e 94 14 18 	call	0x3028	; 0x3028 <strcpy>
	afficher(affich);
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	95 de       	rcall	.-726    	; 0x80e <_Z8afficherPKc>
     ae4:	60 96       	adiw	r28, 0x10	; 16
}
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <_Z11testpwm_0_5v>:
#include "state_Menu_pwm.h"
#include "state_pwm_0_5.h"
#include "state_blink.h"


sState* testpwm_0_5(){
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	60 97       	sbiw	r28, 0x10	; 16
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
		afficher(affich);
		memPosition=Position;
	}*/
	static int memValue=0;
	static long temps_enc=0;
	static int pos_enc_old=myEnc.read();
     b16:	80 91 07 03 	lds	r24, 0x0307
     b1a:	81 11       	cpse	r24, r1
     b1c:	21 c0       	rjmp	.+66     	; 0xb60 <_Z11testpwm_0_5v+0x6a>
     b1e:	87 e0       	ldi	r24, 0x07	; 7
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
     b26:	89 2b       	or	r24, r25
     b28:	d9 f0       	breq	.+54     	; 0xb60 <_Z11testpwm_0_5v+0x6a>
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     b2a:	80 91 cf 02 	lds	r24, 0x02CF
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	28 f4       	brcc	.+10     	; 0xb3c <_Z11testpwm_0_5v+0x46>
			noInterrupts();
     b32:	f8 94       	cli
			update(&encoder);
     b34:	84 ec       	ldi	r24, 0xC4	; 196
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	ff da       	rcall	.-2562   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <_Z11testpwm_0_5v+0x48>
     b3c:	f8 94       	cli
		} else {
			noInterrupts();
     b3e:	80 91 cb 02 	lds	r24, 0x02CB
		}
		int32_t ret = encoder.position;
     b42:	90 91 cc 02 	lds	r25, 0x02CC
     b46:	a0 91 cd 02 	lds	r26, 0x02CD
     b4a:	b0 91 ce 02 	lds	r27, 0x02CE
     b4e:	78 94       	sei
     b50:	90 93 06 03 	sts	0x0306, r25
     b54:	80 93 05 03 	sts	0x0305, r24
     b58:	87 e0       	ldi	r24, 0x07	; 7
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
     b60:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	28 f4       	brcc	.+10     	; 0xb72 <_Z11testpwm_0_5v+0x7c>
     b68:	f8 94       	cli
			noInterrupts();
     b6a:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	e4 da       	rcall	.-2616   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <_Z11testpwm_0_5v+0x7e>
     b72:	f8 94       	cli
     b74:	60 91 cb 02 	lds	r22, 0x02CB
		} else {
			noInterrupts();
		}
		int32_t ret = encoder.position;
     b78:	70 91 cc 02 	lds	r23, 0x02CC
     b7c:	80 91 cd 02 	lds	r24, 0x02CD
     b80:	90 91 ce 02 	lds	r25, 0x02CE
     b84:	78 94       	sei
     b86:	22 e0       	ldi	r18, 0x02	; 2
     b88:	30 e0       	ldi	r19, 0x00	; 0

	int pos_enc=myEnc.read()/2;
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     b92:	89 01       	movw	r16, r18
     b94:	37 ff       	sbrs	r19, 7
     b96:	0c c0       	rjmp	.+24     	; 0xbb0 <_Z11testpwm_0_5v+0xba>
     b98:	f8 94       	cli
     b9a:	10 92 cb 02 	sts	0x02CB, r1
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
		encoder.position = p;
     b9e:	10 92 cc 02 	sts	0x02CC, r1
     ba2:	10 92 cd 02 	sts	0x02CD, r1
     ba6:	10 92 ce 02 	sts	0x02CE, r1
     baa:	78 94       	sei
     bac:	00 e0       	ldi	r16, 0x00	; 0
     bae:	10 e0       	ldi	r17, 0x00	; 0
	if (pos_enc < 0)
	{
		pos_enc=0;
     bb0:	80 91 05 03 	lds	r24, 0x0305
		myEnc.write(0);
	}
	int delta=1;

	if(pos_enc!=pos_enc_old)
     bb4:	90 91 06 03 	lds	r25, 0x0306
     bb8:	08 17       	cp	r16, r24
     bba:	19 07       	cpc	r17, r25
     bbc:	29 f1       	breq	.+74     	; 0xc08 <_Z11testpwm_0_5v+0x112>
     bbe:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
	{
		long deltat=millis()-temps_enc;
     bc2:	c0 90 01 03 	lds	r12, 0x0301
     bc6:	d0 90 02 03 	lds	r13, 0x0302
     bca:	e0 90 03 03 	lds	r14, 0x0303
     bce:	f0 90 04 03 	lds	r15, 0x0304
     bd2:	6c 19       	sub	r22, r12
     bd4:	7d 09       	sbc	r23, r13
     bd6:	8e 09       	sbc	r24, r14
     bd8:	9f 09       	sbc	r25, r15
     bda:	64 31       	cpi	r22, 0x14	; 20
     bdc:	71 05       	cpc	r23, r1
		if(deltat<DUREE_BIG_STEPS)
     bde:	81 05       	cpc	r24, r1
     be0:	91 05       	cpc	r25, r1
     be2:	24 f0       	brlt	.+8      	; 0xbec <_Z11testpwm_0_5v+0xf6>
     be4:	cc 24       	eor	r12, r12
     be6:	c3 94       	inc	r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
     be8:	d1 2c       	mov	r13, r1
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <_Z11testpwm_0_5v+0xfc>
     bec:	2a e0       	ldi	r18, 0x0A	; 10
     bee:	c2 2e       	mov	r12, r18
	if(pos_enc!=pos_enc_old)
	{
		long deltat=millis()-temps_enc;
		if(deltat<DUREE_BIG_STEPS)
		{
			delta=10;
     bf0:	d1 2c       	mov	r13, r1
     bf2:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
		}
		temps_enc=millis();
     bf6:	60 93 01 03 	sts	0x0301, r22
     bfa:	70 93 02 03 	sts	0x0302, r23
     bfe:	80 93 03 03 	sts	0x0303, r24
     c02:	90 93 04 03 	sts	0x0304, r25
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <_Z11testpwm_0_5v+0x118>
     c08:	cc 24       	eor	r12, r12
     c0a:	c3 94       	inc	r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
     c0c:	d1 2c       	mov	r13, r1
     c0e:	80 91 05 03 	lds	r24, 0x0305
		{
			delta=10;
		}
		temps_enc=millis();
	}
	int Value = max((memValue+delta*(pos_enc-pos_enc_old)),0);
     c12:	90 91 06 03 	lds	r25, 0x0306
     c16:	98 01       	movw	r18, r16
     c18:	28 1b       	sub	r18, r24
     c1a:	39 0b       	sbc	r19, r25
     c1c:	c2 9e       	mul	r12, r18
     c1e:	70 01       	movw	r14, r0
     c20:	c3 9e       	mul	r12, r19
     c22:	f0 0c       	add	r15, r0
     c24:	d2 9e       	mul	r13, r18
     c26:	f0 0c       	add	r15, r0
     c28:	11 24       	eor	r1, r1
     c2a:	80 91 ff 02 	lds	r24, 0x02FF
     c2e:	90 91 00 03 	lds	r25, 0x0300
     c32:	e8 0e       	add	r14, r24
     c34:	f9 1e       	adc	r15, r25
     c36:	f7 fe       	sbrs	r15, 7
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <_Z11testpwm_0_5v+0x148>
     c3a:	e1 2c       	mov	r14, r1
     c3c:	f1 2c       	mov	r15, r1
     c3e:	33 e3       	ldi	r19, 0x33	; 51
     c40:	e3 16       	cp	r14, r19
	Value=min(Value,50);
     c42:	f1 04       	cpc	r15, r1
     c44:	1c f0       	brlt	.+6      	; 0xc4c <_Z11testpwm_0_5v+0x156>
     c46:	82 e3       	ldi	r24, 0x32	; 50
     c48:	e8 2e       	mov	r14, r24
     c4a:	f1 2c       	mov	r15, r1
     c4c:	10 93 06 03 	sts	0x0306, r17
	pos_enc_old=pos_enc;
     c50:	00 93 05 03 	sts	0x0305, r16
     c54:	86 e0       	ldi	r24, 0x06	; 6
     c56:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>

	if(!digitalRead(SELECT))	//nÃ©cessite de valider avant que le servo ne se dÃ©place
     c5a:	89 2b       	or	r24, r25
     c5c:	69 f4       	brne	.+26     	; 0xc78 <_Z11testpwm_0_5v+0x182>
     c5e:	2f ef       	ldi	r18, 0xFF	; 255
     c60:	2e 9d       	mul	r18, r14
	{
		analogWrite(PIN_PWM_SERVO,Value*255/50);
     c62:	c0 01       	movw	r24, r0
     c64:	2f 9d       	mul	r18, r15
     c66:	90 0d       	add	r25, r0
     c68:	11 24       	eor	r1, r1
     c6a:	62 e3       	ldi	r22, 0x32	; 50
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
     c72:	8b e0       	ldi	r24, 0x0B	; 11
     c74:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <analogWrite>
     c78:	80 91 ff 02 	lds	r24, 0x02FF
	}

	if(Value!=memValue)
     c7c:	90 91 00 03 	lds	r25, 0x0300
     c80:	e8 16       	cp	r14, r24
     c82:	f9 06       	cpc	r15, r25
     c84:	51 f1       	breq	.+84     	; 0xcda <_Z11testpwm_0_5v+0x1e4>
     c86:	c7 01       	movw	r24, r14
     c88:	6a e0       	ldi	r22, 0x0A	; 10
	{
		char affich[16];
		int pe=Value/10;
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
     c90:	26 ef       	ldi	r18, 0xF6	; 246
     c92:	26 03       	mulsu	r18, r22
		int pd=Value-pe*10;
     c94:	c0 01       	movw	r24, r0
     c96:	27 9f       	mul	r18, r23
     c98:	90 0d       	add	r25, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	8e 0d       	add	r24, r14
     c9e:	9f 1d       	adc	r25, r15
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
		snprintf(affich,17,"Pos= %d,%d V",pe,pd);
     ca4:	7f 93       	push	r23
     ca6:	6f 93       	push	r22
     ca8:	88 e4       	ldi	r24, 0x48	; 72
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	1f 92       	push	r1
     cb2:	81 e1       	ldi	r24, 0x11	; 17
     cb4:	8f 93       	push	r24
     cb6:	8e 01       	movw	r16, r28
     cb8:	0f 5f       	subi	r16, 0xFF	; 255
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	1f 93       	push	r17
     cbe:	0f 93       	push	r16
     cc0:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
     cc4:	c8 01       	movw	r24, r16
     cc6:	a3 dd       	rcall	.-1210   	; 0x80e <_Z8afficherPKc>
		afficher(affich);
     cc8:	f0 92 00 03 	sts	0x0300, r15
     ccc:	e0 92 ff 02 	sts	0x02FF, r14
		memValue=Value;
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
	}

	if(!digitalRead(RETOUR))
     ce0:	89 2b       	or	r24, r25
     ce2:	61 f4       	brne	.+24     	; 0xcfc <_Z11testpwm_0_5v+0x206>
     ce4:	6f e0       	ldi	r22, 0x0F	; 15
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
	{
		delay(DELAY_BOUNCE);	//anti rebond
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
     cf6:	89 2b       	or	r24, r25
     cf8:	d9 f3       	breq	.-10     	; 0xcf0 <_Z11testpwm_0_5v+0x1fa>
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <_Z11testpwm_0_5v+0x20c>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <_Z11testpwm_0_5v+0x210>
		return(&sMenu_pwm);
	}
    return NULL;
     d02:	8c e0       	ldi	r24, 0x0C	; 12
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	60 96       	adiw	r28, 0x10	; 16

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_pwm);
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
	}
    return NULL;
}
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	08 95       	ret

00000d24 <_Z12deinitpwm_pcP6sState>:
	analogWrite(PIN_PWM_SERVO,0);
	char affich[16];
	snprintf(affich,17,"Pos= 0 %%");
	afficher(affich);
}
void deinitpwm_pc(sState *next){
     d24:	08 95       	ret

00000d26 <_Z10initpwm_pcP6sState>:
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_pwm);
	}
    return NULL;
}
void initpwm_pc(sState *prev){
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	60 97       	sbiw	r28, 0x10	; 16
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
	pinMode(PIN_PWM_SERVO,OUTPUT);
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	8b e0       	ldi	r24, 0x0B	; 11
     d42:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
		int32_t ret = encoder.position;
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
     d46:	f8 94       	cli
		encoder.position = p;
     d48:	10 92 cb 02 	sts	0x02CB, r1
     d4c:	10 92 cc 02 	sts	0x02CC, r1
     d50:	10 92 cd 02 	sts	0x02CD, r1
     d54:	10 92 ce 02 	sts	0x02CE, r1
		interrupts();
     d58:	78 94       	sei
	myEnc.write(0);
	analogWrite(PIN_PWM_SERVO,0);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	8b e0       	ldi	r24, 0x0B	; 11
     d60:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <analogWrite>
	char affich[16];
	snprintf(affich,17,"Pos= 0 %%");
     d64:	85 e5       	ldi	r24, 0x55	; 85
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	1f 92       	push	r1
     d6e:	81 e1       	ldi	r24, 0x11	; 17
     d70:	8f 93       	push	r24
     d72:	8e 01       	movw	r16, r28
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
	afficher(affich);
     d80:	c8 01       	movw	r24, r16
     d82:	45 dd       	rcall	.-1398   	; 0x80e <_Z8afficherPKc>
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	60 96       	adiw	r28, 0x10	; 16
}
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <_Z10testpwm_pcv>:
#include "state_Menu_pwm.h"
#include "state_pwm_pc.h"
#include "state_blink.h"


sState* testpwm_pc(){
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	60 97       	sbiw	r28, 0x10	; 16
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
		afficher(affich);
		memPosition=Position;
	}*/
	static int memValue=0;
	static long temps_enc=0;
	static int pos_enc_old=myEnc.read();
     dc6:	80 91 17 03 	lds	r24, 0x0317
     dca:	81 11       	cpse	r24, r1
     dcc:	21 c0       	rjmp	.+66     	; 0xe10 <_Z10testpwm_pcv+0x6a>
     dce:	87 e1       	ldi	r24, 0x17	; 23
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
     dd6:	89 2b       	or	r24, r25
     dd8:	d9 f0       	breq	.+54     	; 0xe10 <_Z10testpwm_pcv+0x6a>
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     dda:	80 91 cf 02 	lds	r24, 0x02CF
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	28 f4       	brcc	.+10     	; 0xdec <_Z10testpwm_pcv+0x46>
			noInterrupts();
     de2:	f8 94       	cli
			update(&encoder);
     de4:	84 ec       	ldi	r24, 0xC4	; 196
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	a7 d9       	rcall	.-3250   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     dea:	01 c0       	rjmp	.+2      	; 0xdee <_Z10testpwm_pcv+0x48>
     dec:	f8 94       	cli
		} else {
			noInterrupts();
     dee:	80 91 cb 02 	lds	r24, 0x02CB
		}
		int32_t ret = encoder.position;
     df2:	90 91 cc 02 	lds	r25, 0x02CC
     df6:	a0 91 cd 02 	lds	r26, 0x02CD
     dfa:	b0 91 ce 02 	lds	r27, 0x02CE
     dfe:	78 94       	sei
     e00:	90 93 16 03 	sts	0x0316, r25
     e04:	80 93 15 03 	sts	0x0315, r24
     e08:	87 e1       	ldi	r24, 0x17	; 23
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
     e10:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	28 f4       	brcc	.+10     	; 0xe22 <_Z10testpwm_pcv+0x7c>
     e18:	f8 94       	cli
			noInterrupts();
     e1a:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	8c d9       	rcall	.-3304   	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <_Z10testpwm_pcv+0x7e>
     e22:	f8 94       	cli
     e24:	60 91 cb 02 	lds	r22, 0x02CB
		} else {
			noInterrupts();
		}
		int32_t ret = encoder.position;
     e28:	70 91 cc 02 	lds	r23, 0x02CC
     e2c:	80 91 cd 02 	lds	r24, 0x02CD
     e30:	90 91 ce 02 	lds	r25, 0x02CE
     e34:	78 94       	sei
     e36:	22 e0       	ldi	r18, 0x02	; 2
     e38:	30 e0       	ldi	r19, 0x00	; 0

	int pos_enc=myEnc.read()/2;
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     e42:	89 01       	movw	r16, r18
     e44:	37 ff       	sbrs	r19, 7
     e46:	0c c0       	rjmp	.+24     	; 0xe60 <_Z10testpwm_pcv+0xba>
     e48:	f8 94       	cli
     e4a:	10 92 cb 02 	sts	0x02CB, r1
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
		encoder.position = p;
     e4e:	10 92 cc 02 	sts	0x02CC, r1
     e52:	10 92 cd 02 	sts	0x02CD, r1
     e56:	10 92 ce 02 	sts	0x02CE, r1
     e5a:	78 94       	sei
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	10 e0       	ldi	r17, 0x00	; 0
	if (pos_enc < 0)
	{
		pos_enc=0;
     e60:	80 91 15 03 	lds	r24, 0x0315
		myEnc.write(0);
	}
	int delta=1;

	if(pos_enc!=pos_enc_old)
     e64:	90 91 16 03 	lds	r25, 0x0316
     e68:	08 17       	cp	r16, r24
     e6a:	19 07       	cpc	r17, r25
     e6c:	29 f1       	breq	.+74     	; 0xeb8 <_Z10testpwm_pcv+0x112>
     e6e:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
	{
		long deltat=millis()-temps_enc;
     e72:	c0 90 11 03 	lds	r12, 0x0311
     e76:	d0 90 12 03 	lds	r13, 0x0312
     e7a:	e0 90 13 03 	lds	r14, 0x0313
     e7e:	f0 90 14 03 	lds	r15, 0x0314
     e82:	6c 19       	sub	r22, r12
     e84:	7d 09       	sbc	r23, r13
     e86:	8e 09       	sbc	r24, r14
     e88:	9f 09       	sbc	r25, r15
     e8a:	64 31       	cpi	r22, 0x14	; 20
     e8c:	71 05       	cpc	r23, r1
		if(deltat<DUREE_BIG_STEPS)
     e8e:	81 05       	cpc	r24, r1
     e90:	91 05       	cpc	r25, r1
     e92:	24 f0       	brlt	.+8      	; 0xe9c <_Z10testpwm_pcv+0xf6>
     e94:	cc 24       	eor	r12, r12
     e96:	c3 94       	inc	r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
     e98:	d1 2c       	mov	r13, r1
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <_Z10testpwm_pcv+0xfc>
     e9c:	2a e0       	ldi	r18, 0x0A	; 10
     e9e:	c2 2e       	mov	r12, r18
	if(pos_enc!=pos_enc_old)
	{
		long deltat=millis()-temps_enc;
		if(deltat<DUREE_BIG_STEPS)
		{
			delta=10;
     ea0:	d1 2c       	mov	r13, r1
     ea2:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
		}
		temps_enc=millis();
     ea6:	60 93 11 03 	sts	0x0311, r22
     eaa:	70 93 12 03 	sts	0x0312, r23
     eae:	80 93 13 03 	sts	0x0313, r24
     eb2:	90 93 14 03 	sts	0x0314, r25
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <_Z10testpwm_pcv+0x118>
     eb8:	cc 24       	eor	r12, r12
     eba:	c3 94       	inc	r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
     ebc:	d1 2c       	mov	r13, r1
     ebe:	80 91 15 03 	lds	r24, 0x0315
		{
			delta=10;
		}
		temps_enc=millis();
	}
	int Value = max((memValue+delta*(pos_enc-pos_enc_old)),0);
     ec2:	90 91 16 03 	lds	r25, 0x0316
     ec6:	98 01       	movw	r18, r16
     ec8:	28 1b       	sub	r18, r24
     eca:	39 0b       	sbc	r19, r25
     ecc:	c2 9e       	mul	r12, r18
     ece:	70 01       	movw	r14, r0
     ed0:	c3 9e       	mul	r12, r19
     ed2:	f0 0c       	add	r15, r0
     ed4:	d2 9e       	mul	r13, r18
     ed6:	f0 0c       	add	r15, r0
     ed8:	11 24       	eor	r1, r1
     eda:	80 91 0f 03 	lds	r24, 0x030F
     ede:	90 91 10 03 	lds	r25, 0x0310
     ee2:	e8 0e       	add	r14, r24
     ee4:	f9 1e       	adc	r15, r25
     ee6:	f7 fe       	sbrs	r15, 7
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <_Z10testpwm_pcv+0x148>
     eea:	e1 2c       	mov	r14, r1
     eec:	f1 2c       	mov	r15, r1
     eee:	35 e6       	ldi	r19, 0x65	; 101
     ef0:	e3 16       	cp	r14, r19
	Value=min(Value,100);
     ef2:	f1 04       	cpc	r15, r1
     ef4:	1c f0       	brlt	.+6      	; 0xefc <_Z10testpwm_pcv+0x156>
     ef6:	84 e6       	ldi	r24, 0x64	; 100
     ef8:	e8 2e       	mov	r14, r24
     efa:	f1 2c       	mov	r15, r1
     efc:	10 93 16 03 	sts	0x0316, r17
	pos_enc_old=pos_enc;
     f00:	00 93 15 03 	sts	0x0315, r16
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>

	if(!digitalRead(SELECT))	//nÃ©cessite de valider avant que le servo ne se dÃ©place
     f0a:	89 2b       	or	r24, r25
     f0c:	69 f4       	brne	.+26     	; 0xf28 <_Z10testpwm_pcv+0x182>
     f0e:	2f ef       	ldi	r18, 0xFF	; 255
     f10:	2e 9d       	mul	r18, r14
	{
		analogWrite(PIN_PWM_SERVO,Value*255/100);
     f12:	c0 01       	movw	r24, r0
     f14:	2f 9d       	mul	r18, r15
     f16:	90 0d       	add	r25, r0
     f18:	11 24       	eor	r1, r1
     f1a:	64 e6       	ldi	r22, 0x64	; 100
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
     f22:	8b e0       	ldi	r24, 0x0B	; 11
     f24:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <analogWrite>
     f28:	80 91 0f 03 	lds	r24, 0x030F
	}

	if(Value!=memValue)
     f2c:	90 91 10 03 	lds	r25, 0x0310
     f30:	e8 16       	cp	r14, r24
     f32:	f9 06       	cpc	r15, r25
     f34:	d9 f0       	breq	.+54     	; 0xf6c <_Z10testpwm_pcv+0x1c6>
     f36:	ff 92       	push	r15
     f38:	ef 92       	push	r14
	{
		char affich[16];
		snprintf(affich,17,"Pos= %d %%",Value);
     f3a:	8f e5       	ldi	r24, 0x5F	; 95
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	1f 92       	push	r1
     f44:	81 e1       	ldi	r24, 0x11	; 17
     f46:	8f 93       	push	r24
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5f       	subi	r16, 0xFF	; 255
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	1f 93       	push	r17
     f50:	0f 93       	push	r16
     f52:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
     f56:	c8 01       	movw	r24, r16
     f58:	5a dc       	rcall	.-1868   	; 0x80e <_Z8afficherPKc>
		afficher(affich);
     f5a:	f0 92 10 03 	sts	0x0310, r15
     f5e:	e0 92 0f 03 	sts	0x030F, r14
		memValue=Value;
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	87 e0       	ldi	r24, 0x07	; 7
     f6e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
	}

	if(!digitalRead(RETOUR))
     f72:	89 2b       	or	r24, r25
     f74:	61 f4       	brne	.+24     	; 0xf8e <_Z10testpwm_pcv+0x1e8>
     f76:	6f e0       	ldi	r22, 0x0F	; 15
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
	{
		delay(DELAY_BOUNCE);	//anti rebond
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
     f82:	87 e0       	ldi	r24, 0x07	; 7
     f84:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
     f88:	89 2b       	or	r24, r25
     f8a:	d9 f3       	breq	.-10     	; 0xf82 <_Z10testpwm_pcv+0x1dc>
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <_Z10testpwm_pcv+0x1ee>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <_Z10testpwm_pcv+0x1f2>
		return(&sMenu_pwm);
	}
    return NULL;
     f94:	8c e0       	ldi	r24, 0x0C	; 12
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	60 96       	adiw	r28, 0x10	; 16

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_pwm);
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
	}
    return NULL;
}
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	08 95       	ret

00000fb6 <_Z16initservo_microsP6sState>:
		return(&sMenu_servo);
	}
    return NULL;
}
void initservo_micros(sState *prev){
	servotest.attach(PIN_PWM_SERVO);
     fb6:	6b e0       	ldi	r22, 0x0B	; 11
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	84 ed       	ldi	r24, 0xD4	; 212
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	bf d7       	rcall	.+3966   	; 0x1f3e <_ZN5Servo6attachEi>
     fc0:	84 ed       	ldi	r24, 0xD4	; 212
	int micros=servotest.readMicroseconds();
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 58 10 	call	0x20b0	; 0x20b0 <_ZN5Servo16readMicrosecondsEv>
     fc8:	85 3f       	cpi	r24, 0xF5	; 245
	int value_enc=abs(micros-500)*2/PRECISION_MICROS;
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	92 07       	cpc	r25, r18
     fce:	2c f0       	brlt	.+10     	; 0xfda <_Z16initservo_microsP6sState+0x24>
     fd0:	84 5f       	subi	r24, 0xF4	; 244
     fd2:	91 40       	sbci	r25, 0x01	; 1
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <_Z16initservo_microsP6sState+0x32>
     fda:	24 ef       	ldi	r18, 0xF4	; 244
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	28 1b       	sub	r18, r24
     fe0:	39 0b       	sbc	r19, r25
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	c9 01       	movw	r24, r18
     fe8:	65 e0       	ldi	r22, 0x05	; 5
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
     ff0:	f8 94       	cli
     ff2:	cb 01       	movw	r24, r22
	myEnc.write(value_enc);
     ff4:	aa 27       	eor	r26, r26
     ff6:	97 fd       	sbrc	r25, 7
     ff8:	a0 95       	com	r26
     ffa:	ba 2f       	mov	r27, r26
     ffc:	80 93 cb 02 	sts	0x02CB, r24
    1000:	90 93 cc 02 	sts	0x02CC, r25
    1004:	a0 93 cd 02 	sts	0x02CD, r26
    1008:	b0 93 ce 02 	sts	0x02CE, r27
    100c:	78 94       	sei
		interrupts();
    100e:	08 95       	ret

00001010 <_Z18deinitservo_microsP6sState>:

}
void deinitservo_micros(sState *next){
	servotest.detach();
    1010:	84 ed       	ldi	r24, 0xD4	; 212
    1012:	92 e0       	ldi	r25, 0x02	; 2
    1014:	99 c7       	rjmp	.+3890   	; 0x1f48 <_ZN5Servo6detachEv>

00001016 <_Z16testservo_microsv>:
#include "state_Menu_servo.h"
#include "state_servo_micros.h"
#include "state_blink.h"


sState* testservo_micros(){
    1016:	af 92       	push	r10
    1018:	bf 92       	push	r11
    101a:	cf 92       	push	r12
    101c:	df 92       	push	r13
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	60 97       	sbiw	r28, 0x10	; 16
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
	static int memMicros=500;
	static long temps_enc=0;
	static int pos_enc_old=0;

	int pos_enc=abs(myEnc.read())/2;
    103a:	84 ec       	ldi	r24, 0xC4	; 196
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	be d8       	rcall	.-3716   	; 0x1bc <_ZN7Encoder4readEv>
    1040:	16 16       	cp	r1, r22
    1042:	17 06       	cpc	r1, r23
    1044:	18 06       	cpc	r1, r24
    1046:	19 06       	cpc	r1, r25
    1048:	54 f4       	brge	.+20     	; 0x105e <_Z16testservo_microsv+0x48>
    104a:	84 ec       	ldi	r24, 0xC4	; 196
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	b6 d8       	rcall	.-3732   	; 0x1bc <_ZN7Encoder4readEv>
    1050:	22 e0       	ldi	r18, 0x02	; 2
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    105c:	10 c0       	rjmp	.+32     	; 0x107e <_Z16testservo_microsv+0x68>
    105e:	84 ec       	ldi	r24, 0xC4	; 196
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	ac d8       	rcall	.-3752   	; 0x1bc <_ZN7Encoder4readEv>
    1064:	22 e0       	ldi	r18, 0x02	; 2
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    1070:	50 95       	com	r21
    1072:	40 95       	com	r20
    1074:	30 95       	com	r19
    1076:	21 95       	neg	r18
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	4f 4f       	sbci	r20, 0xFF	; 255
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	59 01       	movw	r10, r18
    1080:	80 91 23 03 	lds	r24, 0x0323
    1084:	90 91 24 03 	lds	r25, 0x0324
	int delta=PRECISION_MICROS;

	if(pos_enc!=pos_enc_old)
    1088:	28 17       	cp	r18, r24
    108a:	39 07       	cpc	r19, r25
    108c:	19 f1       	breq	.+70     	; 0x10d4 <_Z16testservo_microsv+0xbe>
    108e:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
    1092:	c0 90 1f 03 	lds	r12, 0x031F
	{
		long deltat=millis()-temps_enc;
    1096:	d0 90 20 03 	lds	r13, 0x0320
    109a:	e0 90 21 03 	lds	r14, 0x0321
    109e:	f0 90 22 03 	lds	r15, 0x0322
    10a2:	6c 19       	sub	r22, r12
    10a4:	7d 09       	sbc	r23, r13
    10a6:	8e 09       	sbc	r24, r14
    10a8:	9f 09       	sbc	r25, r15
    10aa:	64 31       	cpi	r22, 0x14	; 20
    10ac:	71 05       	cpc	r23, r1
    10ae:	81 05       	cpc	r24, r1
		if(deltat<DUREE_BIG_STEPS)
    10b0:	91 05       	cpc	r25, r1
    10b2:	1c f0       	brlt	.+6      	; 0x10ba <_Z16testservo_microsv+0xa4>
    10b4:	05 e0       	ldi	r16, 0x05	; 5
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <_Z16testservo_microsv+0xa8>
	static int memMicros=500;
	static long temps_enc=0;
	static int pos_enc_old=0;

	int pos_enc=abs(myEnc.read())/2;
	int delta=PRECISION_MICROS;
    10ba:	02 e3       	ldi	r16, 0x32	; 50
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
	if(pos_enc!=pos_enc_old)
	{
		long deltat=millis()-temps_enc;
		if(deltat<DUREE_BIG_STEPS)
		{
			delta=10*PRECISION_MICROS;
    10c2:	60 93 1f 03 	sts	0x031F, r22
		}
		temps_enc=millis();
    10c6:	70 93 20 03 	sts	0x0320, r23
    10ca:	80 93 21 03 	sts	0x0321, r24
    10ce:	90 93 22 03 	sts	0x0322, r25
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <_Z16testservo_microsv+0xc2>
    10d4:	05 e0       	ldi	r16, 0x05	; 5
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	80 91 46 01 	lds	r24, 0x0146
	static int memMicros=500;
	static long temps_enc=0;
	static int pos_enc_old=0;

	int pos_enc=abs(myEnc.read())/2;
	int delta=PRECISION_MICROS;
    10dc:	90 91 47 01 	lds	r25, 0x0147
		{
			delta=10*PRECISION_MICROS;
		}
		temps_enc=millis();
	}
	int Micros = max((memMicros-500+delta*(pos_enc-pos_enc_old))%3000+500,500);
    10e0:	84 5f       	subi	r24, 0xF4	; 244
    10e2:	91 40       	sbci	r25, 0x01	; 1
    10e4:	40 91 23 03 	lds	r20, 0x0323
    10e8:	50 91 24 03 	lds	r21, 0x0324
    10ec:	b5 01       	movw	r22, r10
    10ee:	64 1b       	sub	r22, r20
    10f0:	75 0b       	sbc	r23, r21
    10f2:	06 9f       	mul	r16, r22
    10f4:	a0 01       	movw	r20, r0
    10f6:	07 9f       	mul	r16, r23
    10f8:	50 0d       	add	r21, r0
    10fa:	16 9f       	mul	r17, r22
    10fc:	50 0d       	add	r21, r0
    10fe:	11 24       	eor	r1, r1
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	68 eb       	ldi	r22, 0xB8	; 184
    1106:	7b e0       	ldi	r23, 0x0B	; 11
    1108:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
    110c:	18 16       	cp	r1, r24
    110e:	19 06       	cpc	r1, r25
    1110:	24 f4       	brge	.+8      	; 0x111a <_Z16testservo_microsv+0x104>
    1112:	8c 01       	movw	r16, r24
    1114:	0c 50       	subi	r16, 0x0C	; 12
    1116:	1e 4f       	sbci	r17, 0xFE	; 254
    1118:	02 c0       	rjmp	.+4      	; 0x111e <_Z16testservo_microsv+0x108>
    111a:	04 ef       	ldi	r16, 0xF4	; 244
    111c:	11 e0       	ldi	r17, 0x01	; 1
    111e:	09 3b       	cpi	r16, 0xB9	; 185
    1120:	8b e0       	ldi	r24, 0x0B	; 11
    1122:	18 07       	cpc	r17, r24
	Micros=min(Micros,3000);
    1124:	14 f0       	brlt	.+4      	; 0x112a <_Z16testservo_microsv+0x114>
    1126:	08 eb       	ldi	r16, 0xB8	; 184
    1128:	1b e0       	ldi	r17, 0x0B	; 11
    112a:	b0 92 24 03 	sts	0x0324, r11
    112e:	a0 92 23 03 	sts	0x0323, r10
	pos_enc_old=pos_enc;
    1132:	b8 01       	movw	r22, r16
    1134:	84 ed       	ldi	r24, 0xD4	; 212
    1136:	92 e0       	ldi	r25, 0x02	; 2
	servotest.writeMicroseconds(Micros);
    1138:	15 d7       	rcall	.+3626   	; 0x1f64 <_ZN5Servo17writeMicrosecondsEi>
    113a:	80 91 46 01 	lds	r24, 0x0146
    113e:	90 91 47 01 	lds	r25, 0x0147

	if(Micros!=memMicros)
    1142:	08 17       	cp	r16, r24
    1144:	19 07       	cpc	r17, r25
    1146:	d9 f0       	breq	.+54     	; 0x117e <_Z16testservo_microsv+0x168>
    1148:	1f 93       	push	r17
    114a:	0f 93       	push	r16
    114c:	8a e6       	ldi	r24, 0x6A	; 106
    114e:	92 e0       	ldi	r25, 0x02	; 2
	{
		char affich[16];
		snprintf(affich,17,"delay= %dus",Micros);
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	1f 92       	push	r1
    1156:	81 e1       	ldi	r24, 0x11	; 17
    1158:	8f 93       	push	r24
    115a:	ce 01       	movw	r24, r28
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	7c 01       	movw	r14, r24
    1160:	ff 92       	push	r15
    1162:	8f 93       	push	r24
    1164:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    1168:	c7 01       	movw	r24, r14
    116a:	51 db       	rcall	.-2398   	; 0x80e <_Z8afficherPKc>
    116c:	10 93 47 01 	sts	0x0147, r17
		afficher(affich);
    1170:	00 93 46 01 	sts	0x0146, r16
    1174:	0f b6       	in	r0, 0x3f	; 63
		memMicros=Micros;
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	87 e0       	ldi	r24, 0x07	; 7
    1180:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
    1184:	89 2b       	or	r24, r25
    1186:	61 f4       	brne	.+24     	; 0x11a0 <_Z16testservo_microsv+0x18a>
	}

	if(!digitalRead(RETOUR))
    1188:	6f e0       	ldi	r22, 0x0F	; 15
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
	{
		delay(DELAY_BOUNCE);	//anti rebond
    1194:	87 e0       	ldi	r24, 0x07	; 7
    1196:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
    119a:	89 2b       	or	r24, r25
    119c:	d9 f3       	breq	.-10     	; 0x1194 <_Z16testservo_microsv+0x17e>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <_Z16testservo_microsv+0x190>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <_Z16testservo_microsv+0x194>
    11a6:	84 e1       	ldi	r24, 0x14	; 20
    11a8:	91 e0       	ldi	r25, 0x01	; 1
		return(&sMenu_servo);
	}
    return NULL;
    11aa:	60 96       	adiw	r28, 0x10	; 16
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_servo);
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
	}
    return NULL;
}
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	08 95       	ret

000011cc <_Z19initservo_selecter1P6sState>:
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_servo);
	}
    return NULL;
}
void initservo_selecter1(sState *prev){
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	60 97       	sbiw	r28, 0x10	; 16
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
	servotest.attach(PIN_PWM_SERVO);
    11e4:	6b e0       	ldi	r22, 0x0B	; 11
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	84 ed       	ldi	r24, 0xD4	; 212
    11ea:	92 e0       	ldi	r25, 0x02	; 2
    11ec:	a8 d6       	rcall	.+3408   	; 0x1f3e <_ZN5Servo6attachEi>
    11ee:	84 ed       	ldi	r24, 0xD4	; 212
	int angle=servotest.read();
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	7b d7       	rcall	.+3830   	; 0x20ea <_ZN5Servo4readEv>
    11f4:	8c 01       	movw	r16, r24
    11f6:	f8 94       	cli
    11f8:	bc 01       	movw	r22, r24
    11fa:	88 27       	eor	r24, r24
	int value_enc=angle*2.0/5.0;
    11fc:	77 fd       	sbrc	r23, 7
    11fe:	80 95       	com	r24
    1200:	98 2f       	mov	r25, r24
    1202:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__floatsisf>
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__addsf3>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 ea       	ldi	r20, 0xA0	; 160
    1214:	50 e4       	ldi	r21, 0x40	; 64
    1216:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__divsf3>
    121a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__fixsfsi>
    121e:	cb 01       	movw	r24, r22
    1220:	aa 27       	eor	r26, r26
	myEnc.write(value_enc);
    1222:	97 fd       	sbrc	r25, 7
    1224:	a0 95       	com	r26
    1226:	ba 2f       	mov	r27, r26
    1228:	80 93 cb 02 	sts	0x02CB, r24
    122c:	90 93 cc 02 	sts	0x02CC, r25
    1230:	a0 93 cd 02 	sts	0x02CD, r26
    1234:	b0 93 ce 02 	sts	0x02CE, r27
    1238:	78 94       	sei
    123a:	1f 93       	push	r17
    123c:	0f 93       	push	r16
	char affich[16];
	snprintf(affich,17,"Angle = %d",angle);
    123e:	86 e7       	ldi	r24, 0x76	; 118
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	1f 92       	push	r1
    1248:	81 e1       	ldi	r24, 0x11	; 17
    124a:	8f 93       	push	r24
    124c:	8e 01       	movw	r16, r28
    124e:	0f 5f       	subi	r16, 0xFF	; 255
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	1f 93       	push	r17
    1254:	0f 93       	push	r16
    1256:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    125a:	c8 01       	movw	r24, r16
    125c:	d8 da       	rcall	.-2640   	; 0x80e <_Z8afficherPKc>
	afficher(affich);
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	60 96       	adiw	r28, 0x10	; 16
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
}
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <_Z21deinitservo_selecter1P6sState>:
void deinitservo_selecter1(sState *next){
	servotest.detach();
    127e:	84 ed       	ldi	r24, 0xD4	; 212
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	62 c6       	rjmp	.+3268   	; 0x1f48 <_ZN5Servo6detachEv>

00001284 <_Z19testservo_selecter1v>:
#include "state_Menu_servo.h"
#include "state_servo_selecter1.h"
#include "state_blink.h"


sState* testservo_selecter1(){
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	60 97       	sbiw	r28, 0x10	; 16
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
	static int memAngle=servotest.read();
    12a4:	80 91 35 03 	lds	r24, 0x0335
    12a8:	81 11       	cpse	r24, r1
    12aa:	11 c0       	rjmp	.+34     	; 0x12ce <_Z19testservo_selecter1v+0x4a>
    12ac:	85 e3       	ldi	r24, 0x35	; 53
    12ae:	93 e0       	ldi	r25, 0x03	; 3
    12b0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
    12b4:	89 2b       	or	r24, r25
    12b6:	59 f0       	breq	.+22     	; 0x12ce <_Z19testservo_selecter1v+0x4a>
    12b8:	84 ed       	ldi	r24, 0xD4	; 212
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	16 d7       	rcall	.+3628   	; 0x20ea <_ZN5Servo4readEv>
    12be:	90 93 2c 03 	sts	0x032C, r25
    12c2:	80 93 2b 03 	sts	0x032B, r24
    12c6:	85 e3       	ldi	r24, 0x35	; 53
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
    12ce:	80 91 2d 03 	lds	r24, 0x032D
	static long temps_enc=0;
	static int pos_enc_old=myEnc.read();
    12d2:	81 11       	cpse	r24, r1
    12d4:	22 c0       	rjmp	.+68     	; 0x131a <_Z19testservo_selecter1v+0x96>
    12d6:	8d e2       	ldi	r24, 0x2D	; 45
    12d8:	93 e0       	ldi	r25, 0x03	; 3
    12da:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
    12de:	89 2b       	or	r24, r25
    12e0:	e1 f0       	breq	.+56     	; 0x131a <_Z19testservo_selecter1v+0x96>
    12e2:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	30 f4       	brcc	.+12     	; 0x12f6 <_Z19testservo_selecter1v+0x72>
    12ea:	f8 94       	cli
			noInterrupts();
    12ec:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <_Z19testservo_selecter1v+0x74>
    12f6:	f8 94       	cli
		} else {
			noInterrupts();
    12f8:	80 91 cb 02 	lds	r24, 0x02CB
		}
		int32_t ret = encoder.position;
    12fc:	90 91 cc 02 	lds	r25, 0x02CC
    1300:	a0 91 cd 02 	lds	r26, 0x02CD
    1304:	b0 91 ce 02 	lds	r27, 0x02CE
    1308:	78 94       	sei
    130a:	90 93 2a 03 	sts	0x032A, r25
    130e:	80 93 29 03 	sts	0x0329, r24
    1312:	8d e2       	ldi	r24, 0x2D	; 45
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
    131a:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	30 f4       	brcc	.+12     	; 0x132e <_Z19testservo_selecter1v+0xaa>
    1322:	f8 94       	cli
			noInterrupts();
    1324:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <_Z19testservo_selecter1v+0xac>
    132e:	f8 94       	cli
		} else {
			noInterrupts();
    1330:	60 91 cb 02 	lds	r22, 0x02CB
		}
		int32_t ret = encoder.position;
    1334:	70 91 cc 02 	lds	r23, 0x02CC
    1338:	80 91 cd 02 	lds	r24, 0x02CD
    133c:	90 91 ce 02 	lds	r25, 0x02CE
    1340:	78 94       	sei
    1342:	22 e0       	ldi	r18, 0x02	; 2

	int pos_enc=myEnc.read()/2;
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    134e:	89 01       	movw	r16, r18
    1350:	37 ff       	sbrs	r19, 7
	if (pos_enc < 0)
    1352:	0c c0       	rjmp	.+24     	; 0x136c <_Z19testservo_selecter1v+0xe8>
    1354:	f8 94       	cli
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
    1356:	10 92 cb 02 	sts	0x02CB, r1
		encoder.position = p;
    135a:	10 92 cc 02 	sts	0x02CC, r1
    135e:	10 92 cd 02 	sts	0x02CD, r1
    1362:	10 92 ce 02 	sts	0x02CE, r1
    1366:	78 94       	sei
    1368:	00 e0       	ldi	r16, 0x00	; 0
	{
		pos_enc=0;
    136a:	10 e0       	ldi	r17, 0x00	; 0
    136c:	80 91 29 03 	lds	r24, 0x0329
		myEnc.write(0);
	}
	int delta=1;

	if(pos_enc!=pos_enc_old)
    1370:	90 91 2a 03 	lds	r25, 0x032A
    1374:	08 17       	cp	r16, r24
    1376:	19 07       	cpc	r17, r25
    1378:	29 f1       	breq	.+74     	; 0x13c4 <_Z19testservo_selecter1v+0x140>
    137a:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
	{
		long deltat=millis()-temps_enc;
    137e:	c0 90 25 03 	lds	r12, 0x0325
    1382:	d0 90 26 03 	lds	r13, 0x0326
    1386:	e0 90 27 03 	lds	r14, 0x0327
    138a:	f0 90 28 03 	lds	r15, 0x0328
    138e:	6c 19       	sub	r22, r12
    1390:	7d 09       	sbc	r23, r13
    1392:	8e 09       	sbc	r24, r14
    1394:	9f 09       	sbc	r25, r15
    1396:	64 31       	cpi	r22, 0x14	; 20
		if(deltat<DUREE_BIG_STEPS)
    1398:	71 05       	cpc	r23, r1
    139a:	81 05       	cpc	r24, r1
    139c:	91 05       	cpc	r25, r1
    139e:	24 f0       	brlt	.+8      	; 0x13a8 <_Z19testservo_selecter1v+0x124>
    13a0:	cc 24       	eor	r12, r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
    13a2:	c3 94       	inc	r12
    13a4:	d1 2c       	mov	r13, r1
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <_Z19testservo_selecter1v+0x12a>
    13a8:	2a e0       	ldi	r18, 0x0A	; 10
	if(pos_enc!=pos_enc_old)
	{
		long deltat=millis()-temps_enc;
		if(deltat<DUREE_BIG_STEPS)
		{
			delta=10;
    13aa:	c2 2e       	mov	r12, r18
    13ac:	d1 2c       	mov	r13, r1
    13ae:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
		}
		temps_enc=millis();
    13b2:	60 93 25 03 	sts	0x0325, r22
    13b6:	70 93 26 03 	sts	0x0326, r23
    13ba:	80 93 27 03 	sts	0x0327, r24
    13be:	90 93 28 03 	sts	0x0328, r25
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <_Z19testservo_selecter1v+0x146>
    13c4:	cc 24       	eor	r12, r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
    13c6:	c3 94       	inc	r12
    13c8:	d1 2c       	mov	r13, r1
    13ca:	80 91 29 03 	lds	r24, 0x0329
		{
			delta=10;
		}
		temps_enc=millis();
	}
	int Angle = max((memAngle+delta*(pos_enc-pos_enc_old)),0);
    13ce:	90 91 2a 03 	lds	r25, 0x032A
    13d2:	98 01       	movw	r18, r16
    13d4:	28 1b       	sub	r18, r24
    13d6:	39 0b       	sbc	r19, r25
    13d8:	c2 9e       	mul	r12, r18
    13da:	70 01       	movw	r14, r0
    13dc:	c3 9e       	mul	r12, r19
    13de:	f0 0c       	add	r15, r0
    13e0:	d2 9e       	mul	r13, r18
    13e2:	f0 0c       	add	r15, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	80 91 2b 03 	lds	r24, 0x032B
    13ea:	90 91 2c 03 	lds	r25, 0x032C
    13ee:	e8 0e       	add	r14, r24
    13f0:	f9 1e       	adc	r15, r25
    13f2:	f7 fe       	sbrs	r15, 7
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <_Z19testservo_selecter1v+0x176>
    13f6:	e1 2c       	mov	r14, r1
    13f8:	f1 2c       	mov	r15, r1
    13fa:	35 eb       	ldi	r19, 0xB5	; 181
	Angle=min(Angle,180);
    13fc:	e3 16       	cp	r14, r19
    13fe:	f1 04       	cpc	r15, r1
    1400:	1c f0       	brlt	.+6      	; 0x1408 <_Z19testservo_selecter1v+0x184>
    1402:	84 eb       	ldi	r24, 0xB4	; 180
    1404:	e8 2e       	mov	r14, r24
    1406:	f1 2c       	mov	r15, r1
    1408:	10 93 2a 03 	sts	0x032A, r17
	pos_enc_old=pos_enc;
    140c:	00 93 29 03 	sts	0x0329, r16
    1410:	86 e0       	ldi	r24, 0x06	; 6

	if(!digitalRead(SELECT))	//nÃ©cessite de valider avant que le servo ne se dÃ©place
    1412:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
    1416:	89 2b       	or	r24, r25
    1418:	21 f4       	brne	.+8      	; 0x1422 <_Z19testservo_selecter1v+0x19e>
    141a:	b7 01       	movw	r22, r14
	{
		servotest.write(Angle);
    141c:	84 ed       	ldi	r24, 0xD4	; 212
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	e4 d5       	rcall	.+3016   	; 0x1fea <_ZN5Servo5writeEi>
    1422:	80 91 2b 03 	lds	r24, 0x032B
	}

	if(Angle!=memAngle)
    1426:	90 91 2c 03 	lds	r25, 0x032C
    142a:	e8 16       	cp	r14, r24
    142c:	f9 06       	cpc	r15, r25
    142e:	d9 f0       	breq	.+54     	; 0x1466 <_Z19testservo_selecter1v+0x1e2>
    1430:	ff 92       	push	r15
    1432:	ef 92       	push	r14
	{
		char affich[16];
		//int serv=servotest.read();
		//snprintf(affich,17,"Angle= %d %d",Angle,serv);
		snprintf(affich,17,"Angle= %d",Angle);
    1434:	81 e8       	ldi	r24, 0x81	; 129
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	1f 92       	push	r1
    143e:	81 e1       	ldi	r24, 0x11	; 17
    1440:	8f 93       	push	r24
    1442:	8e 01       	movw	r16, r28
    1444:	0f 5f       	subi	r16, 0xFF	; 255
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	1f 93       	push	r17
    144a:	0f 93       	push	r16
    144c:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    1450:	c8 01       	movw	r24, r16
    1452:	dd d9       	rcall	.-3142   	; 0x80e <_Z8afficherPKc>
		afficher(affich);
    1454:	f0 92 2c 03 	sts	0x032C, r15
    1458:	e0 92 2b 03 	sts	0x032B, r14
		memAngle=Angle;
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	87 e0       	ldi	r24, 0x07	; 7
    1468:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
	}


	if(!digitalRead(RETOUR))
    146c:	89 2b       	or	r24, r25
    146e:	61 f4       	brne	.+24     	; 0x1488 <_Z19testservo_selecter1v+0x204>
    1470:	6f e0       	ldi	r22, 0x0F	; 15
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	80 e0       	ldi	r24, 0x00	; 0
	{
		delay(DELAY_BOUNCE);	//anti rebond
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
    147c:	87 e0       	ldi	r24, 0x07	; 7
    147e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
    1482:	89 2b       	or	r24, r25
    1484:	d9 f3       	breq	.-10     	; 0x147c <_Z19testservo_selecter1v+0x1f8>
    1486:	03 c0       	rjmp	.+6      	; 0x148e <_Z19testservo_selecter1v+0x20a>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <_Z19testservo_selecter1v+0x20e>
		return(&sMenu_servo);
	}
    return NULL;
    148e:	84 e1       	ldi	r24, 0x14	; 20
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	60 96       	adiw	r28, 0x10	; 16

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_servo);
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
	}
    return NULL;
}
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	08 95       	ret

000014b0 <_Z19initservo_selecter2P6sState>:
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_servo);
	}
    return NULL;
}
void initservo_selecter2(sState *prev){
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	60 97       	sbiw	r28, 0x10	; 16
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
	servotest.attach(PIN_PWM_SERVO);
    14c8:	6b e0       	ldi	r22, 0x0B	; 11
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	84 ed       	ldi	r24, 0xD4	; 212
    14ce:	92 e0       	ldi	r25, 0x02	; 2
    14d0:	36 d5       	rcall	.+2668   	; 0x1f3e <_ZN5Servo6attachEi>
    14d2:	84 ed       	ldi	r24, 0xD4	; 212
	int angle=servotest.read();
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	09 d6       	rcall	.+3090   	; 0x20ea <_ZN5Servo4readEv>
    14d8:	8c 01       	movw	r16, r24
    14da:	f8 94       	cli
    14dc:	bc 01       	movw	r22, r24
    14de:	88 27       	eor	r24, r24
	int value_enc=angle*2.0/5.0;
    14e0:	77 fd       	sbrc	r23, 7
    14e2:	80 95       	com	r24
    14e4:	98 2f       	mov	r25, r24
    14e6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__floatsisf>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__addsf3>
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 ea       	ldi	r20, 0xA0	; 160
    14f8:	50 e4       	ldi	r21, 0x40	; 64
    14fa:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__divsf3>
    14fe:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__fixsfsi>
    1502:	cb 01       	movw	r24, r22
    1504:	aa 27       	eor	r26, r26
	myEnc.write(value_enc);
    1506:	97 fd       	sbrc	r25, 7
    1508:	a0 95       	com	r26
    150a:	ba 2f       	mov	r27, r26
    150c:	80 93 cb 02 	sts	0x02CB, r24
    1510:	90 93 cc 02 	sts	0x02CC, r25
    1514:	a0 93 cd 02 	sts	0x02CD, r26
    1518:	b0 93 ce 02 	sts	0x02CE, r27
    151c:	78 94       	sei
    151e:	1f 93       	push	r17
    1520:	0f 93       	push	r16
	char affich[16];
	snprintf(affich,17,"Angle = %d",angle);
    1522:	86 e7       	ldi	r24, 0x76	; 118
    1524:	92 e0       	ldi	r25, 0x02	; 2
    1526:	9f 93       	push	r25
    1528:	8f 93       	push	r24
    152a:	1f 92       	push	r1
    152c:	81 e1       	ldi	r24, 0x11	; 17
    152e:	8f 93       	push	r24
    1530:	8e 01       	movw	r16, r28
    1532:	0f 5f       	subi	r16, 0xFF	; 255
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	1f 93       	push	r17
    1538:	0f 93       	push	r16
    153a:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    153e:	c8 01       	movw	r24, r16
    1540:	66 d9       	rcall	.-3380   	; 0x80e <_Z8afficherPKc>
	afficher(affich);
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	60 96       	adiw	r28, 0x10	; 16
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
}
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <_Z21deinitservo_selecter2P6sState>:
void deinitservo_selecter2(sState *next){
	servotest.detach();
    1562:	84 ed       	ldi	r24, 0xD4	; 212
    1564:	92 e0       	ldi	r25, 0x02	; 2
    1566:	f0 c4       	rjmp	.+2528   	; 0x1f48 <_ZN5Servo6detachEv>

00001568 <_Z19testservo_selecter2v>:
#include "state_Menu_servo.h"
#include "state_servo_selecter2.h"
#include "state_blink.h"


sState* testservo_selecter2(){
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	60 97       	sbiw	r28, 0x10	; 16
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
	static int memAngle=servotest.read();
    1588:	80 91 4d 03 	lds	r24, 0x034D
    158c:	81 11       	cpse	r24, r1
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <_Z19testservo_selecter2v+0x4a>
    1590:	8d e4       	ldi	r24, 0x4D	; 77
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
    1598:	89 2b       	or	r24, r25
    159a:	59 f0       	breq	.+22     	; 0x15b2 <_Z19testservo_selecter2v+0x4a>
    159c:	84 ed       	ldi	r24, 0xD4	; 212
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	a4 d5       	rcall	.+2888   	; 0x20ea <_ZN5Servo4readEv>
    15a2:	90 93 44 03 	sts	0x0344, r25
    15a6:	80 93 43 03 	sts	0x0343, r24
    15aa:	8d e4       	ldi	r24, 0x4D	; 77
    15ac:	93 e0       	ldi	r25, 0x03	; 3
    15ae:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
    15b2:	80 91 45 03 	lds	r24, 0x0345
	static long temps_enc=0;
	static int pos_enc_old=myEnc.read();
    15b6:	81 11       	cpse	r24, r1
    15b8:	22 c0       	rjmp	.+68     	; 0x15fe <_Z19testservo_selecter2v+0x96>
    15ba:	85 e4       	ldi	r24, 0x45	; 69
    15bc:	93 e0       	ldi	r25, 0x03	; 3
    15be:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cxa_guard_acquire>
    15c2:	89 2b       	or	r24, r25
    15c4:	e1 f0       	breq	.+56     	; 0x15fe <_Z19testservo_selecter2v+0x96>
    15c6:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	30 f4       	brcc	.+12     	; 0x15da <_Z19testservo_selecter2v+0x72>
    15ce:	f8 94       	cli
			noInterrupts();
    15d0:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
    15d2:	92 e0       	ldi	r25, 0x02	; 2
    15d4:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <_Z19testservo_selecter2v+0x74>
    15da:	f8 94       	cli
		} else {
			noInterrupts();
    15dc:	80 91 cb 02 	lds	r24, 0x02CB
		}
		int32_t ret = encoder.position;
    15e0:	90 91 cc 02 	lds	r25, 0x02CC
    15e4:	a0 91 cd 02 	lds	r26, 0x02CD
    15e8:	b0 91 ce 02 	lds	r27, 0x02CE
    15ec:	78 94       	sei
    15ee:	90 93 42 03 	sts	0x0342, r25
    15f2:	80 93 41 03 	sts	0x0341, r24
    15f6:	85 e4       	ldi	r24, 0x45	; 69
    15f8:	93 e0       	ldi	r25, 0x03	; 3
    15fa:	0e 94 66 13 	call	0x26cc	; 0x26cc <__cxa_guard_release>
    15fe:	80 91 cf 02 	lds	r24, 0x02CF
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	30 f4       	brcc	.+12     	; 0x1612 <_Z19testservo_selecter2v+0xaa>
    1606:	f8 94       	cli
			noInterrupts();
    1608:	84 ec       	ldi	r24, 0xC4	; 196
			update(&encoder);
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Encoder6updateEP24Encoder_internal_state_t>
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <_Z19testservo_selecter2v+0xac>
    1612:	f8 94       	cli
		} else {
			noInterrupts();
    1614:	60 91 cb 02 	lds	r22, 0x02CB
		}
		int32_t ret = encoder.position;
    1618:	70 91 cc 02 	lds	r23, 0x02CC
    161c:	80 91 cd 02 	lds	r24, 0x02CD
    1620:	90 91 ce 02 	lds	r25, 0x02CE
    1624:	78 94       	sei
    1626:	22 e0       	ldi	r18, 0x02	; 2

	int pos_enc=myEnc.read()/2;
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    1632:	89 01       	movw	r16, r18
    1634:	37 ff       	sbrs	r19, 7
	if (pos_enc < 0)
    1636:	0c c0       	rjmp	.+24     	; 0x1650 <_Z19testservo_selecter2v+0xe8>
    1638:	f8 94       	cli
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
    163a:	10 92 cb 02 	sts	0x02CB, r1
		encoder.position = p;
    163e:	10 92 cc 02 	sts	0x02CC, r1
    1642:	10 92 cd 02 	sts	0x02CD, r1
    1646:	10 92 ce 02 	sts	0x02CE, r1
    164a:	78 94       	sei
    164c:	00 e0       	ldi	r16, 0x00	; 0
	{
		pos_enc=0;
    164e:	10 e0       	ldi	r17, 0x00	; 0
    1650:	80 91 41 03 	lds	r24, 0x0341
		myEnc.write(0);
	}
	int delta=1;

	if(pos_enc!=pos_enc_old)
    1654:	90 91 42 03 	lds	r25, 0x0342
    1658:	08 17       	cp	r16, r24
    165a:	19 07       	cpc	r17, r25
    165c:	29 f1       	breq	.+74     	; 0x16a8 <_Z19testservo_selecter2v+0x140>
    165e:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
	{
		long deltat=millis()-temps_enc;
    1662:	c0 90 3d 03 	lds	r12, 0x033D
    1666:	d0 90 3e 03 	lds	r13, 0x033E
    166a:	e0 90 3f 03 	lds	r14, 0x033F
    166e:	f0 90 40 03 	lds	r15, 0x0340
    1672:	6c 19       	sub	r22, r12
    1674:	7d 09       	sbc	r23, r13
    1676:	8e 09       	sbc	r24, r14
    1678:	9f 09       	sbc	r25, r15
    167a:	64 31       	cpi	r22, 0x14	; 20
		if(deltat<DUREE_BIG_STEPS)
    167c:	71 05       	cpc	r23, r1
    167e:	81 05       	cpc	r24, r1
    1680:	91 05       	cpc	r25, r1
    1682:	24 f0       	brlt	.+8      	; 0x168c <_Z19testservo_selecter2v+0x124>
    1684:	cc 24       	eor	r12, r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
    1686:	c3 94       	inc	r12
    1688:	d1 2c       	mov	r13, r1
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <_Z19testservo_selecter2v+0x12a>
    168c:	2a e0       	ldi	r18, 0x0A	; 10
	if(pos_enc!=pos_enc_old)
	{
		long deltat=millis()-temps_enc;
		if(deltat<DUREE_BIG_STEPS)
		{
			delta=10;
    168e:	c2 2e       	mov	r12, r18
    1690:	d1 2c       	mov	r13, r1
    1692:	0e 94 b4 13 	call	0x2768	; 0x2768 <millis>
		}
		temps_enc=millis();
    1696:	60 93 3d 03 	sts	0x033D, r22
    169a:	70 93 3e 03 	sts	0x033E, r23
    169e:	80 93 3f 03 	sts	0x033F, r24
    16a2:	90 93 40 03 	sts	0x0340, r25
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <_Z19testservo_selecter2v+0x146>
    16a8:	cc 24       	eor	r12, r12
	if (pos_enc < 0)
	{
		pos_enc=0;
		myEnc.write(0);
	}
	int delta=1;
    16aa:	c3 94       	inc	r12
    16ac:	d1 2c       	mov	r13, r1
    16ae:	80 91 41 03 	lds	r24, 0x0341
		{
			delta=10;
		}
		temps_enc=millis();
	}
	int Angle = max((memAngle+delta*(pos_enc-pos_enc_old)),0);
    16b2:	90 91 42 03 	lds	r25, 0x0342
    16b6:	98 01       	movw	r18, r16
    16b8:	28 1b       	sub	r18, r24
    16ba:	39 0b       	sbc	r19, r25
    16bc:	c2 9e       	mul	r12, r18
    16be:	70 01       	movw	r14, r0
    16c0:	c3 9e       	mul	r12, r19
    16c2:	f0 0c       	add	r15, r0
    16c4:	d2 9e       	mul	r13, r18
    16c6:	f0 0c       	add	r15, r0
    16c8:	11 24       	eor	r1, r1
    16ca:	80 91 43 03 	lds	r24, 0x0343
    16ce:	90 91 44 03 	lds	r25, 0x0344
    16d2:	e8 0e       	add	r14, r24
    16d4:	f9 1e       	adc	r15, r25
    16d6:	f7 fe       	sbrs	r15, 7
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <_Z19testservo_selecter2v+0x176>
    16da:	e1 2c       	mov	r14, r1
    16dc:	f1 2c       	mov	r15, r1
    16de:	35 eb       	ldi	r19, 0xB5	; 181
	Angle=min(Angle,180);
    16e0:	e3 16       	cp	r14, r19
    16e2:	f1 04       	cpc	r15, r1
    16e4:	1c f0       	brlt	.+6      	; 0x16ec <_Z19testservo_selecter2v+0x184>
    16e6:	84 eb       	ldi	r24, 0xB4	; 180
    16e8:	e8 2e       	mov	r14, r24
    16ea:	f1 2c       	mov	r15, r1
    16ec:	10 93 42 03 	sts	0x0342, r17
	pos_enc_old=pos_enc;
    16f0:	00 93 41 03 	sts	0x0341, r16
    16f4:	b7 01       	movw	r22, r14

	servotest.write(Angle);
    16f6:	84 ed       	ldi	r24, 0xD4	; 212
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	77 d4       	rcall	.+2286   	; 0x1fea <_ZN5Servo5writeEi>
    16fc:	80 91 43 03 	lds	r24, 0x0343

	if(Angle!=memAngle)
    1700:	90 91 44 03 	lds	r25, 0x0344
    1704:	e8 16       	cp	r14, r24
    1706:	f9 06       	cpc	r15, r25
    1708:	d9 f0       	breq	.+54     	; 0x1740 <_Z19testservo_selecter2v+0x1d8>
    170a:	ff 92       	push	r15
    170c:	ef 92       	push	r14
	{
		char affich[16];
		//int serv=servotest.read();
		//snprintf(affich,17,"Angle= %d %d",Angle,serv);
		snprintf(affich,17,"Angle= %d",Angle);
    170e:	81 e8       	ldi	r24, 0x81	; 129
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	9f 93       	push	r25
    1714:	8f 93       	push	r24
    1716:	1f 92       	push	r1
    1718:	81 e1       	ldi	r24, 0x11	; 17
    171a:	8f 93       	push	r24
    171c:	8e 01       	movw	r16, r28
    171e:	0f 5f       	subi	r16, 0xFF	; 255
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	1f 93       	push	r17
    1724:	0f 93       	push	r16
    1726:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    172a:	c8 01       	movw	r24, r16
    172c:	70 d8       	rcall	.-3872   	; 0x80e <_Z8afficherPKc>
		afficher(affich);
    172e:	f0 92 44 03 	sts	0x0344, r15
    1732:	e0 92 43 03 	sts	0x0343, r14
		memAngle=Angle;
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	87 e0       	ldi	r24, 0x07	; 7
    1742:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
	}

	if(!digitalRead(RETOUR))
    1746:	89 2b       	or	r24, r25
    1748:	61 f4       	brne	.+24     	; 0x1762 <_Z19testservo_selecter2v+0x1fa>
    174a:	6f e0       	ldi	r22, 0x0F	; 15
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 e0       	ldi	r24, 0x00	; 0
	{
		delay(DELAY_BOUNCE);	//anti rebond
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <delay>
    1756:	87 e0       	ldi	r24, 0x07	; 7
    1758:	0e 94 5e 15 	call	0x2abc	; 0x2abc <digitalRead>
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
    175c:	89 2b       	or	r24, r25
    175e:	d9 f3       	breq	.-10     	; 0x1756 <_Z19testservo_selecter2v+0x1ee>
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <_Z19testservo_selecter2v+0x200>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <_Z19testservo_selecter2v+0x204>
		return(&sMenu_servo);
	}
    return NULL;
    1768:	84 e1       	ldi	r24, 0x14	; 20
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	60 96       	adiw	r28, 0x10	; 16

	if(!digitalRead(RETOUR))
	{
		delay(DELAY_BOUNCE);	//anti rebond
		while(!digitalRead(RETOUR));	//attente du relachement du bouton
		return(&sMenu_servo);
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
	}
    return NULL;
}
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	08 95       	ret

0000178a <setup>:
sState *current = &sInitHard;
unsigned long _matchStart;

void setup() {
#ifdef DEBUG
	Serial.begin(115200);
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	52 ec       	ldi	r21, 0xC2	; 194
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	87 ee       	ldi	r24, 0xE7	; 231
    1794:	94 e0       	ldi	r25, 0x04	; 4
    1796:	07 d6       	rcall	.+3086   	; 0x23a6 <_ZN14HardwareSerial5beginEm>
    1798:	6b e8       	ldi	r22, 0x8B	; 139
	Serial.println("start");
    179a:	72 e0       	ldi	r23, 0x02	; 2
    179c:	87 ee       	ldi	r24, 0xE7	; 231
    179e:	94 e0       	ldi	r25, 0x04	; 4
    17a0:	2e d7       	rcall	.+3676   	; 0x25fe <_ZN5Print7printlnEPKc>
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	82 e0       	ldi	r24, 0x02	; 2
#endif

	digitalWrite(2, HIGH);
    17a6:	0e 94 29 15 	call	0x2a52	; 0x2a52 <digitalWrite>
    17aa:	e0 91 60 01 	lds	r30, 0x0160


	if (current->init) {
    17ae:	f0 91 61 01 	lds	r31, 0x0161
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	89 2b       	or	r24, r25
    17b8:	79 f0       	breq	.+30     	; 0x17d8 <setup+0x4e>
    17ba:	61 e9       	ldi	r22, 0x91	; 145
    17bc:	72 e0       	ldi	r23, 0x02	; 2

#ifdef DEBUG
		Serial.println("sortie init mat");
    17be:	87 ee       	ldi	r24, 0xE7	; 231
    17c0:	94 e0       	ldi	r25, 0x04	; 4
    17c2:	1d d7       	rcall	.+3642   	; 0x25fe <_ZN5Print7printlnEPKc>
    17c4:	e0 91 60 01 	lds	r30, 0x0160
    17c8:	f0 91 61 01 	lds	r31, 0x0161
#endif
		current->init(0);
    17cc:	02 80       	ldd	r0, Z+2	; 0x02
    17ce:	f3 81       	ldd	r31, Z+3	; 0x03
    17d0:	e0 2d       	mov	r30, r0
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	09 95       	icall
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	86 e0       	ldi	r24, 0x06	; 6
    17dc:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <pinMode>
	}

	pinMode(SELECT,INPUT_PULLUP);
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	87 e0       	ldi	r24, 0x07	; 7
    17e4:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <pinMode>

000017e8 <loop>:
	pinMode(RETOUR,INPUT_PULLUP);
}

void loop() {
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29


#ifdef DEBUG
	static unsigned long prevBlink = millis();
    17f0:	80 91 5a 03 	lds	r24, 0x035A
    17f4:	81 11       	cpse	r24, r1
    17f6:	11 c0       	rjmp	.+34     	; 0x181a <loop+0x32>
    17f8:	8a e5       	ldi	r24, 0x5A	; 90
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	5e d7       	rcall	.+3772   	; 0x26ba <__cxa_guard_acquire>
    17fe:	89 2b       	or	r24, r25
    1800:	61 f0       	breq	.+24     	; 0x181a <loop+0x32>
    1802:	b2 d7       	rcall	.+3940   	; 0x2768 <millis>
    1804:	60 93 56 03 	sts	0x0356, r22
    1808:	70 93 57 03 	sts	0x0357, r23
    180c:	80 93 58 03 	sts	0x0358, r24
    1810:	90 93 59 03 	sts	0x0359, r25
    1814:	8a e5       	ldi	r24, 0x5A	; 90
    1816:	93 e0       	ldi	r25, 0x03	; 3
    1818:	59 d7       	rcall	.+3762   	; 0x26cc <__cxa_guard_release>
    181a:	a6 d7       	rcall	.+3916   	; 0x2768 <millis>
    181c:	00 91 56 03 	lds	r16, 0x0356
	static char ledState = 0;
	if ((millis() - prevBlink) > 500) {
    1820:	10 91 57 03 	lds	r17, 0x0357
    1824:	20 91 58 03 	lds	r18, 0x0358
    1828:	30 91 59 03 	lds	r19, 0x0359
    182c:	60 1b       	sub	r22, r16
    182e:	71 0b       	sbc	r23, r17
    1830:	82 0b       	sbc	r24, r18
    1832:	93 0b       	sbc	r25, r19
    1834:	65 3f       	cpi	r22, 0xF5	; 245
    1836:	71 40       	sbci	r23, 0x01	; 1
    1838:	81 05       	cpc	r24, r1
    183a:	91 05       	cpc	r25, r1
    183c:	90 f0       	brcs	.+36     	; 0x1862 <loop+0x7a>
    183e:	60 91 55 03 	lds	r22, 0x0355
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	68 27       	eor	r22, r24
		ledState ^= 1;
    1846:	60 93 55 03 	sts	0x0355, r22
    184a:	8d e0       	ldi	r24, 0x0D	; 13
    184c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <digitalWrite>
    1850:	8b d7       	rcall	.+3862   	; 0x2768 <millis>
		digitalWrite(PIN_LED, ledState);
    1852:	60 93 56 03 	sts	0x0356, r22
    1856:	70 93 57 03 	sts	0x0357, r23
		prevBlink = millis();
    185a:	80 93 58 03 	sts	0x0358, r24
    185e:	90 93 59 03 	sts	0x0359, r25
    1862:	e0 91 60 01 	lds	r30, 0x0160
    1866:	f0 91 61 01 	lds	r31, 0x0161
    186a:	80 81       	ld	r24, Z
	}
#endif

	if (current->flag & BIT(E_BLINK))
    186c:	80 fd       	sbrc	r24, 0
    186e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z5blinkv>
    1872:	e0 91 60 01 	lds	r30, 0x0160
    1876:	f0 91 61 01 	lds	r31, 0x0161
		blink();
    187a:	06 80       	ldd	r0, Z+6	; 0x06

	sState *next;
	if (current->testFunction) {
    187c:	f7 81       	ldd	r31, Z+7	; 0x07
    187e:	e0 2d       	mov	r30, r0
    1880:	30 97       	sbiw	r30, 0x00	; 0
    1882:	d9 f0       	breq	.+54     	; 0x18ba <loop+0xd2>
    1884:	09 95       	icall
    1886:	ec 01       	movw	r28, r24
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	b9 f0       	breq	.+46     	; 0x18ba <loop+0xd2>
    188c:	e0 91 60 01 	lds	r30, 0x0160
		if ((next = (current->testFunction()))) {
    1890:	f0 91 61 01 	lds	r31, 0x0161
    1894:	04 80       	ldd	r0, Z+4	; 0x04
			if (current->deinit)
    1896:	f5 81       	ldd	r31, Z+5	; 0x05
    1898:	e0 2d       	mov	r30, r0
    189a:	30 97       	sbiw	r30, 0x00	; 0
    189c:	09 f0       	breq	.+2      	; 0x18a0 <loop+0xb8>
    189e:	09 95       	icall
    18a0:	ea 81       	ldd	r30, Y+2	; 0x02
    18a2:	fb 81       	ldd	r31, Y+3	; 0x03
    18a4:	30 97       	sbiw	r30, 0x00	; 0
    18a6:	29 f0       	breq	.+10     	; 0x18b2 <loop+0xca>
				current->deinit(next); //we call deinit of the current state with the pointer to next state
    18a8:	80 91 60 01 	lds	r24, 0x0160
			if (next->init)
    18ac:	90 91 61 01 	lds	r25, 0x0161
    18b0:	09 95       	icall
				next->init(current); //we call init of the next state with the pointer of current state
    18b2:	d0 93 61 01 	sts	0x0161, r29
    18b6:	c0 93 60 01 	sts	0x0160, r28
    18ba:	df 91       	pop	r29
			current = next; //we set the new state
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    18c4:	61 34       	cpi	r22, 0x41	; 65
    18c6:	98 f4       	brcc	.+38     	; 0x18ee <twi_transmit+0x2a>
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    18c8:	20 91 2f 04 	lds	r18, 0x042F
    18cc:	24 30       	cpi	r18, 0x04	; 4
    18ce:	89 f4       	brne	.+34     	; 0x18f2 <twi_transmit+0x2e>
    return 2;
  }

  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    18d0:	60 93 a4 03 	sts	0x03A4, r22
    18d4:	fc 01       	movw	r30, r24
    18d6:	86 ea       	ldi	r24, 0xA6	; 166
    18d8:	93 e0       	ldi	r25, 0x03	; 3
  for(i = 0; i < length; ++i){
    18da:	dc 01       	movw	r26, r24
    18dc:	2a 2f       	mov	r18, r26
    18de:	28 1b       	sub	r18, r24
    18e0:	26 17       	cp	r18, r22
    18e2:	18 f4       	brcc	.+6      	; 0x18ea <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
    18e4:	21 91       	ld	r18, Z+
    18e6:	2d 93       	st	X+, r18
    18e8:	f9 cf       	rjmp	.-14     	; 0x18dc <twi_transmit+0x18>
  }

  return 0;
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	08 95       	ret
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    18f2:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }

  return 0;
}
    18f4:	08 95       	ret

000018f6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    18f6:	85 ed       	ldi	r24, 0xD5	; 213
    18f8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    18fc:	80 91 bc 00 	lds	r24, 0x00BC
    1900:	84 fd       	sbrc	r24, 4
    1902:	fc cf       	rjmp	.-8      	; 0x18fc <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1904:	10 92 2f 04 	sts	0x042F, r1
    1908:	08 95       	ret

0000190a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    190a:	85 ec       	ldi	r24, 0xC5	; 197
    190c:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    1910:	10 92 2f 04 	sts	0x042F, r1
    1914:	08 95       	ret

00001916 <__vector_24>:
}

SIGNAL(TWI_vect)
{
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
  switch(TW_STATUS){
    1938:	80 91 b9 00 	lds	r24, 0x00B9
    193c:	88 7f       	andi	r24, 0xF8	; 248
    193e:	80 36       	cpi	r24, 0x60	; 96
    1940:	09 f4       	brne	.+2      	; 0x1944 <__vector_24+0x2e>
    1942:	9c c0       	rjmp	.+312    	; 0x1a7c <__vector_24+0x166>
    1944:	68 f5       	brcc	.+90     	; 0x19a0 <__vector_24+0x8a>
    1946:	88 32       	cpi	r24, 0x28	; 40
    1948:	09 f4       	brne	.+2      	; 0x194c <__vector_24+0x36>
    194a:	5b c0       	rjmp	.+182    	; 0x1a02 <__vector_24+0xec>
    194c:	90 f4       	brcc	.+36     	; 0x1972 <__vector_24+0x5c>
    194e:	80 31       	cpi	r24, 0x10	; 16
    1950:	09 f4       	brne	.+2      	; 0x1954 <__vector_24+0x3e>
    1952:	54 c0       	rjmp	.+168    	; 0x19fc <__vector_24+0xe6>
    1954:	38 f4       	brcc	.+14     	; 0x1964 <__vector_24+0x4e>
    1956:	88 23       	and	r24, r24
    1958:	09 f4       	brne	.+2      	; 0x195c <__vector_24+0x46>
    195a:	f3 c0       	rjmp	.+486    	; 0x1b42 <__vector_24+0x22c>
    195c:	88 30       	cpi	r24, 0x08	; 8
    195e:	09 f4       	brne	.+2      	; 0x1962 <__vector_24+0x4c>
    1960:	4d c0       	rjmp	.+154    	; 0x19fc <__vector_24+0xe6>
    1962:	f2 c0       	rjmp	.+484    	; 0x1b48 <__vector_24+0x232>
    1964:	88 31       	cpi	r24, 0x18	; 24
    1966:	09 f4       	brne	.+2      	; 0x196a <__vector_24+0x54>
    1968:	4c c0       	rjmp	.+152    	; 0x1a02 <__vector_24+0xec>
    196a:	80 32       	cpi	r24, 0x20	; 32
    196c:	09 f4       	brne	.+2      	; 0x1970 <__vector_24+0x5a>
    196e:	5d c0       	rjmp	.+186    	; 0x1a2a <__vector_24+0x114>
    1970:	eb c0       	rjmp	.+470    	; 0x1b48 <__vector_24+0x232>
    1972:	80 34       	cpi	r24, 0x40	; 64
    1974:	09 f4       	brne	.+2      	; 0x1978 <__vector_24+0x62>
    1976:	68 c0       	rjmp	.+208    	; 0x1a48 <__vector_24+0x132>
    1978:	48 f4       	brcc	.+18     	; 0x198c <__vector_24+0x76>
    197a:	80 33       	cpi	r24, 0x30	; 48
    197c:	09 f4       	brne	.+2      	; 0x1980 <__vector_24+0x6a>
    197e:	55 c0       	rjmp	.+170    	; 0x1a2a <__vector_24+0x114>
    1980:	88 33       	cpi	r24, 0x38	; 56
    1982:	09 f0       	breq	.+2      	; 0x1986 <__vector_24+0x70>
    1984:	e1 c0       	rjmp	.+450    	; 0x1b48 <__vector_24+0x232>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1986:	80 93 62 03 	sts	0x0362, r24
    198a:	a7 c0       	rjmp	.+334    	; 0x1ada <__vector_24+0x1c4>
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
  switch(TW_STATUS){
    198c:	80 35       	cpi	r24, 0x50	; 80
    198e:	09 f4       	brne	.+2      	; 0x1992 <__vector_24+0x7c>
    1990:	4f c0       	rjmp	.+158    	; 0x1a30 <__vector_24+0x11a>
    1992:	88 35       	cpi	r24, 0x58	; 88
    1994:	09 f4       	brne	.+2      	; 0x1998 <__vector_24+0x82>
    1996:	5d c0       	rjmp	.+186    	; 0x1a52 <__vector_24+0x13c>
    1998:	88 34       	cpi	r24, 0x48	; 72
    199a:	09 f0       	breq	.+2      	; 0x199e <__vector_24+0x88>
    199c:	d5 c0       	rjmp	.+426    	; 0x1b48 <__vector_24+0x232>
    199e:	d3 c0       	rjmp	.+422    	; 0x1b46 <__vector_24+0x230>
    19a0:	88 39       	cpi	r24, 0x98	; 152
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__vector_24+0x90>
    19a4:	c4 c0       	rjmp	.+392    	; 0x1b2e <__vector_24+0x218>
    19a6:	a8 f4       	brcc	.+42     	; 0x19d2 <__vector_24+0xbc>
    19a8:	88 37       	cpi	r24, 0x78	; 120
    19aa:	09 f4       	brne	.+2      	; 0x19ae <__vector_24+0x98>
    19ac:	67 c0       	rjmp	.+206    	; 0x1a7c <__vector_24+0x166>
    19ae:	38 f4       	brcc	.+14     	; 0x19be <__vector_24+0xa8>
    19b0:	88 36       	cpi	r24, 0x68	; 104
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__vector_24+0xa0>
    19b4:	63 c0       	rjmp	.+198    	; 0x1a7c <__vector_24+0x166>
    19b6:	80 37       	cpi	r24, 0x70	; 112
    19b8:	09 f4       	brne	.+2      	; 0x19bc <__vector_24+0xa6>
    19ba:	60 c0       	rjmp	.+192    	; 0x1a7c <__vector_24+0x166>
    19bc:	c5 c0       	rjmp	.+394    	; 0x1b48 <__vector_24+0x232>
    19be:	88 38       	cpi	r24, 0x88	; 136
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <__vector_24+0xae>
    19c2:	b5 c0       	rjmp	.+362    	; 0x1b2e <__vector_24+0x218>
    19c4:	80 39       	cpi	r24, 0x90	; 144
    19c6:	09 f4       	brne	.+2      	; 0x19ca <__vector_24+0xb4>
    19c8:	5f c0       	rjmp	.+190    	; 0x1a88 <__vector_24+0x172>
    19ca:	80 38       	cpi	r24, 0x80	; 128
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <__vector_24+0xba>
    19ce:	bc c0       	rjmp	.+376    	; 0x1b48 <__vector_24+0x232>
    19d0:	5b c0       	rjmp	.+182    	; 0x1a88 <__vector_24+0x172>
    19d2:	80 3b       	cpi	r24, 0xB0	; 176
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <__vector_24+0xc2>
    19d6:	83 c0       	rjmp	.+262    	; 0x1ade <__vector_24+0x1c8>
    19d8:	38 f4       	brcc	.+14     	; 0x19e8 <__vector_24+0xd2>
    19da:	80 3a       	cpi	r24, 0xA0	; 160
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <__vector_24+0xca>
    19de:	66 c0       	rjmp	.+204    	; 0x1aac <__vector_24+0x196>
    19e0:	88 3a       	cpi	r24, 0xA8	; 168
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <__vector_24+0xd0>
    19e4:	7c c0       	rjmp	.+248    	; 0x1ade <__vector_24+0x1c8>
    19e6:	b0 c0       	rjmp	.+352    	; 0x1b48 <__vector_24+0x232>
    19e8:	80 3c       	cpi	r24, 0xC0	; 192
    19ea:	09 f4       	brne	.+2      	; 0x19ee <__vector_24+0xd8>
    19ec:	a4 c0       	rjmp	.+328    	; 0x1b36 <__vector_24+0x220>
    19ee:	88 3c       	cpi	r24, 0xC8	; 200
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <__vector_24+0xde>
    19f2:	a1 c0       	rjmp	.+322    	; 0x1b36 <__vector_24+0x220>
    19f4:	88 3b       	cpi	r24, 0xB8	; 184
    19f6:	09 f4       	brne	.+2      	; 0x19fa <__vector_24+0xe4>
    19f8:	87 c0       	rjmp	.+270    	; 0x1b08 <__vector_24+0x1f2>
    19fa:	a6 c0       	rjmp	.+332    	; 0x1b48 <__vector_24+0x232>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    19fc:	80 91 2e 04 	lds	r24, 0x042E
    1a00:	10 c0       	rjmp	.+32     	; 0x1a22 <__vector_24+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a02:	90 91 e7 03 	lds	r25, 0x03E7
    1a06:	80 91 e6 03 	lds	r24, 0x03E6
    1a0a:	98 17       	cp	r25, r24
    1a0c:	70 f5       	brcc	.+92     	; 0x1a6a <__vector_24+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1a0e:	e0 91 e7 03 	lds	r30, 0x03E7
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	8e 0f       	add	r24, r30
    1a16:	80 93 e7 03 	sts	0x03E7, r24
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	e8 51       	subi	r30, 0x18	; 24
    1a1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a20:	80 81       	ld	r24, Z
    1a22:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1a26:	85 ec       	ldi	r24, 0xC5	; 197
    1a28:	83 c0       	rjmp	.+262    	; 0x1b30 <__vector_24+0x21a>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1a2a:	80 93 62 03 	sts	0x0362, r24
    1a2e:	8b c0       	rjmp	.+278    	; 0x1b46 <__vector_24+0x230>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a30:	e0 91 e7 03 	lds	r30, 0x03E7
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	8e 0f       	add	r24, r30
    1a38:	80 93 e7 03 	sts	0x03E7, r24
    1a3c:	80 91 bb 00 	lds	r24, 0x00BB
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	e8 51       	subi	r30, 0x18	; 24
    1a44:	fc 4f       	sbci	r31, 0xFC	; 252
    1a46:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a48:	90 91 e7 03 	lds	r25, 0x03E7
    1a4c:	80 91 e6 03 	lds	r24, 0x03E6
    1a50:	6b c0       	rjmp	.+214    	; 0x1b28 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a52:	e0 91 e7 03 	lds	r30, 0x03E7
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	8e 0f       	add	r24, r30
    1a5a:	80 93 e7 03 	sts	0x03E7, r24
    1a5e:	80 91 bb 00 	lds	r24, 0x00BB
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	e8 51       	subi	r30, 0x18	; 24
    1a66:	fc 4f       	sbci	r31, 0xFC	; 252
    1a68:	80 83       	st	Z, r24
	if (twi_sendStop)
    1a6a:	80 91 2d 04 	lds	r24, 0x042D
    1a6e:	81 11       	cpse	r24, r1
    1a70:	6a c0       	rjmp	.+212    	; 0x1b46 <__vector_24+0x230>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 2c 04 	sts	0x042C, r24
	  // don't enable the interrupt. We'll generate the start, but we
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1a78:	84 ea       	ldi	r24, 0xA4	; 164
    1a7a:	5e c0       	rjmp	.+188    	; 0x1b38 <__vector_24+0x222>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	80 93 2f 04 	sts	0x042F, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1a82:	10 92 63 03 	sts	0x0363, r1
    1a86:	cf cf       	rjmp	.-98     	; 0x1a26 <__vector_24+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a88:	80 91 63 03 	lds	r24, 0x0363
    1a8c:	80 34       	cpi	r24, 0x40	; 64
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <__vector_24+0x17c>
    1a90:	4e c0       	rjmp	.+156    	; 0x1b2e <__vector_24+0x218>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1a92:	e0 91 63 03 	lds	r30, 0x0363
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	8e 0f       	add	r24, r30
    1a9a:	80 93 63 03 	sts	0x0363, r24
    1a9e:	80 91 bb 00 	lds	r24, 0x00BB
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	ec 59       	subi	r30, 0x9C	; 156
    1aa6:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa8:	80 83       	st	Z, r24
    1aaa:	bd cf       	rjmp	.-134    	; 0x1a26 <__vector_24+0x110>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1aac:	80 91 63 03 	lds	r24, 0x0363
    1ab0:	80 34       	cpi	r24, 0x40	; 64
    1ab2:	30 f4       	brcc	.+12     	; 0x1ac0 <__vector_24+0x1aa>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1ab4:	e0 91 63 03 	lds	r30, 0x0363
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	ec 59       	subi	r30, 0x9C	; 156
    1abc:	fc 4f       	sbci	r31, 0xFC	; 252
    1abe:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1ac0:	1a df       	rcall	.-460    	; 0x18f6 <twi_stop>
    1ac2:	60 91 63 03 	lds	r22, 0x0363
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	e0 91 28 04 	lds	r30, 0x0428
    1acc:	f0 91 29 04 	lds	r31, 0x0429
    1ad0:	84 e6       	ldi	r24, 0x64	; 100
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	09 95       	icall
    1ad6:	10 92 63 03 	sts	0x0363, r1
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1ada:	17 df       	rcall	.-466    	; 0x190a <twi_releaseBus>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1adc:	35 c0       	rjmp	.+106    	; 0x1b48 <__vector_24+0x232>
    1ade:	84 e0       	ldi	r24, 0x04	; 4
      break;
    1ae0:	80 93 2f 04 	sts	0x042F, r24

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1ae4:	10 92 a5 03 	sts	0x03A5, r1
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ae8:	10 92 a4 03 	sts	0x03A4, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1aec:	e0 91 2a 04 	lds	r30, 0x042A
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1af0:	f0 91 2b 04 	lds	r31, 0x042B
    1af4:	09 95       	icall
    1af6:	80 91 a4 03 	lds	r24, 0x03A4
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1afa:	81 11       	cpse	r24, r1
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <__vector_24+0x1f2>
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	80 93 a4 03 	sts	0x03A4, r24
        twi_txBufferLength = 1;
    1b04:	10 92 a6 03 	sts	0x03A6, r1
        twi_txBuffer[0] = 0x00;
    1b08:	e0 91 a5 03 	lds	r30, 0x03A5
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	8e 0f       	add	r24, r30
    1b10:	80 93 a5 03 	sts	0x03A5, r24
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	ea 55       	subi	r30, 0x5A	; 90
    1b18:	fc 4f       	sbci	r31, 0xFC	; 252
    1b1a:	80 81       	ld	r24, Z
    1b1c:	80 93 bb 00 	sts	0x00BB, r24
    1b20:	90 91 a5 03 	lds	r25, 0x03A5
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1b24:	80 91 a4 03 	lds	r24, 0x03A4
    1b28:	98 17       	cp	r25, r24
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__vector_24+0x218>
    1b2c:	7c cf       	rjmp	.-264    	; 0x1a26 <__vector_24+0x110>
    1b2e:	85 e8       	ldi	r24, 0x85	; 133
    1b30:	80 93 bc 00 	sts	0x00BC, r24
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <__vector_24+0x232>
    1b36:	85 ec       	ldi	r24, 0xC5	; 197
    1b38:	80 93 bc 00 	sts	0x00BC, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b3c:	10 92 2f 04 	sts	0x042F, r1
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <__vector_24+0x232>
    1b42:	10 92 62 03 	sts	0x0362, r1

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1b46:	d7 de       	rcall	.-594    	; 0x18f6 <twi_stop>
    1b48:	ff 91       	pop	r31
      twi_stop();
    1b4a:	ef 91       	pop	r30
    1b4c:	bf 91       	pop	r27
      break;
  }
}
    1b4e:	af 91       	pop	r26
    1b50:	9f 91       	pop	r25
    1b52:	8f 91       	pop	r24
    1b54:	7f 91       	pop	r23
    1b56:	6f 91       	pop	r22
    1b58:	5f 91       	pop	r21
    1b5a:	4f 91       	pop	r20
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    1b6a:	80 91 7f 04 	lds	r24, 0x047F
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	20 91 80 04 	lds	r18, 0x0480
}
    1b74:	82 1b       	sub	r24, r18
    1b76:	91 09       	sbc	r25, r1
    1b78:	08 95       	ret

00001b7a <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    1b7a:	20 91 80 04 	lds	r18, 0x0480
    1b7e:	80 91 7f 04 	lds	r24, 0x047F
    1b82:	28 17       	cp	r18, r24
    1b84:	50 f4       	brcc	.+20     	; 0x1b9a <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    1b86:	e2 2f       	mov	r30, r18
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	ef 57       	subi	r30, 0x7F	; 127
    1b8c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b8e:	80 81       	ld	r24, Z
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    ++rxBufferIndex;
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	20 93 80 04 	sts	0x0480, r18
    1b98:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	9f ef       	ldi	r25, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    1b9e:	08 95       	ret

00001ba0 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    1ba0:	e0 91 80 04 	lds	r30, 0x0480
    1ba4:	80 91 7f 04 	lds	r24, 0x047F
    1ba8:	e8 17       	cp	r30, r24
    1baa:	30 f4       	brcc	.+12     	; 0x1bb8 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	ef 57       	subi	r30, 0x7F	; 127
    1bb0:	fb 4f       	sbci	r31, 0xFB	; 251
    1bb2:	80 81       	ld	r24, Z
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    1bbc:	08 95       	ret

00001bbe <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    1bbe:	08 95       	ret

00001bc0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1bc0:	cf 92       	push	r12
    1bc2:	df 92       	push	r13
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	7c 01       	movw	r14, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8a 01       	movw	r16, r20
  if(transmitting){
    1bd6:	20 91 3c 04 	lds	r18, 0x043C
    1bda:	22 23       	and	r18, r18
    1bdc:	89 f0       	breq	.+34     	; 0x1c00 <_ZN7TwoWire5writeEPKhj+0x40>
    1bde:	eb 01       	movw	r28, r22
    1be0:	6b 01       	movw	r12, r22
    1be2:	c4 0e       	add	r12, r20
    1be4:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1be6:	cc 15       	cp	r28, r12
    1be8:	dd 05       	cpc	r29, r13
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <_ZN7TwoWire5writeEPKhj+0x44>
      write(data[i]);
    1bec:	69 91       	ld	r22, Y+
    1bee:	d7 01       	movw	r26, r14
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	01 90       	ld	r0, Z+
    1bf6:	f0 81       	ld	r31, Z
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	09 95       	icall
    1bfe:	f3 cf       	rjmp	.-26     	; 0x1be6 <_ZN7TwoWire5writeEPKhj+0x26>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1c00:	64 2f       	mov	r22, r20
    1c02:	60 de       	rcall	.-832    	; 0x18c4 <twi_transmit>
    1c04:	c8 01       	movw	r24, r16
  }
  return quantity;
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	df 90       	pop	r13
    1c14:	cf 90       	pop	r12
    1c16:	08 95       	ret

00001c18 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	1f 92       	push	r1
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    1c24:	20 91 3c 04 	lds	r18, 0x043C
    1c28:	22 23       	and	r18, r18
    1c2a:	d1 f0       	breq	.+52     	; 0x1c60 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1c2c:	20 91 3d 04 	lds	r18, 0x043D
    1c30:	20 34       	cpi	r18, 0x40	; 64
    1c32:	40 f0       	brcs	.+16     	; 0x1c44 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1c34:	21 e0       	ldi	r18, 0x01	; 1
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	fc 01       	movw	r30, r24
    1c3a:	33 83       	std	Z+3, r19	; 0x03
    1c3c:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <_ZN7TwoWire5writeEh+0x54>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1c44:	80 91 3e 04 	lds	r24, 0x043E
    1c48:	e8 2f       	mov	r30, r24
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	e1 5c       	subi	r30, 0xC1	; 193
    1c4e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c50:	99 81       	ldd	r25, Y+1	; 0x01
    1c52:	90 83       	st	Z, r25
    ++txBufferIndex;
    1c54:	8f 5f       	subi	r24, 0xFF	; 255
    1c56:	80 93 3e 04 	sts	0x043E, r24
    // update amount in buffer
    txBufferLength = txBufferIndex;
    1c5a:	80 93 3d 04 	sts	0x043D, r24
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <_ZN7TwoWire5writeEh+0x50>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	ce 01       	movw	r24, r28
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	2e de       	rcall	.-932    	; 0x18c4 <twi_transmit>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
  }
  return 1;
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0f 90       	pop	r0
}
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1c74:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1c76:	13 82       	std	Z+3, r1	; 0x03
    1c78:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1c7a:	48 ee       	ldi	r20, 0xE8	; 232
    1c7c:	53 e0       	ldi	r21, 0x03	; 3
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	44 83       	std	Z+4, r20	; 0x04
    1c84:	55 83       	std	Z+5, r21	; 0x05
    1c86:	66 83       	std	Z+6, r22	; 0x06
    1c88:	77 83       	std	Z+7, r23	; 0x07
    1c8a:	85 ea       	ldi	r24, 0xA5	; 165
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	08 95       	ret

00001c94 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1c94:	80 e3       	ldi	r24, 0x30	; 48
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	ed cf       	rjmp	.-38     	; 0x1c74 <_ZN7TwoWireC1Ev>

00001c9a <__vector_11>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	2f 93       	push	r18
    1ca6:	3f 93       	push	r19
    1ca8:	4f 93       	push	r20
    1caa:	5f 93       	push	r21
    1cac:	6f 93       	push	r22
    1cae:	7f 93       	push	r23
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    1cbc:	80 91 c2 04 	lds	r24, 0x04C2
    1cc0:	87 ff       	sbrs	r24, 7
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    1cc4:	10 92 85 00 	sts	0x0085, r1
    1cc8:	10 92 84 00 	sts	0x0084, r1
    1ccc:	1a c0       	rjmp	.+52     	; 0x1d02 <__vector_11+0x68>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    1cce:	20 91 c2 04 	lds	r18, 0x04C2
    1cd2:	33 27       	eor	r19, r19
    1cd4:	27 fd       	sbrc	r18, 7
    1cd6:	30 95       	com	r19
    1cd8:	80 91 c1 04 	lds	r24, 0x04C1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	28 17       	cp	r18, r24
    1ce0:	39 07       	cpc	r19, r25
    1ce2:	7c f4       	brge	.+30     	; 0x1d02 <__vector_11+0x68>
    1ce4:	80 91 c2 04 	lds	r24, 0x04C2
    1ce8:	99 27       	eor	r25, r25
    1cea:	87 fd       	sbrc	r24, 7
    1cec:	90 95       	com	r25
    1cee:	fc 01       	movw	r30, r24
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	ff 1f       	adc	r31, r31
    1cf4:	e8 0f       	add	r30, r24
    1cf6:	f9 1f       	adc	r31, r25
    1cf8:	ed 53       	subi	r30, 0x3D	; 61
    1cfa:	fb 4f       	sbci	r31, 0xFB	; 251
    1cfc:	80 81       	ld	r24, Z
    1cfe:	86 fd       	sbrc	r24, 6
    1d00:	15 c0       	rjmp	.+42     	; 0x1d2c <__vector_11+0x92>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
  }

  Channel[timer]++;    // increment to the next channel
    1d02:	80 91 c2 04 	lds	r24, 0x04C2
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	80 93 c2 04 	sts	0x04C2, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    1d0c:	20 91 c2 04 	lds	r18, 0x04C2
    1d10:	33 27       	eor	r19, r19
    1d12:	27 fd       	sbrc	r18, 7
    1d14:	30 95       	com	r19
    1d16:	80 91 c1 04 	lds	r24, 0x04C1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	b4 f4       	brge	.+44     	; 0x1d4e <__vector_11+0xb4>
    1d22:	80 91 c2 04 	lds	r24, 0x04C2
    1d26:	8c 30       	cpi	r24, 0x0C	; 12
    1d28:	54 f1       	brlt	.+84     	; 0x1d7e <__vector_11+0xe4>
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <__vector_11+0xb4>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    1d2c:	80 91 c2 04 	lds	r24, 0x04C2
    1d30:	99 27       	eor	r25, r25
    1d32:	87 fd       	sbrc	r24, 7
    1d34:	90 95       	com	r25
    1d36:	fc 01       	movw	r30, r24
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	e8 0f       	add	r30, r24
    1d3e:	f9 1f       	adc	r31, r25
    1d40:	ed 53       	subi	r30, 0x3D	; 61
    1d42:	fb 4f       	sbci	r31, 0xFB	; 251
    1d44:	80 81       	ld	r24, Z
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	8f 73       	andi	r24, 0x3F	; 63
    1d4a:	83 d6       	rcall	.+3334   	; 0x2a52 <digitalWrite>
    1d4c:	da cf       	rjmp	.-76     	; 0x1d02 <__vector_11+0x68>
    1d4e:	80 91 84 00 	lds	r24, 0x0084
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
    1d52:	90 91 85 00 	lds	r25, 0x0085
    1d56:	04 96       	adiw	r24, 0x04	; 4
    1d58:	80 34       	cpi	r24, 0x40	; 64
    1d5a:	9c 49       	sbci	r25, 0x9C	; 156
    1d5c:	18 f4       	brcc	.+6      	; 0x1d64 <__vector_11+0xca>
    1d5e:	80 e4       	ldi	r24, 0x40	; 64
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    1d60:	9c e9       	ldi	r25, 0x9C	; 156
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <__vector_11+0xd4>
    1d64:	80 91 84 00 	lds	r24, 0x0084
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    1d68:	90 91 85 00 	lds	r25, 0x0085
    1d6c:	04 96       	adiw	r24, 0x04	; 4
    1d6e:	90 93 89 00 	sts	0x0089, r25
    1d72:	80 93 88 00 	sts	0x0088, r24
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    1d78:	80 93 c2 04 	sts	0x04C2, r24
    1d7c:	37 c0       	rjmp	.+110    	; 0x1dec <__vector_11+0x152>
    1d7e:	80 91 84 00 	lds	r24, 0x0084
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    1d82:	90 91 85 00 	lds	r25, 0x0085
    1d86:	20 91 c2 04 	lds	r18, 0x04C2
    1d8a:	33 27       	eor	r19, r19
    1d8c:	27 fd       	sbrc	r18, 7
    1d8e:	30 95       	com	r19
    1d90:	f9 01       	movw	r30, r18
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	ed 53       	subi	r30, 0x3D	; 61
    1d9c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d9e:	21 81       	ldd	r18, Z+1	; 0x01
    1da0:	32 81       	ldd	r19, Z+2	; 0x02
    1da2:	82 0f       	add	r24, r18
    1da4:	93 1f       	adc	r25, r19
    1da6:	90 93 89 00 	sts	0x0089, r25
    1daa:	80 93 88 00 	sts	0x0088, r24
    1dae:	80 91 c2 04 	lds	r24, 0x04C2
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    1db2:	99 27       	eor	r25, r25
    1db4:	87 fd       	sbrc	r24, 7
    1db6:	90 95       	com	r25
    1db8:	fc 01       	movw	r30, r24
    1dba:	ee 0f       	add	r30, r30
    1dbc:	ff 1f       	adc	r31, r31
    1dbe:	e8 0f       	add	r30, r24
    1dc0:	f9 1f       	adc	r31, r25
    1dc2:	ed 53       	subi	r30, 0x3D	; 61
    1dc4:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc6:	80 81       	ld	r24, Z
    1dc8:	86 ff       	sbrs	r24, 6
    1dca:	10 c0       	rjmp	.+32     	; 0x1dec <__vector_11+0x152>
    1dcc:	80 91 c2 04 	lds	r24, 0x04C2
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    1dd0:	99 27       	eor	r25, r25
    1dd2:	87 fd       	sbrc	r24, 7
    1dd4:	90 95       	com	r25
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	e8 0f       	add	r30, r24
    1dde:	f9 1f       	adc	r31, r25
    1de0:	ed 53       	subi	r30, 0x3D	; 61
    1de2:	fb 4f       	sbci	r31, 0xFB	; 251
    1de4:	80 81       	ld	r24, Z
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	8f 73       	andi	r24, 0x3F	; 63
    1dea:	33 d6       	rcall	.+3174   	; 0x2a52 <digitalWrite>
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	0f 90       	pop	r0
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	0f 90       	pop	r0
    1e0a:	1f 90       	pop	r1
    1e0c:	18 95       	reti

00001e0e <_ZN5ServoC1Ev>:

/****************** end of static functions ******************************/

Servo::Servo()
{
  if( ServoCount < MAX_SERVOS) {
    1e0e:	20 91 c1 04 	lds	r18, 0x04C1
    1e12:	2c 30       	cpi	r18, 0x0C	; 12
    1e14:	a0 f4       	brcc	.+40     	; 0x1e3e <_ZN5ServoC1Ev+0x30>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
    1e16:	31 e0       	ldi	r19, 0x01	; 1
    1e18:	32 0f       	add	r19, r18
    1e1a:	30 93 c1 04 	sts	0x04C1, r19
    1e1e:	fc 01       	movw	r30, r24
    1e20:	20 83       	st	Z, r18
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
    1e22:	82 2f       	mov	r24, r18
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	fc 01       	movw	r30, r24
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	e8 0f       	add	r30, r24
    1e2e:	f9 1f       	adc	r31, r25
    1e30:	ed 53       	subi	r30, 0x3D	; 61
    1e32:	fb 4f       	sbci	r31, 0xFB	; 251
    1e34:	88 eb       	ldi	r24, 0xB8	; 184
    1e36:	9b e0       	ldi	r25, 0x0B	; 11
    1e38:	92 83       	std	Z+2, r25	; 0x02
    1e3a:	81 83       	std	Z+1, r24	; 0x01
    1e3c:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
    1e3e:	2f ef       	ldi	r18, 0xFF	; 255
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18
    1e44:	08 95       	ret

00001e46 <_ZN5Servo6attachEiii>:
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	ec 01       	movw	r28, r24
    1e56:	d6 2e       	mov	r13, r22
    1e58:	7a 01       	movw	r14, r20
    1e5a:	89 01       	movw	r16, r18
  if(this->servoIndex < MAX_SERVOS ) {
    1e5c:	88 81       	ld	r24, Y
    1e5e:	8c 30       	cpi	r24, 0x0C	; 12
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <_ZN5Servo6attachEiii+0x1e>
    1e62:	64 c0       	rjmp	.+200    	; 0x1f2c <_ZN5Servo6attachEiii+0xe6>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	8d 2d       	mov	r24, r13
    1e68:	bb d5       	rcall	.+2934   	; 0x29e0 <pinMode>
    1e6a:	88 81       	ld	r24, Y
    servos[this->servoIndex].Pin.nbr = pin;  
    1e6c:	a8 2f       	mov	r26, r24
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	fd 01       	movw	r30, r26
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	ea 0f       	add	r30, r26
    1e78:	fb 1f       	adc	r31, r27
    1e7a:	ed 53       	subi	r30, 0x3D	; 61
    1e7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e7e:	2d 2d       	mov	r18, r13
    1e80:	2f 73       	andi	r18, 0x3F	; 63
    1e82:	90 81       	ld	r25, Z
    1e84:	90 7c       	andi	r25, 0xC0	; 192
    1e86:	92 2b       	or	r25, r18
    1e88:	90 83       	st	Z, r25
    1e8a:	60 e2       	ldi	r22, 0x20	; 32
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
    1e8c:	72 e0       	ldi	r23, 0x02	; 2
    1e8e:	6e 19       	sub	r22, r14
    1e90:	7f 09       	sbc	r23, r15
    1e92:	77 ff       	sbrs	r23, 7
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <_ZN5Servo6attachEiii+0x54>
    1e96:	6d 5f       	subi	r22, 0xFD	; 253
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	75 95       	asr	r23
    1e9c:	67 95       	ror	r22
    1e9e:	75 95       	asr	r23
    1ea0:	67 95       	ror	r22
    1ea2:	69 83       	std	Y+1, r22	; 0x01
    1ea4:	40 e6       	ldi	r20, 0x60	; 96
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    1ea6:	59 e0       	ldi	r21, 0x09	; 9
    1ea8:	40 1b       	sub	r20, r16
    1eaa:	51 0b       	sbc	r21, r17
    1eac:	57 ff       	sbrs	r21, 7
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <_ZN5Servo6attachEiii+0x6e>
    1eb0:	4d 5f       	subi	r20, 0xFD	; 253
    1eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb4:	55 95       	asr	r21
    1eb6:	47 95       	ror	r20
    1eb8:	55 95       	asr	r21
    1eba:	47 95       	ror	r20
    1ebc:	4a 83       	std	Y+2, r20	; 0x02
    1ebe:	6c e0       	ldi	r22, 0x0C	; 12
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    1ec0:	34 d6       	rcall	.+3176   	; 0x2b2a <__udivmodqi4>
    1ec2:	9c e0       	ldi	r25, 0x0C	; 12
    1ec4:	89 9f       	mul	r24, r25

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    1ec6:	b0 01       	movw	r22, r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	a9 01       	movw	r20, r18
    1ed0:	46 0f       	add	r20, r22
    1ed2:	57 1f       	adc	r21, r23
    1ed4:	fa 01       	movw	r30, r20
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	e4 0f       	add	r30, r20
    1edc:	f5 1f       	adc	r31, r21
    1ede:	ed 53       	subi	r30, 0x3D	; 61
    1ee0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee2:	90 81       	ld	r25, Z
    1ee4:	96 fd       	sbrc	r25, 6
    1ee6:	16 c0       	rjmp	.+44     	; 0x1f14 <_ZN5Servo6attachEiii+0xce>
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	2c 30       	cpi	r18, 0x0C	; 12
    1eee:	31 05       	cpc	r19, r1
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    1ef0:	71 f7       	brne	.-36     	; 0x1ece <_ZN5Servo6attachEiii+0x88>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <_ZN5Servo6attachEiii+0xce>


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    1ef6:	10 92 80 00 	sts	0x0080, r1
    TCCR1A = 0;             // normal counting mode 
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	80 93 81 00 	sts	0x0081, r24
    TCCR1B = _BV(CS11);     // set prescaler of 8 
    1f00:	10 92 85 00 	sts	0x0085, r1
    TCNT1 = 0;              // clear the timer count 
    1f04:	10 92 84 00 	sts	0x0084, r1
    1f08:	b1 9a       	sbi	0x16, 1	; 22
    1f0a:	80 91 6f 00 	lds	r24, 0x006F
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
    1f0e:	82 60       	ori	r24, 0x02	; 2
    1f10:	80 93 6f 00 	sts	0x006F, r24
    1f14:	88 81       	ld	r24, Y
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    1f18:	fc 01       	movw	r30, r24
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	e8 0f       	add	r30, r24
    1f20:	f9 1f       	adc	r31, r25
    1f22:	ed 53       	subi	r30, 0x3D	; 61
    1f24:	fb 4f       	sbci	r31, 0xFB	; 251
    1f26:	80 81       	ld	r24, Z
    1f28:	80 64       	ori	r24, 0x40	; 64
    1f2a:	80 83       	st	Z, r24
    1f2c:	88 81       	ld	r24, Y
    1f2e:	df 91       	pop	r29
  } 
  return this->servoIndex ;
    1f30:	cf 91       	pop	r28
}
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	08 95       	ret

00001f3e <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    1f3e:	20 e6       	ldi	r18, 0x60	; 96
    1f40:	39 e0       	ldi	r19, 0x09	; 9
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	52 e0       	ldi	r21, 0x02	; 2
    1f46:	7f cf       	rjmp	.-258    	; 0x1e46 <_ZN5Servo6attachEiii>

00001f48 <_ZN5Servo6detachEv>:
  return this->servoIndex ;
}

void Servo::detach()  
{
  servos[this->servoIndex].Pin.isActive = false;  
    1f48:	fc 01       	movw	r30, r24
    1f4a:	80 81       	ld	r24, Z
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	e8 0f       	add	r30, r24
    1f56:	f9 1f       	adc	r31, r25
    1f58:	ed 53       	subi	r30, 0x3D	; 61
    1f5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8f 7b       	andi	r24, 0xBF	; 191
    1f60:	80 83       	st	Z, r24
    1f62:	08 95       	ret

00001f64 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    1f64:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    1f66:	20 81       	ld	r18, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    1f68:	2c 30       	cpi	r18, 0x0C	; 12
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <_ZN5Servo17writeMicrosecondsEi+0xa>
    1f6c:	3d c0       	rjmp	.+122    	; 0x1fe8 <_ZN5Servo17writeMicrosecondsEi+0x84>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    1f6e:	31 81       	ldd	r19, Z+1	; 0x01
    1f70:	88 e8       	ldi	r24, 0x88	; 136
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	83 1b       	sub	r24, r19
    1f76:	91 09       	sbc	r25, r1
    1f78:	37 fd       	sbrc	r19, 7
    1f7a:	93 95       	inc	r25
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	68 17       	cp	r22, r24
    1f86:	79 07       	cpc	r23, r25
    1f88:	7c f0       	brlt	.+30     	; 0x1fa8 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    1f8a:	32 81       	ldd	r19, Z+2	; 0x02
    1f8c:	88 e5       	ldi	r24, 0x58	; 88
    1f8e:	92 e0       	ldi	r25, 0x02	; 2
    1f90:	83 1b       	sub	r24, r19
    1f92:	91 09       	sbc	r25, r1
    1f94:	37 fd       	sbrc	r19, 7
    1f96:	93 95       	inc	r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	68 17       	cp	r22, r24
    1fa2:	79 07       	cpc	r23, r25
    1fa4:	0c f4       	brge	.+2      	; 0x1fa8 <_ZN5Servo17writeMicrosecondsEi+0x44>
    1fa6:	cb 01       	movw	r24, r22
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    1fa8:	02 97       	sbiw	r24, 0x02	; 2
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
    1faa:	4f b7       	in	r20, 0x3f	; 63
    cli();
    1fac:	f8 94       	cli
    servos[channel].ticks = value;  
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	ed 53       	subi	r30, 0x3D	; 61
    1fbc:	fb 4f       	sbci	r31, 0xFB	; 251
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    1fbe:	aa 27       	eor	r26, r26
    1fc0:	97 fd       	sbrc	r25, 7
    1fc2:	a0 95       	com	r26
    1fc4:	ba 2f       	mov	r27, r26
    1fc6:	64 e0       	ldi	r22, 0x04	; 4
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	aa 1f       	adc	r26, r26
    1fce:	bb 1f       	adc	r27, r27
    1fd0:	6a 95       	dec	r22
    1fd2:	d1 f7       	brne	.-12     	; 0x1fc8 <_ZN5Servo17writeMicrosecondsEi+0x64>
    1fd4:	73 e0       	ldi	r23, 0x03	; 3
    1fd6:	b6 95       	lsr	r27
    1fd8:	a7 95       	ror	r26
    1fda:	97 95       	ror	r25
    1fdc:	87 95       	ror	r24
    1fde:	7a 95       	dec	r23
    1fe0:	d1 f7       	brne	.-12     	; 0x1fd6 <_ZN5Servo17writeMicrosecondsEi+0x72>

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;  
    1fe2:	92 83       	std	Z+2, r25	; 0x02
    1fe4:	81 83       	std	Z+1, r24	; 0x01
    SREG = oldSREG;   
    1fe6:	4f bf       	out	0x3f, r20	; 63
    1fe8:	08 95       	ret

00001fea <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{  
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    2008:	60 32       	cpi	r22, 0x20	; 32
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	78 07       	cpc	r23, r24
    200e:	0c f0       	brlt	.+2      	; 0x2012 <_ZN5Servo5writeEi+0x28>
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <_ZN5Servo5writeEi+0xa6>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    2012:	77 fd       	sbrc	r23, 7
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <_ZN5Servo5writeEi+0x38>
    if(value > 180) value = 180;
    2016:	65 3b       	cpi	r22, 0xB5	; 181
    2018:	71 05       	cpc	r23, r1
    201a:	2c f0       	brlt	.+10     	; 0x2026 <_ZN5Servo5writeEi+0x3c>
    201c:	64 eb       	ldi	r22, 0xB4	; 180
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <_ZN5Servo5writeEi+0x3c>

void Servo::write(int value)
{  
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 e8       	ldi	r18, 0x88	; 136
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	28 1b       	sub	r18, r24
    202e:	31 09       	sbc	r19, r1
    2030:	87 fd       	sbrc	r24, 7
    2032:	33 95       	inc	r19
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	59 01       	movw	r10, r18
    203e:	cc 24       	eor	r12, r12
    2040:	b7 fc       	sbrc	r11, 7
    2042:	c0 94       	com	r12
    2044:	dc 2c       	mov	r13, r12
    2046:	88 27       	eor	r24, r24
    2048:	77 fd       	sbrc	r23, 7
    204a:	80 95       	com	r24
    204c:	98 2f       	mov	r25, r24
    204e:	2a 81       	ldd	r18, Y+2	; 0x02
    2050:	48 e5       	ldi	r20, 0x58	; 88
    2052:	52 e0       	ldi	r21, 0x02	; 2
    2054:	42 1b       	sub	r20, r18
    2056:	51 09       	sbc	r21, r1
    2058:	27 fd       	sbrc	r18, 7
    205a:	53 95       	inc	r21
    205c:	44 0f       	add	r20, r20
    205e:	55 1f       	adc	r21, r21
    2060:	44 0f       	add	r20, r20
    2062:	55 1f       	adc	r21, r21
    2064:	2a 01       	movw	r4, r20
    2066:	66 24       	eor	r6, r6
    2068:	57 fc       	sbrc	r5, 7
    206a:	60 94       	com	r6
    206c:	76 2c       	mov	r7, r6
    206e:	7f 92       	push	r7
    2070:	6f 92       	push	r6
    2072:	5f 92       	push	r5
    2074:	4f 92       	push	r4
    2076:	14 eb       	ldi	r17, 0xB4	; 180
    2078:	e1 2e       	mov	r14, r17
    207a:	f1 2c       	mov	r15, r1
    207c:	00 e0       	ldi	r16, 0x00	; 0
    207e:	10 e0       	ldi	r17, 0x00	; 0
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	a9 01       	movw	r20, r18
    2086:	cb d2       	rcall	.+1430   	; 0x261e <_Z3maplllll>
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	ce 01       	movw	r24, r28
  }
  this->writeMicroseconds(value);
    2092:	df 91       	pop	r29
}
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	bf 90       	pop	r11
    20a4:	af 90       	pop	r10
    20a6:	7f 90       	pop	r7
    20a8:	6f 90       	pop	r6
    20aa:	5f 90       	pop	r5
    20ac:	4f 90       	pop	r4
    20ae:	5a cf       	rjmp	.-332    	; 0x1f64 <_ZN5Servo17writeMicrosecondsEi>

000020b0 <_ZN5Servo16readMicrosecondsEv>:
}

int Servo::readMicroseconds()
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    20b0:	fc 01       	movw	r30, r24
    20b2:	80 81       	ld	r24, Z
    20b4:	8f 3f       	cpi	r24, 0xFF	; 255
    20b6:	b1 f0       	breq	.+44     	; 0x20e4 <_ZN5Servo16readMicrosecondsEv+0x34>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	fc 01       	movw	r30, r24
    20bc:	ee 0f       	add	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	e8 0f       	add	r30, r24
    20c2:	f9 1f       	adc	r31, r25
    20c4:	ed 53       	subi	r30, 0x3D	; 61
    20c6:	fb 4f       	sbci	r31, 0xFB	; 251
    20c8:	81 81       	ldd	r24, Z+1	; 0x01
    20ca:	92 81       	ldd	r25, Z+2	; 0x02
    20cc:	43 e0       	ldi	r20, 0x03	; 3
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	4a 95       	dec	r20
    20d4:	e1 f7       	brne	.-8      	; 0x20ce <_ZN5Servo16readMicrosecondsEv+0x1e>
    20d6:	54 e0       	ldi	r21, 0x04	; 4
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	5a 95       	dec	r21
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <_ZN5Servo16readMicrosecondsEv+0x28>
    20e0:	02 96       	adiw	r24, 0x02	; 2
    20e2:	08 95       	ret
  else 
    pulsewidth  = 0;
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0

  return pulsewidth;   
}
    20e8:	08 95       	ret

000020ea <_ZN5Servo4readEv>:
    SREG = oldSREG;   
  } 
}

int Servo::read() // return the value as degrees
{
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	ec 01       	movw	r28, r24
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
    2100:	d7 df       	rcall	.-82     	; 0x20b0 <_ZN5Servo16readMicrosecondsEv>
    2102:	2a 81       	ldd	r18, Y+2	; 0x02
    2104:	48 e5       	ldi	r20, 0x58	; 88
    2106:	52 e0       	ldi	r21, 0x02	; 2
    2108:	42 1b       	sub	r20, r18
    210a:	51 09       	sbc	r21, r1
    210c:	27 fd       	sbrc	r18, 7
    210e:	53 95       	inc	r21
    2110:	44 0f       	add	r20, r20
    2112:	55 1f       	adc	r21, r21
    2114:	44 0f       	add	r20, r20
    2116:	55 1f       	adc	r21, r21
    2118:	7a 01       	movw	r14, r20
    211a:	00 27       	eor	r16, r16
    211c:	f7 fc       	sbrc	r15, 7
    211e:	00 95       	com	r16
    2120:	10 2f       	mov	r17, r16
    2122:	49 81       	ldd	r20, Y+1	; 0x01
    2124:	28 e8       	ldi	r18, 0x88	; 136
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	24 1b       	sub	r18, r20
    212a:	31 09       	sbc	r19, r1
    212c:	47 fd       	sbrc	r20, 7
    212e:	33 95       	inc	r19
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	44 27       	eor	r20, r20
    213a:	37 fd       	sbrc	r19, 7
    213c:	40 95       	com	r20
    213e:	54 2f       	mov	r21, r20
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	bc 01       	movw	r22, r24
    2144:	88 27       	eor	r24, r24
    2146:	77 fd       	sbrc	r23, 7
    2148:	80 95       	com	r24
    214a:	98 2f       	mov	r25, r24
    214c:	1f 92       	push	r1
    214e:	1f 92       	push	r1
    2150:	1f 92       	push	r1
    2152:	e4 eb       	ldi	r30, 0xB4	; 180
    2154:	ef 93       	push	r30
    2156:	a1 2c       	mov	r10, r1
    2158:	b1 2c       	mov	r11, r1
    215a:	65 01       	movw	r12, r10
    215c:	60 d2       	rcall	.+1216   	; 0x261e <_Z3maplllll>
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cb 01       	movw	r24, r22
    2168:	df 91       	pop	r29
}
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	df 90       	pop	r13
    2176:	cf 90       	pop	r12
    2178:	bf 90       	pop	r11
    217a:	af 90       	pop	r10
    217c:	08 95       	ret

0000217e <_ZN14HardwareSerial9availableEv>:
    217e:	fc 01       	movw	r30, r24
    2180:	24 85       	ldd	r18, Z+12	; 0x0c
    2182:	35 85       	ldd	r19, Z+13	; 0x0d
    2184:	f9 01       	movw	r30, r18
    2186:	e0 5c       	subi	r30, 0xC0	; 192
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	f9 01       	movw	r30, r18
    2190:	ee 5b       	subi	r30, 0xBE	; 190
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	20 81       	ld	r18, Z
    2196:	31 81       	ldd	r19, Z+1	; 0x01
    2198:	82 1b       	sub	r24, r18
    219a:	93 0b       	sbc	r25, r19
    219c:	8f 73       	andi	r24, 0x3F	; 63
    219e:	99 27       	eor	r25, r25
    21a0:	08 95       	ret

000021a2 <_ZN14HardwareSerial4peekEv>:
    21a2:	fc 01       	movw	r30, r24
    21a4:	84 85       	ldd	r24, Z+12	; 0x0c
    21a6:	95 85       	ldd	r25, Z+13	; 0x0d
    21a8:	fc 01       	movw	r30, r24
    21aa:	e0 5c       	subi	r30, 0xC0	; 192
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	40 81       	ld	r20, Z
    21b0:	51 81       	ldd	r21, Z+1	; 0x01
    21b2:	fc 01       	movw	r30, r24
    21b4:	ee 5b       	subi	r30, 0xBE	; 190
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	20 81       	ld	r18, Z
    21ba:	31 81       	ldd	r19, Z+1	; 0x01
    21bc:	42 17       	cp	r20, r18
    21be:	53 07       	cpc	r21, r19
    21c0:	41 f0       	breq	.+16     	; 0x21d2 <_ZN14HardwareSerial4peekEv+0x30>
    21c2:	01 90       	ld	r0, Z+
    21c4:	f0 81       	ld	r31, Z
    21c6:	e0 2d       	mov	r30, r0
    21c8:	e8 0f       	add	r30, r24
    21ca:	f9 1f       	adc	r31, r25
    21cc:	80 81       	ld	r24, Z
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	08 95       	ret
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	9f ef       	ldi	r25, 0xFF	; 255
    21d6:	08 95       	ret

000021d8 <_ZN14HardwareSerial4readEv>:
    21d8:	fc 01       	movw	r30, r24
    21da:	84 85       	ldd	r24, Z+12	; 0x0c
    21dc:	95 85       	ldd	r25, Z+13	; 0x0d
    21de:	fc 01       	movw	r30, r24
    21e0:	e0 5c       	subi	r30, 0xC0	; 192
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	40 81       	ld	r20, Z
    21e6:	51 81       	ldd	r21, Z+1	; 0x01
    21e8:	fc 01       	movw	r30, r24
    21ea:	ee 5b       	subi	r30, 0xBE	; 190
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	20 81       	ld	r18, Z
    21f0:	31 81       	ldd	r19, Z+1	; 0x01
    21f2:	42 17       	cp	r20, r18
    21f4:	53 07       	cpc	r21, r19
    21f6:	79 f0       	breq	.+30     	; 0x2216 <_ZN14HardwareSerial4readEv+0x3e>
    21f8:	a0 81       	ld	r26, Z
    21fa:	b1 81       	ldd	r27, Z+1	; 0x01
    21fc:	a8 0f       	add	r26, r24
    21fe:	b9 1f       	adc	r27, r25
    2200:	8c 91       	ld	r24, X
    2202:	20 81       	ld	r18, Z
    2204:	31 81       	ldd	r19, Z+1	; 0x01
    2206:	2f 5f       	subi	r18, 0xFF	; 255
    2208:	3f 4f       	sbci	r19, 0xFF	; 255
    220a:	2f 73       	andi	r18, 0x3F	; 63
    220c:	33 27       	eor	r19, r19
    220e:	31 83       	std	Z+1, r19	; 0x01
    2210:	20 83       	st	Z, r18
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	08 95       	ret
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	9f ef       	ldi	r25, 0xFF	; 255
    221a:	08 95       	ret

0000221c <_ZN14HardwareSerial5flushEv>:
    221c:	fc 01       	movw	r30, r24
    221e:	81 a1       	ldd	r24, Z+33	; 0x21
    2220:	88 23       	and	r24, r24
    2222:	29 f0       	breq	.+10     	; 0x222e <_ZN14HardwareSerial5flushEv+0x12>
    2224:	a4 89       	ldd	r26, Z+20	; 0x14
    2226:	b5 89       	ldd	r27, Z+21	; 0x15
    2228:	8c 91       	ld	r24, X
    222a:	86 ff       	sbrs	r24, 6
    222c:	fb cf       	rjmp	.-10     	; 0x2224 <_ZN14HardwareSerial5flushEv+0x8>
    222e:	11 a2       	std	Z+33, r1	; 0x21
    2230:	08 95       	ret

00002232 <_ZN14HardwareSerial5writeEh>:
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	fc 01       	movw	r30, r24
    2238:	26 85       	ldd	r18, Z+14	; 0x0e
    223a:	37 85       	ldd	r19, Z+15	; 0x0f
    223c:	d9 01       	movw	r26, r18
    223e:	a0 5c       	subi	r26, 0xC0	; 192
    2240:	bf 4f       	sbci	r27, 0xFF	; 255
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	11 97       	sbiw	r26, 0x01	; 1
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	8f 73       	andi	r24, 0x3F	; 63
    224c:	99 27       	eor	r25, r25
    224e:	e9 01       	movw	r28, r18
    2250:	ce 5b       	subi	r28, 0xBE	; 190
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	48 81       	ld	r20, Y
    2256:	59 81       	ldd	r21, Y+1	; 0x01
    2258:	84 17       	cp	r24, r20
    225a:	95 07       	cpc	r25, r21
    225c:	d9 f3       	breq	.-10     	; 0x2254 <_ZN14HardwareSerial5writeEh+0x22>
    225e:	0d 90       	ld	r0, X+
    2260:	bc 91       	ld	r27, X
    2262:	a0 2d       	mov	r26, r0
    2264:	a2 0f       	add	r26, r18
    2266:	b3 1f       	adc	r27, r19
    2268:	6c 93       	st	X, r22
    226a:	a6 85       	ldd	r26, Z+14	; 0x0e
    226c:	b7 85       	ldd	r27, Z+15	; 0x0f
    226e:	a0 5c       	subi	r26, 0xC0	; 192
    2270:	bf 4f       	sbci	r27, 0xFF	; 255
    2272:	11 96       	adiw	r26, 0x01	; 1
    2274:	9c 93       	st	X, r25
    2276:	8e 93       	st	-X, r24
    2278:	a6 89       	ldd	r26, Z+22	; 0x16
    227a:	b7 89       	ldd	r27, Z+23	; 0x17
    227c:	2c 91       	ld	r18, X
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	07 8c       	ldd	r0, Z+31	; 0x1f
    2284:	02 c0       	rjmp	.+4      	; 0x228a <_ZN14HardwareSerial5writeEh+0x58>
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	0a 94       	dec	r0
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <_ZN14HardwareSerial5writeEh+0x54>
    228e:	28 2b       	or	r18, r24
    2290:	2c 93       	st	X, r18
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	81 a3       	std	Z+33, r24	; 0x21
    2296:	04 88       	ldd	r0, Z+20	; 0x14
    2298:	f5 89       	ldd	r31, Z+21	; 0x15
    229a:	e0 2d       	mov	r30, r0
    229c:	80 81       	ld	r24, Z
    229e:	80 64       	ori	r24, 0x40	; 64
    22a0:	80 83       	st	Z, r24
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <_Z11serialEventv>:
    22ac:	08 95       	ret

000022ae <__vector_18>:
    22ae:	1f 92       	push	r1
    22b0:	0f 92       	push	r0
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	0f 92       	push	r0
    22b6:	11 24       	eor	r1, r1
    22b8:	2f 93       	push	r18
    22ba:	3f 93       	push	r19
    22bc:	4f 93       	push	r20
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	ef 93       	push	r30
    22c4:	ff 93       	push	r31
    22c6:	80 91 c0 00 	lds	r24, 0x00C0
    22ca:	82 fd       	sbrc	r24, 2
    22cc:	1c c0       	rjmp	.+56     	; 0x2306 <__vector_18+0x58>
    22ce:	40 91 c6 00 	lds	r20, 0x00C6
    22d2:	80 91 8d 05 	lds	r24, 0x058D
    22d6:	90 91 8e 05 	lds	r25, 0x058E
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	8f 73       	andi	r24, 0x3F	; 63
    22de:	99 27       	eor	r25, r25
    22e0:	20 91 8f 05 	lds	r18, 0x058F
    22e4:	30 91 90 05 	lds	r19, 0x0590
    22e8:	82 17       	cp	r24, r18
    22ea:	93 07       	cpc	r25, r19
    22ec:	71 f0       	breq	.+28     	; 0x230a <__vector_18+0x5c>
    22ee:	e0 91 8d 05 	lds	r30, 0x058D
    22f2:	f0 91 8e 05 	lds	r31, 0x058E
    22f6:	e3 5b       	subi	r30, 0xB3	; 179
    22f8:	fa 4f       	sbci	r31, 0xFA	; 250
    22fa:	40 83       	st	Z, r20
    22fc:	90 93 8e 05 	sts	0x058E, r25
    2300:	80 93 8d 05 	sts	0x058D, r24
    2304:	02 c0       	rjmp	.+4      	; 0x230a <__vector_18+0x5c>
    2306:	80 91 c6 00 	lds	r24, 0x00C6
    230a:	ff 91       	pop	r31
    230c:	ef 91       	pop	r30
    230e:	9f 91       	pop	r25
    2310:	8f 91       	pop	r24
    2312:	4f 91       	pop	r20
    2314:	3f 91       	pop	r19
    2316:	2f 91       	pop	r18
    2318:	0f 90       	pop	r0
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	0f 90       	pop	r0
    231e:	1f 90       	pop	r1
    2320:	18 95       	reti

00002322 <_Z14serialEventRunv>:
    2322:	87 ee       	ldi	r24, 0xE7	; 231
    2324:	94 e0       	ldi	r25, 0x04	; 4
    2326:	2b df       	rcall	.-426    	; 0x217e <_ZN14HardwareSerial9availableEv>
    2328:	89 2b       	or	r24, r25
    232a:	09 f0       	breq	.+2      	; 0x232e <_Z14serialEventRunv+0xc>
    232c:	bf cf       	rjmp	.-130    	; 0x22ac <_Z11serialEventv>
    232e:	08 95       	ret

00002330 <__vector_19>:
    2330:	1f 92       	push	r1
    2332:	0f 92       	push	r0
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	0f 92       	push	r0
    2338:	11 24       	eor	r1, r1
    233a:	2f 93       	push	r18
    233c:	3f 93       	push	r19
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	ef 93       	push	r30
    2344:	ff 93       	push	r31
    2346:	20 91 49 05 	lds	r18, 0x0549
    234a:	30 91 4a 05 	lds	r19, 0x054A
    234e:	80 91 4b 05 	lds	r24, 0x054B
    2352:	90 91 4c 05 	lds	r25, 0x054C
    2356:	28 17       	cp	r18, r24
    2358:	39 07       	cpc	r19, r25
    235a:	31 f4       	brne	.+12     	; 0x2368 <__vector_19+0x38>
    235c:	80 91 c1 00 	lds	r24, 0x00C1
    2360:	8f 7d       	andi	r24, 0xDF	; 223
    2362:	80 93 c1 00 	sts	0x00C1, r24
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <__vector_19+0x60>
    2368:	e0 91 4b 05 	lds	r30, 0x054B
    236c:	f0 91 4c 05 	lds	r31, 0x054C
    2370:	e7 5f       	subi	r30, 0xF7	; 247
    2372:	fa 4f       	sbci	r31, 0xFA	; 250
    2374:	20 81       	ld	r18, Z
    2376:	80 91 4b 05 	lds	r24, 0x054B
    237a:	90 91 4c 05 	lds	r25, 0x054C
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	8f 73       	andi	r24, 0x3F	; 63
    2382:	99 27       	eor	r25, r25
    2384:	90 93 4c 05 	sts	0x054C, r25
    2388:	80 93 4b 05 	sts	0x054B, r24
    238c:	20 93 c6 00 	sts	0x00C6, r18
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	9f 91       	pop	r25
    2396:	8f 91       	pop	r24
    2398:	3f 91       	pop	r19
    239a:	2f 91       	pop	r18
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	0f 90       	pop	r0
    23a2:	1f 90       	pop	r1
    23a4:	18 95       	reti

000023a6 <_ZN14HardwareSerial5beginEm>:
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	ec 01       	movw	r28, r24
    23b4:	6a 01       	movw	r12, r20
    23b6:	7b 01       	movw	r14, r22
    23b8:	41 15       	cp	r20, r1
    23ba:	81 ee       	ldi	r24, 0xE1	; 225
    23bc:	58 07       	cpc	r21, r24
    23be:	61 05       	cpc	r22, r1
    23c0:	71 05       	cpc	r23, r1
    23c2:	f1 f0       	breq	.+60     	; 0x2400 <_ZN14HardwareSerial5beginEm+0x5a>
    23c4:	ec 89       	ldd	r30, Y+20	; 0x14
    23c6:	fd 89       	ldd	r31, Y+21	; 0x15
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	08 a0       	ldd	r0, Y+32	; 0x20
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <_ZN14HardwareSerial5beginEm+0x2e>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <_ZN14HardwareSerial5beginEm+0x2a>
    23d8:	80 83       	st	Z, r24
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	79 e0       	ldi	r23, 0x09	; 9
    23de:	8d e3       	ldi	r24, 0x3D	; 61
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a7 01       	movw	r20, r14
    23e4:	96 01       	movw	r18, r12
    23e6:	c0 d3       	rcall	.+1920   	; 0x2b68 <__udivmodsi4>
    23e8:	21 50       	subi	r18, 0x01	; 1
    23ea:	31 09       	sbc	r19, r1
    23ec:	41 09       	sbc	r20, r1
    23ee:	51 09       	sbc	r21, r1
    23f0:	56 95       	lsr	r21
    23f2:	47 95       	ror	r20
    23f4:	37 95       	ror	r19
    23f6:	27 95       	ror	r18
    23f8:	21 15       	cp	r18, r1
    23fa:	80 e1       	ldi	r24, 0x10	; 16
    23fc:	38 07       	cpc	r19, r24
    23fe:	90 f0       	brcs	.+36     	; 0x2424 <_ZN14HardwareSerial5beginEm+0x7e>
    2400:	ec 89       	ldd	r30, Y+20	; 0x14
    2402:	fd 89       	ldd	r31, Y+21	; 0x15
    2404:	10 82       	st	Z, r1
    2406:	60 e8       	ldi	r22, 0x80	; 128
    2408:	74 e8       	ldi	r23, 0x84	; 132
    240a:	8e e1       	ldi	r24, 0x1E	; 30
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a7 01       	movw	r20, r14
    2410:	96 01       	movw	r18, r12
    2412:	aa d3       	rcall	.+1876   	; 0x2b68 <__udivmodsi4>
    2414:	21 50       	subi	r18, 0x01	; 1
    2416:	31 09       	sbc	r19, r1
    2418:	41 09       	sbc	r20, r1
    241a:	51 09       	sbc	r21, r1
    241c:	56 95       	lsr	r21
    241e:	47 95       	ror	r20
    2420:	37 95       	ror	r19
    2422:	27 95       	ror	r18
    2424:	e8 89       	ldd	r30, Y+16	; 0x10
    2426:	f9 89       	ldd	r31, Y+17	; 0x11
    2428:	30 83       	st	Z, r19
    242a:	ea 89       	ldd	r30, Y+18	; 0x12
    242c:	fb 89       	ldd	r31, Y+19	; 0x13
    242e:	20 83       	st	Z, r18
    2430:	19 a2       	std	Y+33, r1	; 0x21
    2432:	ee 89       	ldd	r30, Y+22	; 0x16
    2434:	ff 89       	ldd	r31, Y+23	; 0x17
    2436:	40 81       	ld	r20, Z
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9c 01       	movw	r18, r24
    243e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <_ZN14HardwareSerial5beginEm+0xa0>
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <_ZN14HardwareSerial5beginEm+0x9c>
    244a:	42 2b       	or	r20, r18
    244c:	40 83       	st	Z, r20
    244e:	ee 89       	ldd	r30, Y+22	; 0x16
    2450:	ff 89       	ldd	r31, Y+23	; 0x17
    2452:	40 81       	ld	r20, Z
    2454:	9c 01       	movw	r18, r24
    2456:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2458:	02 c0       	rjmp	.+4      	; 0x245e <_ZN14HardwareSerial5beginEm+0xb8>
    245a:	22 0f       	add	r18, r18
    245c:	33 1f       	adc	r19, r19
    245e:	0a 94       	dec	r0
    2460:	e2 f7       	brpl	.-8      	; 0x245a <_ZN14HardwareSerial5beginEm+0xb4>
    2462:	42 2b       	or	r20, r18
    2464:	40 83       	st	Z, r20
    2466:	ee 89       	ldd	r30, Y+22	; 0x16
    2468:	ff 89       	ldd	r31, Y+23	; 0x17
    246a:	40 81       	ld	r20, Z
    246c:	9c 01       	movw	r18, r24
    246e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <_ZN14HardwareSerial5beginEm+0xd0>
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <_ZN14HardwareSerial5beginEm+0xcc>
    247a:	42 2b       	or	r20, r18
    247c:	40 83       	st	Z, r20
    247e:	ee 89       	ldd	r30, Y+22	; 0x16
    2480:	ff 89       	ldd	r31, Y+23	; 0x17
    2482:	20 81       	ld	r18, Z
    2484:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2486:	02 c0       	rjmp	.+4      	; 0x248c <_ZN14HardwareSerial5beginEm+0xe6>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	0a 94       	dec	r0
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <_ZN14HardwareSerial5beginEm+0xe2>
    2490:	80 95       	com	r24
    2492:	82 23       	and	r24, r18
    2494:	80 83       	st	Z, r24
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
    24a2:	08 95       	ret

000024a4 <_GLOBAL__sub_I_rx_buffer>:
    24a4:	10 92 ea 04 	sts	0x04EA, r1
    24a8:	10 92 e9 04 	sts	0x04E9, r1
    24ac:	88 ee       	ldi	r24, 0xE8	; 232
    24ae:	93 e0       	ldi	r25, 0x03	; 3
    24b0:	a0 e0       	ldi	r26, 0x00	; 0
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	80 93 eb 04 	sts	0x04EB, r24
    24b8:	90 93 ec 04 	sts	0x04EC, r25
    24bc:	a0 93 ed 04 	sts	0x04ED, r26
    24c0:	b0 93 ee 04 	sts	0x04EE, r27
    24c4:	85 eb       	ldi	r24, 0xB5	; 181
    24c6:	92 e0       	ldi	r25, 0x02	; 2
    24c8:	90 93 e8 04 	sts	0x04E8, r25
    24cc:	80 93 e7 04 	sts	0x04E7, r24
    24d0:	8d e4       	ldi	r24, 0x4D	; 77
    24d2:	95 e0       	ldi	r25, 0x05	; 5
    24d4:	90 93 f4 04 	sts	0x04F4, r25
    24d8:	80 93 f3 04 	sts	0x04F3, r24
    24dc:	89 e0       	ldi	r24, 0x09	; 9
    24de:	95 e0       	ldi	r25, 0x05	; 5
    24e0:	90 93 f6 04 	sts	0x04F6, r25
    24e4:	80 93 f5 04 	sts	0x04F5, r24
    24e8:	85 ec       	ldi	r24, 0xC5	; 197
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	90 93 f8 04 	sts	0x04F8, r25
    24f0:	80 93 f7 04 	sts	0x04F7, r24
    24f4:	84 ec       	ldi	r24, 0xC4	; 196
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	90 93 fa 04 	sts	0x04FA, r25
    24fc:	80 93 f9 04 	sts	0x04F9, r24
    2500:	80 ec       	ldi	r24, 0xC0	; 192
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	90 93 fc 04 	sts	0x04FC, r25
    2508:	80 93 fb 04 	sts	0x04FB, r24
    250c:	81 ec       	ldi	r24, 0xC1	; 193
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	90 93 fe 04 	sts	0x04FE, r25
    2514:	80 93 fd 04 	sts	0x04FD, r24
    2518:	82 ec       	ldi	r24, 0xC2	; 194
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	90 93 00 05 	sts	0x0500, r25
    2520:	80 93 ff 04 	sts	0x04FF, r24
    2524:	86 ec       	ldi	r24, 0xC6	; 198
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	90 93 02 05 	sts	0x0502, r25
    252c:	80 93 01 05 	sts	0x0501, r24
    2530:	84 e0       	ldi	r24, 0x04	; 4
    2532:	80 93 03 05 	sts	0x0503, r24
    2536:	83 e0       	ldi	r24, 0x03	; 3
    2538:	80 93 04 05 	sts	0x0504, r24
    253c:	87 e0       	ldi	r24, 0x07	; 7
    253e:	80 93 05 05 	sts	0x0505, r24
    2542:	85 e0       	ldi	r24, 0x05	; 5
    2544:	80 93 06 05 	sts	0x0506, r24
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 07 05 	sts	0x0507, r24
    254e:	08 95       	ret

00002550 <_ZN5Print5writeEPKhj>:
    2550:	cf 92       	push	r12
    2552:	df 92       	push	r13
    2554:	ef 92       	push	r14
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	6c 01       	movw	r12, r24
    2562:	7a 01       	movw	r14, r20
    2564:	eb 01       	movw	r28, r22
    2566:	e6 0e       	add	r14, r22
    2568:	f7 1e       	adc	r15, r23
    256a:	00 e0       	ldi	r16, 0x00	; 0
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	ce 15       	cp	r28, r14
    2570:	df 05       	cpc	r29, r15
    2572:	61 f0       	breq	.+24     	; 0x258c <_ZN5Print5writeEPKhj+0x3c>
    2574:	69 91       	ld	r22, Y+
    2576:	d6 01       	movw	r26, r12
    2578:	ed 91       	ld	r30, X+
    257a:	fc 91       	ld	r31, X
    257c:	01 90       	ld	r0, Z+
    257e:	f0 81       	ld	r31, Z
    2580:	e0 2d       	mov	r30, r0
    2582:	c6 01       	movw	r24, r12
    2584:	09 95       	icall
    2586:	08 0f       	add	r16, r24
    2588:	19 1f       	adc	r17, r25
    258a:	f1 cf       	rjmp	.-30     	; 0x256e <_ZN5Print5writeEPKhj+0x1e>
    258c:	c8 01       	movw	r24, r16
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	df 90       	pop	r13
    259c:	cf 90       	pop	r12
    259e:	08 95       	ret

000025a0 <_ZN5Print5writeEPKc>:
    25a0:	61 15       	cp	r22, r1
    25a2:	71 05       	cpc	r23, r1
    25a4:	81 f0       	breq	.+32     	; 0x25c6 <_ZN5Print5writeEPKc+0x26>
    25a6:	db 01       	movw	r26, r22
    25a8:	0d 90       	ld	r0, X+
    25aa:	00 20       	and	r0, r0
    25ac:	e9 f7       	brne	.-6      	; 0x25a8 <_ZN5Print5writeEPKc+0x8>
    25ae:	ad 01       	movw	r20, r26
    25b0:	41 50       	subi	r20, 0x01	; 1
    25b2:	51 09       	sbc	r21, r1
    25b4:	46 1b       	sub	r20, r22
    25b6:	57 0b       	sbc	r21, r23
    25b8:	dc 01       	movw	r26, r24
    25ba:	ed 91       	ld	r30, X+
    25bc:	fc 91       	ld	r31, X
    25be:	02 80       	ldd	r0, Z+2	; 0x02
    25c0:	f3 81       	ldd	r31, Z+3	; 0x03
    25c2:	e0 2d       	mov	r30, r0
    25c4:	09 94       	ijmp
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	08 95       	ret

000025cc <_ZN5Print5printEc>:
    25cc:	dc 01       	movw	r26, r24
    25ce:	ed 91       	ld	r30, X+
    25d0:	fc 91       	ld	r31, X
    25d2:	01 90       	ld	r0, Z+
    25d4:	f0 81       	ld	r31, Z
    25d6:	e0 2d       	mov	r30, r0
    25d8:	09 94       	ijmp

000025da <_ZN5Print7printlnEv>:
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	ec 01       	movw	r28, r24
    25e4:	6d e0       	ldi	r22, 0x0D	; 13
    25e6:	f2 df       	rcall	.-28     	; 0x25cc <_ZN5Print5printEc>
    25e8:	8c 01       	movw	r16, r24
    25ea:	6a e0       	ldi	r22, 0x0A	; 10
    25ec:	ce 01       	movw	r24, r28
    25ee:	ee df       	rcall	.-36     	; 0x25cc <_ZN5Print5printEc>
    25f0:	80 0f       	add	r24, r16
    25f2:	91 1f       	adc	r25, r17
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	08 95       	ret

000025fe <_ZN5Print7printlnEPKc>:
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ec 01       	movw	r28, r24
    2608:	cb df       	rcall	.-106    	; 0x25a0 <_ZN5Print5writeEPKc>
    260a:	8c 01       	movw	r16, r24
    260c:	ce 01       	movw	r24, r28
    260e:	e5 df       	rcall	.-54     	; 0x25da <_ZN5Print7printlnEv>
    2610:	80 0f       	add	r24, r16
    2612:	91 1f       	adc	r25, r17
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	08 95       	ret

0000261e <_Z3maplllll>:
    261e:	4f 92       	push	r4
    2620:	5f 92       	push	r5
    2622:	6f 92       	push	r6
    2624:	7f 92       	push	r7
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	29 01       	movw	r4, r18
    2640:	3a 01       	movw	r6, r20
    2642:	62 1b       	sub	r22, r18
    2644:	73 0b       	sbc	r23, r19
    2646:	84 0b       	sbc	r24, r20
    2648:	95 0b       	sbc	r25, r21
    264a:	29 89       	ldd	r18, Y+17	; 0x11
    264c:	3a 89       	ldd	r19, Y+18	; 0x12
    264e:	4b 89       	ldd	r20, Y+19	; 0x13
    2650:	5c 89       	ldd	r21, Y+20	; 0x14
    2652:	2a 19       	sub	r18, r10
    2654:	3b 09       	sbc	r19, r11
    2656:	4c 09       	sbc	r20, r12
    2658:	5d 09       	sbc	r21, r13
    265a:	29 8b       	std	Y+17, r18	; 0x11
    265c:	3a 8b       	std	Y+18, r19	; 0x12
    265e:	4b 8b       	std	Y+19, r20	; 0x13
    2660:	5c 8b       	std	Y+20, r21	; 0x14
    2662:	9b 01       	movw	r18, r22
    2664:	ac 01       	movw	r20, r24
    2666:	69 89       	ldd	r22, Y+17	; 0x11
    2668:	7a 89       	ldd	r23, Y+18	; 0x12
    266a:	8b 89       	ldd	r24, Y+19	; 0x13
    266c:	9c 89       	ldd	r25, Y+20	; 0x14
    266e:	4e d2       	rcall	.+1180   	; 0x2b0c <__mulsi3>
    2670:	e4 18       	sub	r14, r4
    2672:	f5 08       	sbc	r15, r5
    2674:	06 09       	sbc	r16, r6
    2676:	17 09       	sbc	r17, r7
    2678:	a8 01       	movw	r20, r16
    267a:	97 01       	movw	r18, r14
    267c:	97 d2       	rcall	.+1326   	; 0x2bac <__divmodsi4>
    267e:	2a 0d       	add	r18, r10
    2680:	3b 1d       	adc	r19, r11
    2682:	4c 1d       	adc	r20, r12
    2684:	5d 1d       	adc	r21, r13
    2686:	ca 01       	movw	r24, r20
    2688:	b9 01       	movw	r22, r18
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	bf 90       	pop	r11
    269c:	af 90       	pop	r10
    269e:	7f 90       	pop	r7
    26a0:	6f 90       	pop	r6
    26a2:	5f 90       	pop	r5
    26a4:	4f 90       	pop	r4
    26a6:	08 95       	ret

000026a8 <main>:
/*
 * notmain.cpp
 *
 *  Created on: 23 avr. 2013
 *      Author: quentin
    26a8:	bd d0       	rcall	.+378    	; 0x2824 <init>
    26aa:	6f d8       	rcall	.-3874   	; 0x178a <setup>
 */

#include "params.h"
#include "tools.h"
#include "states/state_types.h"
#include "states/state_hardinit.h"
    26ac:	c1 e9       	ldi	r28, 0x91	; 145
    26ae:	d1 e1       	ldi	r29, 0x11	; 17
#include "states/state_blink.h"
#include "states/state_Menu_principal.h"
#include "states/state_Menu_servo.h"
#include "states/state_Menu_pwm.h"
    26b0:	9b d8       	rcall	.-3786   	; 0x17e8 <loop>
    26b2:	20 97       	sbiw	r28, 0x00	; 0
#include "tools.h"
#include "states/state_types.h"
#include "states/state_hardinit.h"
#include "states/state_blink.h"
#include "states/state_Menu_principal.h"
#include "states/state_Menu_servo.h"
    26b4:	e9 f3       	breq	.-6      	; 0x26b0 <main+0x8>
    26b6:	35 de       	rcall	.-918    	; 0x2322 <_Z14serialEventRunv>
#include "states/state_Menu_pwm.h"
    26b8:	fb cf       	rjmp	.-10     	; 0x26b0 <main+0x8>

000026ba <__cxa_guard_acquire>:
    26ba:	fc 01       	movw	r30, r24
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	20 81       	ld	r18, Z
    26c2:	22 23       	and	r18, r18
    26c4:	11 f0       	breq	.+4      	; 0x26ca <__cxa_guard_acquire+0x10>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	08 95       	ret

000026cc <__cxa_guard_release>:
    26cc:	21 e0       	ldi	r18, 0x01	; 1
    26ce:	fc 01       	movw	r30, r24
    26d0:	20 83       	st	Z, r18
    26d2:	08 95       	ret

000026d4 <__vector_16>:
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	0f 92       	push	r0
    26dc:	11 24       	eor	r1, r1
    26de:	2f 93       	push	r18
    26e0:	3f 93       	push	r19
    26e2:	8f 93       	push	r24
    26e4:	9f 93       	push	r25
    26e6:	af 93       	push	r26
    26e8:	bf 93       	push	r27
    26ea:	80 91 92 05 	lds	r24, 0x0592
    26ee:	90 91 93 05 	lds	r25, 0x0593
    26f2:	a0 91 94 05 	lds	r26, 0x0594
    26f6:	b0 91 95 05 	lds	r27, 0x0595
    26fa:	30 91 91 05 	lds	r19, 0x0591
    26fe:	23 e0       	ldi	r18, 0x03	; 3
    2700:	23 0f       	add	r18, r19
    2702:	2d 37       	cpi	r18, 0x7D	; 125
    2704:	20 f4       	brcc	.+8      	; 0x270e <__vector_16+0x3a>
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	a1 1d       	adc	r26, r1
    270a:	b1 1d       	adc	r27, r1
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <__vector_16+0x44>
    270e:	26 e8       	ldi	r18, 0x86	; 134
    2710:	23 0f       	add	r18, r19
    2712:	02 96       	adiw	r24, 0x02	; 2
    2714:	a1 1d       	adc	r26, r1
    2716:	b1 1d       	adc	r27, r1
    2718:	20 93 91 05 	sts	0x0591, r18
    271c:	80 93 92 05 	sts	0x0592, r24
    2720:	90 93 93 05 	sts	0x0593, r25
    2724:	a0 93 94 05 	sts	0x0594, r26
    2728:	b0 93 95 05 	sts	0x0595, r27
    272c:	80 91 96 05 	lds	r24, 0x0596
    2730:	90 91 97 05 	lds	r25, 0x0597
    2734:	a0 91 98 05 	lds	r26, 0x0598
    2738:	b0 91 99 05 	lds	r27, 0x0599
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	a1 1d       	adc	r26, r1
    2740:	b1 1d       	adc	r27, r1
    2742:	80 93 96 05 	sts	0x0596, r24
    2746:	90 93 97 05 	sts	0x0597, r25
    274a:	a0 93 98 05 	sts	0x0598, r26
    274e:	b0 93 99 05 	sts	0x0599, r27
    2752:	bf 91       	pop	r27
    2754:	af 91       	pop	r26
    2756:	9f 91       	pop	r25
    2758:	8f 91       	pop	r24
    275a:	3f 91       	pop	r19
    275c:	2f 91       	pop	r18
    275e:	0f 90       	pop	r0
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	0f 90       	pop	r0
    2764:	1f 90       	pop	r1
    2766:	18 95       	reti

00002768 <millis>:
    2768:	2f b7       	in	r18, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	60 91 92 05 	lds	r22, 0x0592
    2770:	70 91 93 05 	lds	r23, 0x0593
    2774:	80 91 94 05 	lds	r24, 0x0594
    2778:	90 91 95 05 	lds	r25, 0x0595
    277c:	2f bf       	out	0x3f, r18	; 63
    277e:	08 95       	ret

00002780 <micros>:
    2780:	3f b7       	in	r19, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	80 91 96 05 	lds	r24, 0x0596
    2788:	90 91 97 05 	lds	r25, 0x0597
    278c:	a0 91 98 05 	lds	r26, 0x0598
    2790:	b0 91 99 05 	lds	r27, 0x0599
    2794:	26 b5       	in	r18, 0x26	; 38
    2796:	a8 9b       	sbis	0x15, 0	; 21
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <micros+0x24>
    279a:	2f 3f       	cpi	r18, 0xFF	; 255
    279c:	19 f0       	breq	.+6      	; 0x27a4 <micros+0x24>
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	a1 1d       	adc	r26, r1
    27a2:	b1 1d       	adc	r27, r1
    27a4:	3f bf       	out	0x3f, r19	; 63
    27a6:	66 27       	eor	r22, r22
    27a8:	78 2f       	mov	r23, r24
    27aa:	89 2f       	mov	r24, r25
    27ac:	9a 2f       	mov	r25, r26
    27ae:	62 0f       	add	r22, r18
    27b0:	71 1d       	adc	r23, r1
    27b2:	81 1d       	adc	r24, r1
    27b4:	91 1d       	adc	r25, r1
    27b6:	42 e0       	ldi	r20, 0x02	; 2
    27b8:	66 0f       	add	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	88 1f       	adc	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	4a 95       	dec	r20
    27c2:	d1 f7       	brne	.-12     	; 0x27b8 <micros+0x38>
    27c4:	08 95       	ret

000027c6 <delay>:
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	6b 01       	movw	r12, r22
    27d4:	7c 01       	movw	r14, r24
    27d6:	d4 df       	rcall	.-88     	; 0x2780 <micros>
    27d8:	eb 01       	movw	r28, r22
    27da:	c1 14       	cp	r12, r1
    27dc:	d1 04       	cpc	r13, r1
    27de:	e1 04       	cpc	r14, r1
    27e0:	f1 04       	cpc	r15, r1
    27e2:	71 f0       	breq	.+28     	; 0x2800 <delay+0x3a>
    27e4:	cd df       	rcall	.-102    	; 0x2780 <micros>
    27e6:	6c 1b       	sub	r22, r28
    27e8:	7d 0b       	sbc	r23, r29
    27ea:	68 3e       	cpi	r22, 0xE8	; 232
    27ec:	73 40       	sbci	r23, 0x03	; 3
    27ee:	a8 f3       	brcs	.-22     	; 0x27da <delay+0x14>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	c8 1a       	sub	r12, r24
    27f4:	d1 08       	sbc	r13, r1
    27f6:	e1 08       	sbc	r14, r1
    27f8:	f1 08       	sbc	r15, r1
    27fa:	c8 51       	subi	r28, 0x18	; 24
    27fc:	dc 4f       	sbci	r29, 0xFC	; 252
    27fe:	ed cf       	rjmp	.-38     	; 0x27da <delay+0x14>
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	cf 90       	pop	r12
    280c:	08 95       	ret

0000280e <delayMicroseconds>:
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	39 f0       	breq	.+14     	; 0x2822 <delayMicroseconds+0x14>
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	02 97       	sbiw	r24, 0x02	; 2
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <delayMicroseconds+0x10>
    2822:	08 95       	ret

00002824 <init>:
    2824:	78 94       	sei
    2826:	84 b5       	in	r24, 0x24	; 36
    2828:	82 60       	ori	r24, 0x02	; 2
    282a:	84 bd       	out	0x24, r24	; 36
    282c:	84 b5       	in	r24, 0x24	; 36
    282e:	81 60       	ori	r24, 0x01	; 1
    2830:	84 bd       	out	0x24, r24	; 36
    2832:	85 b5       	in	r24, 0x25	; 37
    2834:	82 60       	ori	r24, 0x02	; 2
    2836:	85 bd       	out	0x25, r24	; 37
    2838:	85 b5       	in	r24, 0x25	; 37
    283a:	81 60       	ori	r24, 0x01	; 1
    283c:	85 bd       	out	0x25, r24	; 37
    283e:	ee e6       	ldi	r30, 0x6E	; 110
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	81 60       	ori	r24, 0x01	; 1
    2846:	80 83       	st	Z, r24
    2848:	e1 e8       	ldi	r30, 0x81	; 129
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	10 82       	st	Z, r1
    284e:	80 81       	ld	r24, Z
    2850:	82 60       	ori	r24, 0x02	; 2
    2852:	80 83       	st	Z, r24
    2854:	80 81       	ld	r24, Z
    2856:	81 60       	ori	r24, 0x01	; 1
    2858:	80 83       	st	Z, r24
    285a:	e0 e8       	ldi	r30, 0x80	; 128
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	81 60       	ori	r24, 0x01	; 1
    2862:	80 83       	st	Z, r24
    2864:	e1 eb       	ldi	r30, 0xB1	; 177
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	84 60       	ori	r24, 0x04	; 4
    286c:	80 83       	st	Z, r24
    286e:	e0 eb       	ldi	r30, 0xB0	; 176
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	81 60       	ori	r24, 0x01	; 1
    2876:	80 83       	st	Z, r24
    2878:	ea e7       	ldi	r30, 0x7A	; 122
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	84 60       	ori	r24, 0x04	; 4
    2880:	80 83       	st	Z, r24
    2882:	80 81       	ld	r24, Z
    2884:	82 60       	ori	r24, 0x02	; 2
    2886:	80 83       	st	Z, r24
    2888:	80 81       	ld	r24, Z
    288a:	81 60       	ori	r24, 0x01	; 1
    288c:	80 83       	st	Z, r24
    288e:	80 81       	ld	r24, Z
    2890:	80 68       	ori	r24, 0x80	; 128
    2892:	80 83       	st	Z, r24
    2894:	10 92 c1 00 	sts	0x00C1, r1
    2898:	08 95       	ret

0000289a <analogRead>:
    289a:	8e 30       	cpi	r24, 0x0E	; 14
    289c:	08 f0       	brcs	.+2      	; 0x28a0 <analogRead+0x6>
    289e:	8e 50       	subi	r24, 0x0E	; 14
    28a0:	87 70       	andi	r24, 0x07	; 7
    28a2:	20 91 62 01 	lds	r18, 0x0162
    28a6:	90 e4       	ldi	r25, 0x40	; 64
    28a8:	29 9f       	mul	r18, r25
    28aa:	90 01       	movw	r18, r0
    28ac:	11 24       	eor	r1, r1
    28ae:	82 2b       	or	r24, r18
    28b0:	80 93 7c 00 	sts	0x007C, r24
    28b4:	80 91 7a 00 	lds	r24, 0x007A
    28b8:	80 64       	ori	r24, 0x40	; 64
    28ba:	80 93 7a 00 	sts	0x007A, r24
    28be:	80 91 7a 00 	lds	r24, 0x007A
    28c2:	86 fd       	sbrc	r24, 6
    28c4:	fc cf       	rjmp	.-8      	; 0x28be <analogRead+0x24>
    28c6:	80 91 78 00 	lds	r24, 0x0078
    28ca:	20 91 79 00 	lds	r18, 0x0079
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	92 2b       	or	r25, r18
    28d2:	08 95       	ret

000028d4 <analogWrite>:
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	18 2f       	mov	r17, r24
    28dc:	eb 01       	movw	r28, r22
    28de:	61 e0       	ldi	r22, 0x01	; 1
    28e0:	7f d0       	rcall	.+254    	; 0x29e0 <pinMode>
    28e2:	20 97       	sbiw	r28, 0x00	; 0
    28e4:	11 f4       	brne	.+4      	; 0x28ea <analogWrite+0x16>
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <analogWrite+0x1e>
    28ea:	cf 3f       	cpi	r28, 0xFF	; 255
    28ec:	d1 05       	cpc	r29, r1
    28ee:	31 f4       	brne	.+12     	; 0x28fc <analogWrite+0x28>
    28f0:	61 e0       	ldi	r22, 0x01	; 1
    28f2:	81 2f       	mov	r24, r17
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	ab c0       	rjmp	.+342    	; 0x2a52 <digitalWrite>
    28fc:	e1 2f       	mov	r30, r17
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	e8 59       	subi	r30, 0x98	; 152
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	e4 91       	lpm	r30, Z
    2906:	e3 30       	cpi	r30, 0x03	; 3
    2908:	f9 f0       	breq	.+62     	; 0x2948 <analogWrite+0x74>
    290a:	48 f4       	brcc	.+18     	; 0x291e <analogWrite+0x4a>
    290c:	e1 30       	cpi	r30, 0x01	; 1
    290e:	b9 f0       	breq	.+46     	; 0x293e <analogWrite+0x6a>
    2910:	e2 30       	cpi	r30, 0x02	; 2
    2912:	a1 f5       	brne	.+104    	; 0x297c <analogWrite+0xa8>
    2914:	84 b5       	in	r24, 0x24	; 36
    2916:	80 62       	ori	r24, 0x20	; 32
    2918:	84 bd       	out	0x24, r24	; 36
    291a:	c8 bd       	out	0x28, r28	; 40
    291c:	34 c0       	rjmp	.+104    	; 0x2986 <analogWrite+0xb2>
    291e:	e6 30       	cpi	r30, 0x06	; 6
    2920:	e9 f0       	breq	.+58     	; 0x295c <analogWrite+0x88>
    2922:	e7 30       	cpi	r30, 0x07	; 7
    2924:	19 f1       	breq	.+70     	; 0x296c <analogWrite+0x98>
    2926:	e4 30       	cpi	r30, 0x04	; 4
    2928:	49 f5       	brne	.+82     	; 0x297c <analogWrite+0xa8>
    292a:	80 91 80 00 	lds	r24, 0x0080
    292e:	80 62       	ori	r24, 0x20	; 32
    2930:	80 93 80 00 	sts	0x0080, r24
    2934:	d0 93 8b 00 	sts	0x008B, r29
    2938:	c0 93 8a 00 	sts	0x008A, r28
    293c:	24 c0       	rjmp	.+72     	; 0x2986 <analogWrite+0xb2>
    293e:	84 b5       	in	r24, 0x24	; 36
    2940:	80 68       	ori	r24, 0x80	; 128
    2942:	84 bd       	out	0x24, r24	; 36
    2944:	c7 bd       	out	0x27, r28	; 39
    2946:	1f c0       	rjmp	.+62     	; 0x2986 <analogWrite+0xb2>
    2948:	80 91 80 00 	lds	r24, 0x0080
    294c:	80 68       	ori	r24, 0x80	; 128
    294e:	80 93 80 00 	sts	0x0080, r24
    2952:	d0 93 89 00 	sts	0x0089, r29
    2956:	c0 93 88 00 	sts	0x0088, r28
    295a:	15 c0       	rjmp	.+42     	; 0x2986 <analogWrite+0xb2>
    295c:	80 91 b0 00 	lds	r24, 0x00B0
    2960:	80 68       	ori	r24, 0x80	; 128
    2962:	80 93 b0 00 	sts	0x00B0, r24
    2966:	c0 93 b3 00 	sts	0x00B3, r28
    296a:	0d c0       	rjmp	.+26     	; 0x2986 <analogWrite+0xb2>
    296c:	80 91 b0 00 	lds	r24, 0x00B0
    2970:	80 62       	ori	r24, 0x20	; 32
    2972:	80 93 b0 00 	sts	0x00B0, r24
    2976:	c0 93 b4 00 	sts	0x00B4, r28
    297a:	05 c0       	rjmp	.+10     	; 0x2986 <analogWrite+0xb2>
    297c:	c0 38       	cpi	r28, 0x80	; 128
    297e:	d1 05       	cpc	r29, r1
    2980:	0c f0       	brlt	.+2      	; 0x2984 <analogWrite+0xb0>
    2982:	b6 cf       	rjmp	.-148    	; 0x28f0 <analogWrite+0x1c>
    2984:	b0 cf       	rjmp	.-160    	; 0x28e6 <analogWrite+0x12>
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	08 95       	ret

0000298e <turnOffPWM>:
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	81 f0       	breq	.+32     	; 0x29b2 <turnOffPWM+0x24>
    2992:	28 f4       	brcc	.+10     	; 0x299e <turnOffPWM+0x10>
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	99 f0       	breq	.+38     	; 0x29be <turnOffPWM+0x30>
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	a1 f0       	breq	.+40     	; 0x29c4 <turnOffPWM+0x36>
    299c:	08 95       	ret
    299e:	86 30       	cpi	r24, 0x06	; 6
    29a0:	a9 f0       	breq	.+42     	; 0x29cc <turnOffPWM+0x3e>
    29a2:	87 30       	cpi	r24, 0x07	; 7
    29a4:	b9 f0       	breq	.+46     	; 0x29d4 <turnOffPWM+0x46>
    29a6:	84 30       	cpi	r24, 0x04	; 4
    29a8:	d1 f4       	brne	.+52     	; 0x29de <turnOffPWM+0x50>
    29aa:	80 91 80 00 	lds	r24, 0x0080
    29ae:	8f 7d       	andi	r24, 0xDF	; 223
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <turnOffPWM+0x2a>
    29b2:	80 91 80 00 	lds	r24, 0x0080
    29b6:	8f 77       	andi	r24, 0x7F	; 127
    29b8:	80 93 80 00 	sts	0x0080, r24
    29bc:	08 95       	ret
    29be:	84 b5       	in	r24, 0x24	; 36
    29c0:	8f 77       	andi	r24, 0x7F	; 127
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <turnOffPWM+0x3a>
    29c4:	84 b5       	in	r24, 0x24	; 36
    29c6:	8f 7d       	andi	r24, 0xDF	; 223
    29c8:	84 bd       	out	0x24, r24	; 36
    29ca:	08 95       	ret
    29cc:	80 91 b0 00 	lds	r24, 0x00B0
    29d0:	8f 77       	andi	r24, 0x7F	; 127
    29d2:	03 c0       	rjmp	.+6      	; 0x29da <turnOffPWM+0x4c>
    29d4:	80 91 b0 00 	lds	r24, 0x00B0
    29d8:	8f 7d       	andi	r24, 0xDF	; 223
    29da:	80 93 b0 00 	sts	0x00B0, r24
    29de:	08 95       	ret

000029e0 <pinMode>:
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	fc 01       	movw	r30, r24
    29e8:	e4 58       	subi	r30, 0x84	; 132
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	24 91       	lpm	r18, Z
    29ee:	fc 01       	movw	r30, r24
    29f0:	e0 57       	subi	r30, 0x70	; 112
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	84 91       	lpm	r24, Z
    29f6:	88 23       	and	r24, r24
    29f8:	49 f1       	breq	.+82     	; 0x2a4c <pinMode+0x6c>
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	fc 01       	movw	r30, r24
    2a02:	e8 54       	subi	r30, 0x48	; 72
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	a5 91       	lpm	r26, Z+
    2a08:	b4 91       	lpm	r27, Z
    2a0a:	82 55       	subi	r24, 0x52	; 82
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	fc 01       	movw	r30, r24
    2a10:	c5 91       	lpm	r28, Z+
    2a12:	d4 91       	lpm	r29, Z
    2a14:	9f b7       	in	r25, 0x3f	; 63
    2a16:	61 11       	cpse	r22, r1
    2a18:	08 c0       	rjmp	.+16     	; 0x2a2a <pinMode+0x4a>
    2a1a:	f8 94       	cli
    2a1c:	8c 91       	ld	r24, X
    2a1e:	20 95       	com	r18
    2a20:	82 23       	and	r24, r18
    2a22:	8c 93       	st	X, r24
    2a24:	88 81       	ld	r24, Y
    2a26:	82 23       	and	r24, r18
    2a28:	0a c0       	rjmp	.+20     	; 0x2a3e <pinMode+0x5e>
    2a2a:	62 30       	cpi	r22, 0x02	; 2
    2a2c:	51 f4       	brne	.+20     	; 0x2a42 <pinMode+0x62>
    2a2e:	f8 94       	cli
    2a30:	8c 91       	ld	r24, X
    2a32:	32 2f       	mov	r19, r18
    2a34:	30 95       	com	r19
    2a36:	83 23       	and	r24, r19
    2a38:	8c 93       	st	X, r24
    2a3a:	88 81       	ld	r24, Y
    2a3c:	82 2b       	or	r24, r18
    2a3e:	88 83       	st	Y, r24
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <pinMode+0x6a>
    2a42:	f8 94       	cli
    2a44:	8c 91       	ld	r24, X
    2a46:	82 2b       	or	r24, r18
    2a48:	8c 93       	st	X, r24
    2a4a:	9f bf       	out	0x3f, r25	; 63
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	08 95       	ret

00002a52 <digitalWrite>:
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	1f 92       	push	r1
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	f9 01       	movw	r30, r18
    2a66:	e8 59       	subi	r30, 0x98	; 152
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	84 91       	lpm	r24, Z
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	e4 58       	subi	r30, 0x84	; 132
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	14 91       	lpm	r17, Z
    2a74:	f9 01       	movw	r30, r18
    2a76:	e0 57       	subi	r30, 0x70	; 112
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	04 91       	lpm	r16, Z
    2a7c:	00 23       	and	r16, r16
    2a7e:	c1 f0       	breq	.+48     	; 0x2ab0 <digitalWrite+0x5e>
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <digitalWrite+0x38>
    2a84:	69 83       	std	Y+1, r22	; 0x01
    2a86:	83 df       	rcall	.-250    	; 0x298e <turnOffPWM>
    2a88:	69 81       	ldd	r22, Y+1	; 0x01
    2a8a:	e0 2f       	mov	r30, r16
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	ee 0f       	add	r30, r30
    2a90:	ff 1f       	adc	r31, r31
    2a92:	e2 55       	subi	r30, 0x52	; 82
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	a5 91       	lpm	r26, Z+
    2a98:	b4 91       	lpm	r27, Z
    2a9a:	9f b7       	in	r25, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	8c 91       	ld	r24, X
    2aa0:	61 11       	cpse	r22, r1
    2aa2:	03 c0       	rjmp	.+6      	; 0x2aaa <digitalWrite+0x58>
    2aa4:	10 95       	com	r17
    2aa6:	81 23       	and	r24, r17
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <digitalWrite+0x5a>
    2aaa:	81 2b       	or	r24, r17
    2aac:	8c 93       	st	X, r24
    2aae:	9f bf       	out	0x3f, r25	; 63
    2ab0:	0f 90       	pop	r0
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	08 95       	ret

00002abc <digitalRead>:
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	e8 59       	subi	r30, 0x98	; 152
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	84 91       	lpm	r24, Z
    2acc:	f9 01       	movw	r30, r18
    2ace:	e4 58       	subi	r30, 0x84	; 132
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	d4 91       	lpm	r29, Z
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	e0 57       	subi	r30, 0x70	; 112
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	c4 91       	lpm	r28, Z
    2adc:	cc 23       	and	r28, r28
    2ade:	89 f0       	breq	.+34     	; 0x2b02 <digitalRead+0x46>
    2ae0:	81 11       	cpse	r24, r1
    2ae2:	55 df       	rcall	.-342    	; 0x298e <turnOffPWM>
    2ae4:	ec 2f       	mov	r30, r28
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	ee 0f       	add	r30, r30
    2aea:	ff 1f       	adc	r31, r31
    2aec:	ec 55       	subi	r30, 0x5C	; 92
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	a5 91       	lpm	r26, Z+
    2af2:	b4 91       	lpm	r27, Z
    2af4:	2c 91       	ld	r18, X
    2af6:	2d 23       	and	r18, r29
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	21 f4       	brne	.+8      	; 0x2b06 <digitalRead+0x4a>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <digitalRead+0x4a>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <__mulsi3>:
    2b0c:	db 01       	movw	r26, r22
    2b0e:	8f 93       	push	r24
    2b10:	9f 93       	push	r25
    2b12:	68 d0       	rcall	.+208    	; 0x2be4 <__muluhisi3>
    2b14:	bf 91       	pop	r27
    2b16:	af 91       	pop	r26
    2b18:	a2 9f       	mul	r26, r18
    2b1a:	80 0d       	add	r24, r0
    2b1c:	91 1d       	adc	r25, r1
    2b1e:	a3 9f       	mul	r26, r19
    2b20:	90 0d       	add	r25, r0
    2b22:	b2 9f       	mul	r27, r18
    2b24:	90 0d       	add	r25, r0
    2b26:	11 24       	eor	r1, r1
    2b28:	08 95       	ret

00002b2a <__udivmodqi4>:
    2b2a:	99 1b       	sub	r25, r25
    2b2c:	79 e0       	ldi	r23, 0x09	; 9
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <__udivmodqi4_ep>

00002b30 <__udivmodqi4_loop>:
    2b30:	99 1f       	adc	r25, r25
    2b32:	96 17       	cp	r25, r22
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <__udivmodqi4_ep>
    2b36:	96 1b       	sub	r25, r22

00002b38 <__udivmodqi4_ep>:
    2b38:	88 1f       	adc	r24, r24
    2b3a:	7a 95       	dec	r23
    2b3c:	c9 f7       	brne	.-14     	; 0x2b30 <__udivmodqi4_loop>
    2b3e:	80 95       	com	r24
    2b40:	08 95       	ret

00002b42 <__divmodhi4>:
    2b42:	97 fb       	bst	r25, 7
    2b44:	07 2e       	mov	r0, r23
    2b46:	16 f4       	brtc	.+4      	; 0x2b4c <__divmodhi4+0xa>
    2b48:	00 94       	com	r0
    2b4a:	06 d0       	rcall	.+12     	; 0x2b58 <__divmodhi4_neg1>
    2b4c:	77 fd       	sbrc	r23, 7
    2b4e:	08 d0       	rcall	.+16     	; 0x2b60 <__divmodhi4_neg2>
    2b50:	53 d0       	rcall	.+166    	; 0x2bf8 <__udivmodhi4>
    2b52:	07 fc       	sbrc	r0, 7
    2b54:	05 d0       	rcall	.+10     	; 0x2b60 <__divmodhi4_neg2>
    2b56:	3e f4       	brtc	.+14     	; 0x2b66 <__divmodhi4_exit>

00002b58 <__divmodhi4_neg1>:
    2b58:	90 95       	com	r25
    2b5a:	81 95       	neg	r24
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	08 95       	ret

00002b60 <__divmodhi4_neg2>:
    2b60:	70 95       	com	r23
    2b62:	61 95       	neg	r22
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255

00002b66 <__divmodhi4_exit>:
    2b66:	08 95       	ret

00002b68 <__udivmodsi4>:
    2b68:	a1 e2       	ldi	r26, 0x21	; 33
    2b6a:	1a 2e       	mov	r1, r26
    2b6c:	aa 1b       	sub	r26, r26
    2b6e:	bb 1b       	sub	r27, r27
    2b70:	fd 01       	movw	r30, r26
    2b72:	0d c0       	rjmp	.+26     	; 0x2b8e <__udivmodsi4_ep>

00002b74 <__udivmodsi4_loop>:
    2b74:	aa 1f       	adc	r26, r26
    2b76:	bb 1f       	adc	r27, r27
    2b78:	ee 1f       	adc	r30, r30
    2b7a:	ff 1f       	adc	r31, r31
    2b7c:	a2 17       	cp	r26, r18
    2b7e:	b3 07       	cpc	r27, r19
    2b80:	e4 07       	cpc	r30, r20
    2b82:	f5 07       	cpc	r31, r21
    2b84:	20 f0       	brcs	.+8      	; 0x2b8e <__udivmodsi4_ep>
    2b86:	a2 1b       	sub	r26, r18
    2b88:	b3 0b       	sbc	r27, r19
    2b8a:	e4 0b       	sbc	r30, r20
    2b8c:	f5 0b       	sbc	r31, r21

00002b8e <__udivmodsi4_ep>:
    2b8e:	66 1f       	adc	r22, r22
    2b90:	77 1f       	adc	r23, r23
    2b92:	88 1f       	adc	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	1a 94       	dec	r1
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <__udivmodsi4_loop>
    2b9a:	60 95       	com	r22
    2b9c:	70 95       	com	r23
    2b9e:	80 95       	com	r24
    2ba0:	90 95       	com	r25
    2ba2:	9b 01       	movw	r18, r22
    2ba4:	ac 01       	movw	r20, r24
    2ba6:	bd 01       	movw	r22, r26
    2ba8:	cf 01       	movw	r24, r30
    2baa:	08 95       	ret

00002bac <__divmodsi4>:
    2bac:	05 2e       	mov	r0, r21
    2bae:	97 fb       	bst	r25, 7
    2bb0:	16 f4       	brtc	.+4      	; 0x2bb6 <__divmodsi4+0xa>
    2bb2:	00 94       	com	r0
    2bb4:	0f d0       	rcall	.+30     	; 0x2bd4 <__negsi2>
    2bb6:	57 fd       	sbrc	r21, 7
    2bb8:	05 d0       	rcall	.+10     	; 0x2bc4 <__divmodsi4_neg2>
    2bba:	d6 df       	rcall	.-84     	; 0x2b68 <__udivmodsi4>
    2bbc:	07 fc       	sbrc	r0, 7
    2bbe:	02 d0       	rcall	.+4      	; 0x2bc4 <__divmodsi4_neg2>
    2bc0:	46 f4       	brtc	.+16     	; 0x2bd2 <__divmodsi4_exit>
    2bc2:	08 c0       	rjmp	.+16     	; 0x2bd4 <__negsi2>

00002bc4 <__divmodsi4_neg2>:
    2bc4:	50 95       	com	r21
    2bc6:	40 95       	com	r20
    2bc8:	30 95       	com	r19
    2bca:	21 95       	neg	r18
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	4f 4f       	sbci	r20, 0xFF	; 255
    2bd0:	5f 4f       	sbci	r21, 0xFF	; 255

00002bd2 <__divmodsi4_exit>:
    2bd2:	08 95       	ret

00002bd4 <__negsi2>:
    2bd4:	90 95       	com	r25
    2bd6:	80 95       	com	r24
    2bd8:	70 95       	com	r23
    2bda:	61 95       	neg	r22
    2bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bde:	8f 4f       	sbci	r24, 0xFF	; 255
    2be0:	9f 4f       	sbci	r25, 0xFF	; 255
    2be2:	08 95       	ret

00002be4 <__muluhisi3>:
    2be4:	23 d0       	rcall	.+70     	; 0x2c2c <__umulhisi3>
    2be6:	a5 9f       	mul	r26, r21
    2be8:	90 0d       	add	r25, r0
    2bea:	b4 9f       	mul	r27, r20
    2bec:	90 0d       	add	r25, r0
    2bee:	a4 9f       	mul	r26, r20
    2bf0:	80 0d       	add	r24, r0
    2bf2:	91 1d       	adc	r25, r1
    2bf4:	11 24       	eor	r1, r1
    2bf6:	08 95       	ret

00002bf8 <__udivmodhi4>:
    2bf8:	aa 1b       	sub	r26, r26
    2bfa:	bb 1b       	sub	r27, r27
    2bfc:	51 e1       	ldi	r21, 0x11	; 17
    2bfe:	07 c0       	rjmp	.+14     	; 0x2c0e <__udivmodhi4_ep>

00002c00 <__udivmodhi4_loop>:
    2c00:	aa 1f       	adc	r26, r26
    2c02:	bb 1f       	adc	r27, r27
    2c04:	a6 17       	cp	r26, r22
    2c06:	b7 07       	cpc	r27, r23
    2c08:	10 f0       	brcs	.+4      	; 0x2c0e <__udivmodhi4_ep>
    2c0a:	a6 1b       	sub	r26, r22
    2c0c:	b7 0b       	sbc	r27, r23

00002c0e <__udivmodhi4_ep>:
    2c0e:	88 1f       	adc	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	5a 95       	dec	r21
    2c14:	a9 f7       	brne	.-22     	; 0x2c00 <__udivmodhi4_loop>
    2c16:	80 95       	com	r24
    2c18:	90 95       	com	r25
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	08 95       	ret

00002c20 <__tablejump2__>:
    2c20:	ee 0f       	add	r30, r30
    2c22:	ff 1f       	adc	r31, r31

00002c24 <__tablejump__>:
    2c24:	05 90       	lpm	r0, Z+
    2c26:	f4 91       	lpm	r31, Z
    2c28:	e0 2d       	mov	r30, r0
    2c2a:	09 94       	ijmp

00002c2c <__umulhisi3>:
    2c2c:	a2 9f       	mul	r26, r18
    2c2e:	b0 01       	movw	r22, r0
    2c30:	b3 9f       	mul	r27, r19
    2c32:	c0 01       	movw	r24, r0
    2c34:	a3 9f       	mul	r26, r19
    2c36:	70 0d       	add	r23, r0
    2c38:	81 1d       	adc	r24, r1
    2c3a:	11 24       	eor	r1, r1
    2c3c:	91 1d       	adc	r25, r1
    2c3e:	b2 9f       	mul	r27, r18
    2c40:	70 0d       	add	r23, r0
    2c42:	81 1d       	adc	r24, r1
    2c44:	11 24       	eor	r1, r1
    2c46:	91 1d       	adc	r25, r1
    2c48:	08 95       	ret

00002c4a <__subsf3>:
    2c4a:	50 58       	subi	r21, 0x80	; 128

00002c4c <__addsf3>:
    2c4c:	bb 27       	eor	r27, r27
    2c4e:	aa 27       	eor	r26, r26
    2c50:	0e d0       	rcall	.+28     	; 0x2c6e <__addsf3x>
    2c52:	4d c1       	rjmp	.+666    	; 0x2eee <__fp_round>
    2c54:	3e d1       	rcall	.+636    	; 0x2ed2 <__fp_pscA>
    2c56:	30 f0       	brcs	.+12     	; 0x2c64 <__addsf3+0x18>
    2c58:	43 d1       	rcall	.+646    	; 0x2ee0 <__fp_pscB>
    2c5a:	20 f0       	brcs	.+8      	; 0x2c64 <__addsf3+0x18>
    2c5c:	31 f4       	brne	.+12     	; 0x2c6a <__addsf3+0x1e>
    2c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    2c60:	11 f4       	brne	.+4      	; 0x2c66 <__addsf3+0x1a>
    2c62:	1e f4       	brtc	.+6      	; 0x2c6a <__addsf3+0x1e>
    2c64:	33 c1       	rjmp	.+614    	; 0x2ecc <__fp_nan>
    2c66:	0e f4       	brtc	.+2      	; 0x2c6a <__addsf3+0x1e>
    2c68:	e0 95       	com	r30
    2c6a:	e7 fb       	bst	r30, 7
    2c6c:	29 c1       	rjmp	.+594    	; 0x2ec0 <__fp_inf>

00002c6e <__addsf3x>:
    2c6e:	e9 2f       	mov	r30, r25
    2c70:	4f d1       	rcall	.+670    	; 0x2f10 <__fp_split3>
    2c72:	80 f3       	brcs	.-32     	; 0x2c54 <__addsf3+0x8>
    2c74:	ba 17       	cp	r27, r26
    2c76:	62 07       	cpc	r22, r18
    2c78:	73 07       	cpc	r23, r19
    2c7a:	84 07       	cpc	r24, r20
    2c7c:	95 07       	cpc	r25, r21
    2c7e:	18 f0       	brcs	.+6      	; 0x2c86 <__addsf3x+0x18>
    2c80:	71 f4       	brne	.+28     	; 0x2c9e <__addsf3x+0x30>
    2c82:	9e f5       	brtc	.+102    	; 0x2cea <__addsf3x+0x7c>
    2c84:	67 c1       	rjmp	.+718    	; 0x2f54 <__fp_zero>
    2c86:	0e f4       	brtc	.+2      	; 0x2c8a <__addsf3x+0x1c>
    2c88:	e0 95       	com	r30
    2c8a:	0b 2e       	mov	r0, r27
    2c8c:	ba 2f       	mov	r27, r26
    2c8e:	a0 2d       	mov	r26, r0
    2c90:	0b 01       	movw	r0, r22
    2c92:	b9 01       	movw	r22, r18
    2c94:	90 01       	movw	r18, r0
    2c96:	0c 01       	movw	r0, r24
    2c98:	ca 01       	movw	r24, r20
    2c9a:	a0 01       	movw	r20, r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	ff 27       	eor	r31, r31
    2ca0:	59 1b       	sub	r21, r25
    2ca2:	99 f0       	breq	.+38     	; 0x2cca <__addsf3x+0x5c>
    2ca4:	59 3f       	cpi	r21, 0xF9	; 249
    2ca6:	50 f4       	brcc	.+20     	; 0x2cbc <__addsf3x+0x4e>
    2ca8:	50 3e       	cpi	r21, 0xE0	; 224
    2caa:	68 f1       	brcs	.+90     	; 0x2d06 <__addsf3x+0x98>
    2cac:	1a 16       	cp	r1, r26
    2cae:	f0 40       	sbci	r31, 0x00	; 0
    2cb0:	a2 2f       	mov	r26, r18
    2cb2:	23 2f       	mov	r18, r19
    2cb4:	34 2f       	mov	r19, r20
    2cb6:	44 27       	eor	r20, r20
    2cb8:	58 5f       	subi	r21, 0xF8	; 248
    2cba:	f3 cf       	rjmp	.-26     	; 0x2ca2 <__addsf3x+0x34>
    2cbc:	46 95       	lsr	r20
    2cbe:	37 95       	ror	r19
    2cc0:	27 95       	ror	r18
    2cc2:	a7 95       	ror	r26
    2cc4:	f0 40       	sbci	r31, 0x00	; 0
    2cc6:	53 95       	inc	r21
    2cc8:	c9 f7       	brne	.-14     	; 0x2cbc <__addsf3x+0x4e>
    2cca:	7e f4       	brtc	.+30     	; 0x2cea <__addsf3x+0x7c>
    2ccc:	1f 16       	cp	r1, r31
    2cce:	ba 0b       	sbc	r27, r26
    2cd0:	62 0b       	sbc	r22, r18
    2cd2:	73 0b       	sbc	r23, r19
    2cd4:	84 0b       	sbc	r24, r20
    2cd6:	ba f0       	brmi	.+46     	; 0x2d06 <__addsf3x+0x98>
    2cd8:	91 50       	subi	r25, 0x01	; 1
    2cda:	a1 f0       	breq	.+40     	; 0x2d04 <__addsf3x+0x96>
    2cdc:	ff 0f       	add	r31, r31
    2cde:	bb 1f       	adc	r27, r27
    2ce0:	66 1f       	adc	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	c2 f7       	brpl	.-16     	; 0x2cd8 <__addsf3x+0x6a>
    2ce8:	0e c0       	rjmp	.+28     	; 0x2d06 <__addsf3x+0x98>
    2cea:	ba 0f       	add	r27, r26
    2cec:	62 1f       	adc	r22, r18
    2cee:	73 1f       	adc	r23, r19
    2cf0:	84 1f       	adc	r24, r20
    2cf2:	48 f4       	brcc	.+18     	; 0x2d06 <__addsf3x+0x98>
    2cf4:	87 95       	ror	r24
    2cf6:	77 95       	ror	r23
    2cf8:	67 95       	ror	r22
    2cfa:	b7 95       	ror	r27
    2cfc:	f7 95       	ror	r31
    2cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    2d00:	08 f0       	brcs	.+2      	; 0x2d04 <__addsf3x+0x96>
    2d02:	b3 cf       	rjmp	.-154    	; 0x2c6a <__addsf3+0x1e>
    2d04:	93 95       	inc	r25
    2d06:	88 0f       	add	r24, r24
    2d08:	08 f0       	brcs	.+2      	; 0x2d0c <__addsf3x+0x9e>
    2d0a:	99 27       	eor	r25, r25
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	97 95       	ror	r25
    2d10:	87 95       	ror	r24
    2d12:	08 95       	ret

00002d14 <__divsf3>:
    2d14:	0c d0       	rcall	.+24     	; 0x2d2e <__divsf3x>
    2d16:	eb c0       	rjmp	.+470    	; 0x2eee <__fp_round>
    2d18:	e3 d0       	rcall	.+454    	; 0x2ee0 <__fp_pscB>
    2d1a:	40 f0       	brcs	.+16     	; 0x2d2c <__divsf3+0x18>
    2d1c:	da d0       	rcall	.+436    	; 0x2ed2 <__fp_pscA>
    2d1e:	30 f0       	brcs	.+12     	; 0x2d2c <__divsf3+0x18>
    2d20:	21 f4       	brne	.+8      	; 0x2d2a <__divsf3+0x16>
    2d22:	5f 3f       	cpi	r21, 0xFF	; 255
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <__divsf3+0x18>
    2d26:	cc c0       	rjmp	.+408    	; 0x2ec0 <__fp_inf>
    2d28:	51 11       	cpse	r21, r1
    2d2a:	15 c1       	rjmp	.+554    	; 0x2f56 <__fp_szero>
    2d2c:	cf c0       	rjmp	.+414    	; 0x2ecc <__fp_nan>

00002d2e <__divsf3x>:
    2d2e:	f0 d0       	rcall	.+480    	; 0x2f10 <__fp_split3>
    2d30:	98 f3       	brcs	.-26     	; 0x2d18 <__divsf3+0x4>

00002d32 <__divsf3_pse>:
    2d32:	99 23       	and	r25, r25
    2d34:	c9 f3       	breq	.-14     	; 0x2d28 <__divsf3+0x14>
    2d36:	55 23       	and	r21, r21
    2d38:	b1 f3       	breq	.-20     	; 0x2d26 <__divsf3+0x12>
    2d3a:	95 1b       	sub	r25, r21
    2d3c:	55 0b       	sbc	r21, r21
    2d3e:	bb 27       	eor	r27, r27
    2d40:	aa 27       	eor	r26, r26
    2d42:	62 17       	cp	r22, r18
    2d44:	73 07       	cpc	r23, r19
    2d46:	84 07       	cpc	r24, r20
    2d48:	38 f0       	brcs	.+14     	; 0x2d58 <__divsf3_pse+0x26>
    2d4a:	9f 5f       	subi	r25, 0xFF	; 255
    2d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	44 1f       	adc	r20, r20
    2d54:	aa 1f       	adc	r26, r26
    2d56:	a9 f3       	breq	.-22     	; 0x2d42 <__divsf3_pse+0x10>
    2d58:	33 d0       	rcall	.+102    	; 0x2dc0 <__divsf3_pse+0x8e>
    2d5a:	0e 2e       	mov	r0, r30
    2d5c:	3a f0       	brmi	.+14     	; 0x2d6c <__divsf3_pse+0x3a>
    2d5e:	e0 e8       	ldi	r30, 0x80	; 128
    2d60:	30 d0       	rcall	.+96     	; 0x2dc2 <__divsf3_pse+0x90>
    2d62:	91 50       	subi	r25, 0x01	; 1
    2d64:	50 40       	sbci	r21, 0x00	; 0
    2d66:	e6 95       	lsr	r30
    2d68:	00 1c       	adc	r0, r0
    2d6a:	ca f7       	brpl	.-14     	; 0x2d5e <__divsf3_pse+0x2c>
    2d6c:	29 d0       	rcall	.+82     	; 0x2dc0 <__divsf3_pse+0x8e>
    2d6e:	fe 2f       	mov	r31, r30
    2d70:	27 d0       	rcall	.+78     	; 0x2dc0 <__divsf3_pse+0x8e>
    2d72:	66 0f       	add	r22, r22
    2d74:	77 1f       	adc	r23, r23
    2d76:	88 1f       	adc	r24, r24
    2d78:	bb 1f       	adc	r27, r27
    2d7a:	26 17       	cp	r18, r22
    2d7c:	37 07       	cpc	r19, r23
    2d7e:	48 07       	cpc	r20, r24
    2d80:	ab 07       	cpc	r26, r27
    2d82:	b0 e8       	ldi	r27, 0x80	; 128
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <__divsf3_pse+0x56>
    2d86:	bb 0b       	sbc	r27, r27
    2d88:	80 2d       	mov	r24, r0
    2d8a:	bf 01       	movw	r22, r30
    2d8c:	ff 27       	eor	r31, r31
    2d8e:	93 58       	subi	r25, 0x83	; 131
    2d90:	5f 4f       	sbci	r21, 0xFF	; 255
    2d92:	2a f0       	brmi	.+10     	; 0x2d9e <__divsf3_pse+0x6c>
    2d94:	9e 3f       	cpi	r25, 0xFE	; 254
    2d96:	51 05       	cpc	r21, r1
    2d98:	68 f0       	brcs	.+26     	; 0x2db4 <__divsf3_pse+0x82>
    2d9a:	92 c0       	rjmp	.+292    	; 0x2ec0 <__fp_inf>
    2d9c:	dc c0       	rjmp	.+440    	; 0x2f56 <__fp_szero>
    2d9e:	5f 3f       	cpi	r21, 0xFF	; 255
    2da0:	ec f3       	brlt	.-6      	; 0x2d9c <__divsf3_pse+0x6a>
    2da2:	98 3e       	cpi	r25, 0xE8	; 232
    2da4:	dc f3       	brlt	.-10     	; 0x2d9c <__divsf3_pse+0x6a>
    2da6:	86 95       	lsr	r24
    2da8:	77 95       	ror	r23
    2daa:	67 95       	ror	r22
    2dac:	b7 95       	ror	r27
    2dae:	f7 95       	ror	r31
    2db0:	9f 5f       	subi	r25, 0xFF	; 255
    2db2:	c9 f7       	brne	.-14     	; 0x2da6 <__divsf3_pse+0x74>
    2db4:	88 0f       	add	r24, r24
    2db6:	91 1d       	adc	r25, r1
    2db8:	96 95       	lsr	r25
    2dba:	87 95       	ror	r24
    2dbc:	97 f9       	bld	r25, 7
    2dbe:	08 95       	ret
    2dc0:	e1 e0       	ldi	r30, 0x01	; 1
    2dc2:	66 0f       	add	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	bb 1f       	adc	r27, r27
    2dca:	62 17       	cp	r22, r18
    2dcc:	73 07       	cpc	r23, r19
    2dce:	84 07       	cpc	r24, r20
    2dd0:	ba 07       	cpc	r27, r26
    2dd2:	20 f0       	brcs	.+8      	; 0x2ddc <__divsf3_pse+0xaa>
    2dd4:	62 1b       	sub	r22, r18
    2dd6:	73 0b       	sbc	r23, r19
    2dd8:	84 0b       	sbc	r24, r20
    2dda:	ba 0b       	sbc	r27, r26
    2ddc:	ee 1f       	adc	r30, r30
    2dde:	88 f7       	brcc	.-30     	; 0x2dc2 <__divsf3_pse+0x90>
    2de0:	e0 95       	com	r30
    2de2:	08 95       	ret

00002de4 <__fixsfsi>:
    2de4:	04 d0       	rcall	.+8      	; 0x2dee <__fixunssfsi>
    2de6:	68 94       	set
    2de8:	b1 11       	cpse	r27, r1
    2dea:	b5 c0       	rjmp	.+362    	; 0x2f56 <__fp_szero>
    2dec:	08 95       	ret

00002dee <__fixunssfsi>:
    2dee:	98 d0       	rcall	.+304    	; 0x2f20 <__fp_splitA>
    2df0:	88 f0       	brcs	.+34     	; 0x2e14 <__fixunssfsi+0x26>
    2df2:	9f 57       	subi	r25, 0x7F	; 127
    2df4:	90 f0       	brcs	.+36     	; 0x2e1a <__fixunssfsi+0x2c>
    2df6:	b9 2f       	mov	r27, r25
    2df8:	99 27       	eor	r25, r25
    2dfa:	b7 51       	subi	r27, 0x17	; 23
    2dfc:	a0 f0       	brcs	.+40     	; 0x2e26 <__fixunssfsi+0x38>
    2dfe:	d1 f0       	breq	.+52     	; 0x2e34 <__fixunssfsi+0x46>
    2e00:	66 0f       	add	r22, r22
    2e02:	77 1f       	adc	r23, r23
    2e04:	88 1f       	adc	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	1a f0       	brmi	.+6      	; 0x2e10 <__fixunssfsi+0x22>
    2e0a:	ba 95       	dec	r27
    2e0c:	c9 f7       	brne	.-14     	; 0x2e00 <__fixunssfsi+0x12>
    2e0e:	12 c0       	rjmp	.+36     	; 0x2e34 <__fixunssfsi+0x46>
    2e10:	b1 30       	cpi	r27, 0x01	; 1
    2e12:	81 f0       	breq	.+32     	; 0x2e34 <__fixunssfsi+0x46>
    2e14:	9f d0       	rcall	.+318    	; 0x2f54 <__fp_zero>
    2e16:	b1 e0       	ldi	r27, 0x01	; 1
    2e18:	08 95       	ret
    2e1a:	9c c0       	rjmp	.+312    	; 0x2f54 <__fp_zero>
    2e1c:	67 2f       	mov	r22, r23
    2e1e:	78 2f       	mov	r23, r24
    2e20:	88 27       	eor	r24, r24
    2e22:	b8 5f       	subi	r27, 0xF8	; 248
    2e24:	39 f0       	breq	.+14     	; 0x2e34 <__fixunssfsi+0x46>
    2e26:	b9 3f       	cpi	r27, 0xF9	; 249
    2e28:	cc f3       	brlt	.-14     	; 0x2e1c <__fixunssfsi+0x2e>
    2e2a:	86 95       	lsr	r24
    2e2c:	77 95       	ror	r23
    2e2e:	67 95       	ror	r22
    2e30:	b3 95       	inc	r27
    2e32:	d9 f7       	brne	.-10     	; 0x2e2a <__fixunssfsi+0x3c>
    2e34:	3e f4       	brtc	.+14     	; 0x2e44 <__fixunssfsi+0x56>
    2e36:	90 95       	com	r25
    2e38:	80 95       	com	r24
    2e3a:	70 95       	com	r23
    2e3c:	61 95       	neg	r22
    2e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e40:	8f 4f       	sbci	r24, 0xFF	; 255
    2e42:	9f 4f       	sbci	r25, 0xFF	; 255
    2e44:	08 95       	ret

00002e46 <__floatunsisf>:
    2e46:	e8 94       	clt
    2e48:	09 c0       	rjmp	.+18     	; 0x2e5c <__floatsisf+0x12>

00002e4a <__floatsisf>:
    2e4a:	97 fb       	bst	r25, 7
    2e4c:	3e f4       	brtc	.+14     	; 0x2e5c <__floatsisf+0x12>
    2e4e:	90 95       	com	r25
    2e50:	80 95       	com	r24
    2e52:	70 95       	com	r23
    2e54:	61 95       	neg	r22
    2e56:	7f 4f       	sbci	r23, 0xFF	; 255
    2e58:	8f 4f       	sbci	r24, 0xFF	; 255
    2e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5c:	99 23       	and	r25, r25
    2e5e:	a9 f0       	breq	.+42     	; 0x2e8a <__floatsisf+0x40>
    2e60:	f9 2f       	mov	r31, r25
    2e62:	96 e9       	ldi	r25, 0x96	; 150
    2e64:	bb 27       	eor	r27, r27
    2e66:	93 95       	inc	r25
    2e68:	f6 95       	lsr	r31
    2e6a:	87 95       	ror	r24
    2e6c:	77 95       	ror	r23
    2e6e:	67 95       	ror	r22
    2e70:	b7 95       	ror	r27
    2e72:	f1 11       	cpse	r31, r1
    2e74:	f8 cf       	rjmp	.-16     	; 0x2e66 <__floatsisf+0x1c>
    2e76:	fa f4       	brpl	.+62     	; 0x2eb6 <__floatsisf+0x6c>
    2e78:	bb 0f       	add	r27, r27
    2e7a:	11 f4       	brne	.+4      	; 0x2e80 <__floatsisf+0x36>
    2e7c:	60 ff       	sbrs	r22, 0
    2e7e:	1b c0       	rjmp	.+54     	; 0x2eb6 <__floatsisf+0x6c>
    2e80:	6f 5f       	subi	r22, 0xFF	; 255
    2e82:	7f 4f       	sbci	r23, 0xFF	; 255
    2e84:	8f 4f       	sbci	r24, 0xFF	; 255
    2e86:	9f 4f       	sbci	r25, 0xFF	; 255
    2e88:	16 c0       	rjmp	.+44     	; 0x2eb6 <__floatsisf+0x6c>
    2e8a:	88 23       	and	r24, r24
    2e8c:	11 f0       	breq	.+4      	; 0x2e92 <__floatsisf+0x48>
    2e8e:	96 e9       	ldi	r25, 0x96	; 150
    2e90:	11 c0       	rjmp	.+34     	; 0x2eb4 <__floatsisf+0x6a>
    2e92:	77 23       	and	r23, r23
    2e94:	21 f0       	breq	.+8      	; 0x2e9e <__floatsisf+0x54>
    2e96:	9e e8       	ldi	r25, 0x8E	; 142
    2e98:	87 2f       	mov	r24, r23
    2e9a:	76 2f       	mov	r23, r22
    2e9c:	05 c0       	rjmp	.+10     	; 0x2ea8 <__floatsisf+0x5e>
    2e9e:	66 23       	and	r22, r22
    2ea0:	71 f0       	breq	.+28     	; 0x2ebe <__floatsisf+0x74>
    2ea2:	96 e8       	ldi	r25, 0x86	; 134
    2ea4:	86 2f       	mov	r24, r22
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	2a f0       	brmi	.+10     	; 0x2eb6 <__floatsisf+0x6c>
    2eac:	9a 95       	dec	r25
    2eae:	66 0f       	add	r22, r22
    2eb0:	77 1f       	adc	r23, r23
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	da f7       	brpl	.-10     	; 0x2eac <__floatsisf+0x62>
    2eb6:	88 0f       	add	r24, r24
    2eb8:	96 95       	lsr	r25
    2eba:	87 95       	ror	r24
    2ebc:	97 f9       	bld	r25, 7
    2ebe:	08 95       	ret

00002ec0 <__fp_inf>:
    2ec0:	97 f9       	bld	r25, 7
    2ec2:	9f 67       	ori	r25, 0x7F	; 127
    2ec4:	80 e8       	ldi	r24, 0x80	; 128
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	08 95       	ret

00002ecc <__fp_nan>:
    2ecc:	9f ef       	ldi	r25, 0xFF	; 255
    2ece:	80 ec       	ldi	r24, 0xC0	; 192
    2ed0:	08 95       	ret

00002ed2 <__fp_pscA>:
    2ed2:	00 24       	eor	r0, r0
    2ed4:	0a 94       	dec	r0
    2ed6:	16 16       	cp	r1, r22
    2ed8:	17 06       	cpc	r1, r23
    2eda:	18 06       	cpc	r1, r24
    2edc:	09 06       	cpc	r0, r25
    2ede:	08 95       	ret

00002ee0 <__fp_pscB>:
    2ee0:	00 24       	eor	r0, r0
    2ee2:	0a 94       	dec	r0
    2ee4:	12 16       	cp	r1, r18
    2ee6:	13 06       	cpc	r1, r19
    2ee8:	14 06       	cpc	r1, r20
    2eea:	05 06       	cpc	r0, r21
    2eec:	08 95       	ret

00002eee <__fp_round>:
    2eee:	09 2e       	mov	r0, r25
    2ef0:	03 94       	inc	r0
    2ef2:	00 0c       	add	r0, r0
    2ef4:	11 f4       	brne	.+4      	; 0x2efa <__fp_round+0xc>
    2ef6:	88 23       	and	r24, r24
    2ef8:	52 f0       	brmi	.+20     	; 0x2f0e <__fp_round+0x20>
    2efa:	bb 0f       	add	r27, r27
    2efc:	40 f4       	brcc	.+16     	; 0x2f0e <__fp_round+0x20>
    2efe:	bf 2b       	or	r27, r31
    2f00:	11 f4       	brne	.+4      	; 0x2f06 <__fp_round+0x18>
    2f02:	60 ff       	sbrs	r22, 0
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <__fp_round+0x20>
    2f06:	6f 5f       	subi	r22, 0xFF	; 255
    2f08:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0e:	08 95       	ret

00002f10 <__fp_split3>:
    2f10:	57 fd       	sbrc	r21, 7
    2f12:	90 58       	subi	r25, 0x80	; 128
    2f14:	44 0f       	add	r20, r20
    2f16:	55 1f       	adc	r21, r21
    2f18:	59 f0       	breq	.+22     	; 0x2f30 <__fp_splitA+0x10>
    2f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f1c:	71 f0       	breq	.+28     	; 0x2f3a <__fp_splitA+0x1a>
    2f1e:	47 95       	ror	r20

00002f20 <__fp_splitA>:
    2f20:	88 0f       	add	r24, r24
    2f22:	97 fb       	bst	r25, 7
    2f24:	99 1f       	adc	r25, r25
    2f26:	61 f0       	breq	.+24     	; 0x2f40 <__fp_splitA+0x20>
    2f28:	9f 3f       	cpi	r25, 0xFF	; 255
    2f2a:	79 f0       	breq	.+30     	; 0x2f4a <__fp_splitA+0x2a>
    2f2c:	87 95       	ror	r24
    2f2e:	08 95       	ret
    2f30:	12 16       	cp	r1, r18
    2f32:	13 06       	cpc	r1, r19
    2f34:	14 06       	cpc	r1, r20
    2f36:	55 1f       	adc	r21, r21
    2f38:	f2 cf       	rjmp	.-28     	; 0x2f1e <__fp_split3+0xe>
    2f3a:	46 95       	lsr	r20
    2f3c:	f1 df       	rcall	.-30     	; 0x2f20 <__fp_splitA>
    2f3e:	08 c0       	rjmp	.+16     	; 0x2f50 <__fp_splitA+0x30>
    2f40:	16 16       	cp	r1, r22
    2f42:	17 06       	cpc	r1, r23
    2f44:	18 06       	cpc	r1, r24
    2f46:	99 1f       	adc	r25, r25
    2f48:	f1 cf       	rjmp	.-30     	; 0x2f2c <__fp_splitA+0xc>
    2f4a:	86 95       	lsr	r24
    2f4c:	71 05       	cpc	r23, r1
    2f4e:	61 05       	cpc	r22, r1
    2f50:	08 94       	sec
    2f52:	08 95       	ret

00002f54 <__fp_zero>:
    2f54:	e8 94       	clt

00002f56 <__fp_szero>:
    2f56:	bb 27       	eor	r27, r27
    2f58:	66 27       	eor	r22, r22
    2f5a:	77 27       	eor	r23, r23
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	97 f9       	bld	r25, 7
    2f60:	08 95       	ret

00002f62 <__mulsf3>:
    2f62:	0b d0       	rcall	.+22     	; 0x2f7a <__mulsf3x>
    2f64:	c4 cf       	rjmp	.-120    	; 0x2eee <__fp_round>
    2f66:	b5 df       	rcall	.-150    	; 0x2ed2 <__fp_pscA>
    2f68:	28 f0       	brcs	.+10     	; 0x2f74 <__mulsf3+0x12>
    2f6a:	ba df       	rcall	.-140    	; 0x2ee0 <__fp_pscB>
    2f6c:	18 f0       	brcs	.+6      	; 0x2f74 <__mulsf3+0x12>
    2f6e:	95 23       	and	r25, r21
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <__mulsf3+0x12>
    2f72:	a6 cf       	rjmp	.-180    	; 0x2ec0 <__fp_inf>
    2f74:	ab cf       	rjmp	.-170    	; 0x2ecc <__fp_nan>
    2f76:	11 24       	eor	r1, r1
    2f78:	ee cf       	rjmp	.-36     	; 0x2f56 <__fp_szero>

00002f7a <__mulsf3x>:
    2f7a:	ca df       	rcall	.-108    	; 0x2f10 <__fp_split3>
    2f7c:	a0 f3       	brcs	.-24     	; 0x2f66 <__mulsf3+0x4>

00002f7e <__mulsf3_pse>:
    2f7e:	95 9f       	mul	r25, r21
    2f80:	d1 f3       	breq	.-12     	; 0x2f76 <__mulsf3+0x14>
    2f82:	95 0f       	add	r25, r21
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	55 1f       	adc	r21, r21
    2f88:	62 9f       	mul	r22, r18
    2f8a:	f0 01       	movw	r30, r0
    2f8c:	72 9f       	mul	r23, r18
    2f8e:	bb 27       	eor	r27, r27
    2f90:	f0 0d       	add	r31, r0
    2f92:	b1 1d       	adc	r27, r1
    2f94:	63 9f       	mul	r22, r19
    2f96:	aa 27       	eor	r26, r26
    2f98:	f0 0d       	add	r31, r0
    2f9a:	b1 1d       	adc	r27, r1
    2f9c:	aa 1f       	adc	r26, r26
    2f9e:	64 9f       	mul	r22, r20
    2fa0:	66 27       	eor	r22, r22
    2fa2:	b0 0d       	add	r27, r0
    2fa4:	a1 1d       	adc	r26, r1
    2fa6:	66 1f       	adc	r22, r22
    2fa8:	82 9f       	mul	r24, r18
    2faa:	22 27       	eor	r18, r18
    2fac:	b0 0d       	add	r27, r0
    2fae:	a1 1d       	adc	r26, r1
    2fb0:	62 1f       	adc	r22, r18
    2fb2:	73 9f       	mul	r23, r19
    2fb4:	b0 0d       	add	r27, r0
    2fb6:	a1 1d       	adc	r26, r1
    2fb8:	62 1f       	adc	r22, r18
    2fba:	83 9f       	mul	r24, r19
    2fbc:	a0 0d       	add	r26, r0
    2fbe:	61 1d       	adc	r22, r1
    2fc0:	22 1f       	adc	r18, r18
    2fc2:	74 9f       	mul	r23, r20
    2fc4:	33 27       	eor	r19, r19
    2fc6:	a0 0d       	add	r26, r0
    2fc8:	61 1d       	adc	r22, r1
    2fca:	23 1f       	adc	r18, r19
    2fcc:	84 9f       	mul	r24, r20
    2fce:	60 0d       	add	r22, r0
    2fd0:	21 1d       	adc	r18, r1
    2fd2:	82 2f       	mov	r24, r18
    2fd4:	76 2f       	mov	r23, r22
    2fd6:	6a 2f       	mov	r22, r26
    2fd8:	11 24       	eor	r1, r1
    2fda:	9f 57       	subi	r25, 0x7F	; 127
    2fdc:	50 40       	sbci	r21, 0x00	; 0
    2fde:	8a f0       	brmi	.+34     	; 0x3002 <__mulsf3_pse+0x84>
    2fe0:	e1 f0       	breq	.+56     	; 0x301a <__mulsf3_pse+0x9c>
    2fe2:	88 23       	and	r24, r24
    2fe4:	4a f0       	brmi	.+18     	; 0x2ff8 <__mulsf3_pse+0x7a>
    2fe6:	ee 0f       	add	r30, r30
    2fe8:	ff 1f       	adc	r31, r31
    2fea:	bb 1f       	adc	r27, r27
    2fec:	66 1f       	adc	r22, r22
    2fee:	77 1f       	adc	r23, r23
    2ff0:	88 1f       	adc	r24, r24
    2ff2:	91 50       	subi	r25, 0x01	; 1
    2ff4:	50 40       	sbci	r21, 0x00	; 0
    2ff6:	a9 f7       	brne	.-22     	; 0x2fe2 <__mulsf3_pse+0x64>
    2ff8:	9e 3f       	cpi	r25, 0xFE	; 254
    2ffa:	51 05       	cpc	r21, r1
    2ffc:	70 f0       	brcs	.+28     	; 0x301a <__mulsf3_pse+0x9c>
    2ffe:	60 cf       	rjmp	.-320    	; 0x2ec0 <__fp_inf>
    3000:	aa cf       	rjmp	.-172    	; 0x2f56 <__fp_szero>
    3002:	5f 3f       	cpi	r21, 0xFF	; 255
    3004:	ec f3       	brlt	.-6      	; 0x3000 <__mulsf3_pse+0x82>
    3006:	98 3e       	cpi	r25, 0xE8	; 232
    3008:	dc f3       	brlt	.-10     	; 0x3000 <__mulsf3_pse+0x82>
    300a:	86 95       	lsr	r24
    300c:	77 95       	ror	r23
    300e:	67 95       	ror	r22
    3010:	b7 95       	ror	r27
    3012:	f7 95       	ror	r31
    3014:	e7 95       	ror	r30
    3016:	9f 5f       	subi	r25, 0xFF	; 255
    3018:	c1 f7       	brne	.-16     	; 0x300a <__mulsf3_pse+0x8c>
    301a:	fe 2b       	or	r31, r30
    301c:	88 0f       	add	r24, r24
    301e:	91 1d       	adc	r25, r1
    3020:	96 95       	lsr	r25
    3022:	87 95       	ror	r24
    3024:	97 f9       	bld	r25, 7
    3026:	08 95       	ret

00003028 <strcpy>:
    3028:	fb 01       	movw	r30, r22
    302a:	dc 01       	movw	r26, r24
    302c:	01 90       	ld	r0, Z+
    302e:	0d 92       	st	X+, r0
    3030:	00 20       	and	r0, r0
    3032:	e1 f7       	brne	.-8      	; 0x302c <strcpy+0x4>
    3034:	08 95       	ret

00003036 <snprintf>:
    3036:	ae e0       	ldi	r26, 0x0E	; 14
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e0 e2       	ldi	r30, 0x20	; 32
    303c:	f8 e1       	ldi	r31, 0x18	; 24
    303e:	9f c2       	rjmp	.+1342   	; 0x357e <__prologue_saves__+0x1c>
    3040:	0d 89       	ldd	r16, Y+21	; 0x15
    3042:	1e 89       	ldd	r17, Y+22	; 0x16
    3044:	8f 89       	ldd	r24, Y+23	; 0x17
    3046:	98 8d       	ldd	r25, Y+24	; 0x18
    3048:	26 e0       	ldi	r18, 0x06	; 6
    304a:	2c 83       	std	Y+4, r18	; 0x04
    304c:	1a 83       	std	Y+2, r17	; 0x02
    304e:	09 83       	std	Y+1, r16	; 0x01
    3050:	97 ff       	sbrs	r25, 7
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <snprintf+0x22>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e8       	ldi	r25, 0x80	; 128
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	ae 01       	movw	r20, r28
    3060:	45 5e       	subi	r20, 0xE5	; 229
    3062:	5f 4f       	sbci	r21, 0xFF	; 255
    3064:	69 8d       	ldd	r22, Y+25	; 0x19
    3066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3068:	ce 01       	movw	r24, r28
    306a:	01 96       	adiw	r24, 0x01	; 1
    306c:	11 d0       	rcall	.+34     	; 0x3090 <vfprintf>
    306e:	4d 81       	ldd	r20, Y+5	; 0x05
    3070:	5e 81       	ldd	r21, Y+6	; 0x06
    3072:	57 fd       	sbrc	r21, 7
    3074:	0a c0       	rjmp	.+20     	; 0x308a <snprintf+0x54>
    3076:	2f 81       	ldd	r18, Y+7	; 0x07
    3078:	38 85       	ldd	r19, Y+8	; 0x08
    307a:	42 17       	cp	r20, r18
    307c:	53 07       	cpc	r21, r19
    307e:	0c f4       	brge	.+2      	; 0x3082 <snprintf+0x4c>
    3080:	9a 01       	movw	r18, r20
    3082:	f8 01       	movw	r30, r16
    3084:	e2 0f       	add	r30, r18
    3086:	f3 1f       	adc	r31, r19
    3088:	10 82       	st	Z, r1
    308a:	2e 96       	adiw	r28, 0x0e	; 14
    308c:	e4 e0       	ldi	r30, 0x04	; 4
    308e:	93 c2       	rjmp	.+1318   	; 0x35b6 <__epilogue_restores__+0x1c>

00003090 <vfprintf>:
    3090:	ac e0       	ldi	r26, 0x0C	; 12
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	ed e4       	ldi	r30, 0x4D	; 77
    3096:	f8 e1       	ldi	r31, 0x18	; 24
    3098:	64 c2       	rjmp	.+1224   	; 0x3562 <__prologue_saves__>
    309a:	7c 01       	movw	r14, r24
    309c:	6b 01       	movw	r12, r22
    309e:	8a 01       	movw	r16, r20
    30a0:	fc 01       	movw	r30, r24
    30a2:	17 82       	std	Z+7, r1	; 0x07
    30a4:	16 82       	std	Z+6, r1	; 0x06
    30a6:	83 81       	ldd	r24, Z+3	; 0x03
    30a8:	81 ff       	sbrs	r24, 1
    30aa:	b0 c1       	rjmp	.+864    	; 0x340c <vfprintf+0x37c>
    30ac:	ce 01       	movw	r24, r28
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	4c 01       	movw	r8, r24
    30b2:	f7 01       	movw	r30, r14
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	f6 01       	movw	r30, r12
    30b8:	93 fd       	sbrc	r25, 3
    30ba:	85 91       	lpm	r24, Z+
    30bc:	93 ff       	sbrs	r25, 3
    30be:	81 91       	ld	r24, Z+
    30c0:	6f 01       	movw	r12, r30
    30c2:	88 23       	and	r24, r24
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <vfprintf+0x38>
    30c6:	9e c1       	rjmp	.+828    	; 0x3404 <vfprintf+0x374>
    30c8:	85 32       	cpi	r24, 0x25	; 37
    30ca:	39 f4       	brne	.+14     	; 0x30da <vfprintf+0x4a>
    30cc:	93 fd       	sbrc	r25, 3
    30ce:	85 91       	lpm	r24, Z+
    30d0:	93 ff       	sbrs	r25, 3
    30d2:	81 91       	ld	r24, Z+
    30d4:	6f 01       	movw	r12, r30
    30d6:	85 32       	cpi	r24, 0x25	; 37
    30d8:	21 f4       	brne	.+8      	; 0x30e2 <vfprintf+0x52>
    30da:	b7 01       	movw	r22, r14
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	b1 d1       	rcall	.+866    	; 0x3442 <fputc>
    30e0:	e8 cf       	rjmp	.-48     	; 0x30b2 <vfprintf+0x22>
    30e2:	51 2c       	mov	r5, r1
    30e4:	31 2c       	mov	r3, r1
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	20 32       	cpi	r18, 0x20	; 32
    30ea:	a0 f4       	brcc	.+40     	; 0x3114 <vfprintf+0x84>
    30ec:	8b 32       	cpi	r24, 0x2B	; 43
    30ee:	69 f0       	breq	.+26     	; 0x310a <vfprintf+0x7a>
    30f0:	30 f4       	brcc	.+12     	; 0x30fe <vfprintf+0x6e>
    30f2:	80 32       	cpi	r24, 0x20	; 32
    30f4:	59 f0       	breq	.+22     	; 0x310c <vfprintf+0x7c>
    30f6:	83 32       	cpi	r24, 0x23	; 35
    30f8:	69 f4       	brne	.+26     	; 0x3114 <vfprintf+0x84>
    30fa:	20 61       	ori	r18, 0x10	; 16
    30fc:	2c c0       	rjmp	.+88     	; 0x3156 <vfprintf+0xc6>
    30fe:	8d 32       	cpi	r24, 0x2D	; 45
    3100:	39 f0       	breq	.+14     	; 0x3110 <vfprintf+0x80>
    3102:	80 33       	cpi	r24, 0x30	; 48
    3104:	39 f4       	brne	.+14     	; 0x3114 <vfprintf+0x84>
    3106:	21 60       	ori	r18, 0x01	; 1
    3108:	26 c0       	rjmp	.+76     	; 0x3156 <vfprintf+0xc6>
    310a:	22 60       	ori	r18, 0x02	; 2
    310c:	24 60       	ori	r18, 0x04	; 4
    310e:	23 c0       	rjmp	.+70     	; 0x3156 <vfprintf+0xc6>
    3110:	28 60       	ori	r18, 0x08	; 8
    3112:	21 c0       	rjmp	.+66     	; 0x3156 <vfprintf+0xc6>
    3114:	27 fd       	sbrc	r18, 7
    3116:	27 c0       	rjmp	.+78     	; 0x3166 <vfprintf+0xd6>
    3118:	30 ed       	ldi	r19, 0xD0	; 208
    311a:	38 0f       	add	r19, r24
    311c:	3a 30       	cpi	r19, 0x0A	; 10
    311e:	78 f4       	brcc	.+30     	; 0x313e <vfprintf+0xae>
    3120:	26 ff       	sbrs	r18, 6
    3122:	06 c0       	rjmp	.+12     	; 0x3130 <vfprintf+0xa0>
    3124:	fa e0       	ldi	r31, 0x0A	; 10
    3126:	5f 9e       	mul	r5, r31
    3128:	30 0d       	add	r19, r0
    312a:	11 24       	eor	r1, r1
    312c:	53 2e       	mov	r5, r19
    312e:	13 c0       	rjmp	.+38     	; 0x3156 <vfprintf+0xc6>
    3130:	8a e0       	ldi	r24, 0x0A	; 10
    3132:	38 9e       	mul	r3, r24
    3134:	30 0d       	add	r19, r0
    3136:	11 24       	eor	r1, r1
    3138:	33 2e       	mov	r3, r19
    313a:	20 62       	ori	r18, 0x20	; 32
    313c:	0c c0       	rjmp	.+24     	; 0x3156 <vfprintf+0xc6>
    313e:	8e 32       	cpi	r24, 0x2E	; 46
    3140:	21 f4       	brne	.+8      	; 0x314a <vfprintf+0xba>
    3142:	26 fd       	sbrc	r18, 6
    3144:	5f c1       	rjmp	.+702    	; 0x3404 <vfprintf+0x374>
    3146:	20 64       	ori	r18, 0x40	; 64
    3148:	06 c0       	rjmp	.+12     	; 0x3156 <vfprintf+0xc6>
    314a:	8c 36       	cpi	r24, 0x6C	; 108
    314c:	11 f4       	brne	.+4      	; 0x3152 <vfprintf+0xc2>
    314e:	20 68       	ori	r18, 0x80	; 128
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <vfprintf+0xc6>
    3152:	88 36       	cpi	r24, 0x68	; 104
    3154:	41 f4       	brne	.+16     	; 0x3166 <vfprintf+0xd6>
    3156:	f6 01       	movw	r30, r12
    3158:	93 fd       	sbrc	r25, 3
    315a:	85 91       	lpm	r24, Z+
    315c:	93 ff       	sbrs	r25, 3
    315e:	81 91       	ld	r24, Z+
    3160:	6f 01       	movw	r12, r30
    3162:	81 11       	cpse	r24, r1
    3164:	c1 cf       	rjmp	.-126    	; 0x30e8 <vfprintf+0x58>
    3166:	98 2f       	mov	r25, r24
    3168:	9f 7d       	andi	r25, 0xDF	; 223
    316a:	95 54       	subi	r25, 0x45	; 69
    316c:	93 30       	cpi	r25, 0x03	; 3
    316e:	28 f4       	brcc	.+10     	; 0x317a <vfprintf+0xea>
    3170:	0c 5f       	subi	r16, 0xFC	; 252
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	ff e3       	ldi	r31, 0x3F	; 63
    3176:	f9 83       	std	Y+1, r31	; 0x01
    3178:	0d c0       	rjmp	.+26     	; 0x3194 <vfprintf+0x104>
    317a:	83 36       	cpi	r24, 0x63	; 99
    317c:	31 f0       	breq	.+12     	; 0x318a <vfprintf+0xfa>
    317e:	83 37       	cpi	r24, 0x73	; 115
    3180:	71 f0       	breq	.+28     	; 0x319e <vfprintf+0x10e>
    3182:	83 35       	cpi	r24, 0x53	; 83
    3184:	09 f0       	breq	.+2      	; 0x3188 <vfprintf+0xf8>
    3186:	57 c0       	rjmp	.+174    	; 0x3236 <vfprintf+0x1a6>
    3188:	21 c0       	rjmp	.+66     	; 0x31cc <vfprintf+0x13c>
    318a:	f8 01       	movw	r30, r16
    318c:	80 81       	ld	r24, Z
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	0e 5f       	subi	r16, 0xFE	; 254
    3192:	1f 4f       	sbci	r17, 0xFF	; 255
    3194:	44 24       	eor	r4, r4
    3196:	43 94       	inc	r4
    3198:	51 2c       	mov	r5, r1
    319a:	54 01       	movw	r10, r8
    319c:	14 c0       	rjmp	.+40     	; 0x31c6 <vfprintf+0x136>
    319e:	38 01       	movw	r6, r16
    31a0:	f2 e0       	ldi	r31, 0x02	; 2
    31a2:	6f 0e       	add	r6, r31
    31a4:	71 1c       	adc	r7, r1
    31a6:	f8 01       	movw	r30, r16
    31a8:	a0 80       	ld	r10, Z
    31aa:	b1 80       	ldd	r11, Z+1	; 0x01
    31ac:	26 ff       	sbrs	r18, 6
    31ae:	03 c0       	rjmp	.+6      	; 0x31b6 <vfprintf+0x126>
    31b0:	65 2d       	mov	r22, r5
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <vfprintf+0x12a>
    31b6:	6f ef       	ldi	r22, 0xFF	; 255
    31b8:	7f ef       	ldi	r23, 0xFF	; 255
    31ba:	c5 01       	movw	r24, r10
    31bc:	2c 87       	std	Y+12, r18	; 0x0c
    31be:	36 d1       	rcall	.+620    	; 0x342c <strnlen>
    31c0:	2c 01       	movw	r4, r24
    31c2:	83 01       	movw	r16, r6
    31c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    31c6:	2f 77       	andi	r18, 0x7F	; 127
    31c8:	22 2e       	mov	r2, r18
    31ca:	16 c0       	rjmp	.+44     	; 0x31f8 <vfprintf+0x168>
    31cc:	38 01       	movw	r6, r16
    31ce:	f2 e0       	ldi	r31, 0x02	; 2
    31d0:	6f 0e       	add	r6, r31
    31d2:	71 1c       	adc	r7, r1
    31d4:	f8 01       	movw	r30, r16
    31d6:	a0 80       	ld	r10, Z
    31d8:	b1 80       	ldd	r11, Z+1	; 0x01
    31da:	26 ff       	sbrs	r18, 6
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <vfprintf+0x154>
    31de:	65 2d       	mov	r22, r5
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <vfprintf+0x158>
    31e4:	6f ef       	ldi	r22, 0xFF	; 255
    31e6:	7f ef       	ldi	r23, 0xFF	; 255
    31e8:	c5 01       	movw	r24, r10
    31ea:	2c 87       	std	Y+12, r18	; 0x0c
    31ec:	14 d1       	rcall	.+552    	; 0x3416 <strnlen_P>
    31ee:	2c 01       	movw	r4, r24
    31f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    31f2:	20 68       	ori	r18, 0x80	; 128
    31f4:	22 2e       	mov	r2, r18
    31f6:	83 01       	movw	r16, r6
    31f8:	23 fc       	sbrc	r2, 3
    31fa:	19 c0       	rjmp	.+50     	; 0x322e <vfprintf+0x19e>
    31fc:	83 2d       	mov	r24, r3
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	48 16       	cp	r4, r24
    3202:	59 06       	cpc	r5, r25
    3204:	a0 f4       	brcc	.+40     	; 0x322e <vfprintf+0x19e>
    3206:	b7 01       	movw	r22, r14
    3208:	80 e2       	ldi	r24, 0x20	; 32
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	1a d1       	rcall	.+564    	; 0x3442 <fputc>
    320e:	3a 94       	dec	r3
    3210:	f5 cf       	rjmp	.-22     	; 0x31fc <vfprintf+0x16c>
    3212:	f5 01       	movw	r30, r10
    3214:	27 fc       	sbrc	r2, 7
    3216:	85 91       	lpm	r24, Z+
    3218:	27 fe       	sbrs	r2, 7
    321a:	81 91       	ld	r24, Z+
    321c:	5f 01       	movw	r10, r30
    321e:	b7 01       	movw	r22, r14
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0f d1       	rcall	.+542    	; 0x3442 <fputc>
    3224:	31 10       	cpse	r3, r1
    3226:	3a 94       	dec	r3
    3228:	f1 e0       	ldi	r31, 0x01	; 1
    322a:	4f 1a       	sub	r4, r31
    322c:	51 08       	sbc	r5, r1
    322e:	41 14       	cp	r4, r1
    3230:	51 04       	cpc	r5, r1
    3232:	79 f7       	brne	.-34     	; 0x3212 <vfprintf+0x182>
    3234:	de c0       	rjmp	.+444    	; 0x33f2 <vfprintf+0x362>
    3236:	84 36       	cpi	r24, 0x64	; 100
    3238:	11 f0       	breq	.+4      	; 0x323e <vfprintf+0x1ae>
    323a:	89 36       	cpi	r24, 0x69	; 105
    323c:	31 f5       	brne	.+76     	; 0x328a <vfprintf+0x1fa>
    323e:	f8 01       	movw	r30, r16
    3240:	27 ff       	sbrs	r18, 7
    3242:	07 c0       	rjmp	.+14     	; 0x3252 <vfprintf+0x1c2>
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	0c 5f       	subi	r16, 0xFC	; 252
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	08 c0       	rjmp	.+16     	; 0x3262 <vfprintf+0x1d2>
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	88 27       	eor	r24, r24
    3258:	77 fd       	sbrc	r23, 7
    325a:	80 95       	com	r24
    325c:	98 2f       	mov	r25, r24
    325e:	0e 5f       	subi	r16, 0xFE	; 254
    3260:	1f 4f       	sbci	r17, 0xFF	; 255
    3262:	2f 76       	andi	r18, 0x6F	; 111
    3264:	b2 2e       	mov	r11, r18
    3266:	97 ff       	sbrs	r25, 7
    3268:	09 c0       	rjmp	.+18     	; 0x327c <vfprintf+0x1ec>
    326a:	90 95       	com	r25
    326c:	80 95       	com	r24
    326e:	70 95       	com	r23
    3270:	61 95       	neg	r22
    3272:	7f 4f       	sbci	r23, 0xFF	; 255
    3274:	8f 4f       	sbci	r24, 0xFF	; 255
    3276:	9f 4f       	sbci	r25, 0xFF	; 255
    3278:	20 68       	ori	r18, 0x80	; 128
    327a:	b2 2e       	mov	r11, r18
    327c:	2a e0       	ldi	r18, 0x0A	; 10
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	a4 01       	movw	r20, r8
    3282:	11 d1       	rcall	.+546    	; 0x34a6 <__ultoa_invert>
    3284:	a8 2e       	mov	r10, r24
    3286:	a8 18       	sub	r10, r8
    3288:	43 c0       	rjmp	.+134    	; 0x3310 <vfprintf+0x280>
    328a:	85 37       	cpi	r24, 0x75	; 117
    328c:	29 f4       	brne	.+10     	; 0x3298 <vfprintf+0x208>
    328e:	2f 7e       	andi	r18, 0xEF	; 239
    3290:	b2 2e       	mov	r11, r18
    3292:	2a e0       	ldi	r18, 0x0A	; 10
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	25 c0       	rjmp	.+74     	; 0x32e2 <vfprintf+0x252>
    3298:	f2 2f       	mov	r31, r18
    329a:	f9 7f       	andi	r31, 0xF9	; 249
    329c:	bf 2e       	mov	r11, r31
    329e:	8f 36       	cpi	r24, 0x6F	; 111
    32a0:	c1 f0       	breq	.+48     	; 0x32d2 <vfprintf+0x242>
    32a2:	18 f4       	brcc	.+6      	; 0x32aa <vfprintf+0x21a>
    32a4:	88 35       	cpi	r24, 0x58	; 88
    32a6:	79 f0       	breq	.+30     	; 0x32c6 <vfprintf+0x236>
    32a8:	ad c0       	rjmp	.+346    	; 0x3404 <vfprintf+0x374>
    32aa:	80 37       	cpi	r24, 0x70	; 112
    32ac:	19 f0       	breq	.+6      	; 0x32b4 <vfprintf+0x224>
    32ae:	88 37       	cpi	r24, 0x78	; 120
    32b0:	21 f0       	breq	.+8      	; 0x32ba <vfprintf+0x22a>
    32b2:	a8 c0       	rjmp	.+336    	; 0x3404 <vfprintf+0x374>
    32b4:	2f 2f       	mov	r18, r31
    32b6:	20 61       	ori	r18, 0x10	; 16
    32b8:	b2 2e       	mov	r11, r18
    32ba:	b4 fe       	sbrs	r11, 4
    32bc:	0d c0       	rjmp	.+26     	; 0x32d8 <vfprintf+0x248>
    32be:	8b 2d       	mov	r24, r11
    32c0:	84 60       	ori	r24, 0x04	; 4
    32c2:	b8 2e       	mov	r11, r24
    32c4:	09 c0       	rjmp	.+18     	; 0x32d8 <vfprintf+0x248>
    32c6:	24 ff       	sbrs	r18, 4
    32c8:	0a c0       	rjmp	.+20     	; 0x32de <vfprintf+0x24e>
    32ca:	9f 2f       	mov	r25, r31
    32cc:	96 60       	ori	r25, 0x06	; 6
    32ce:	b9 2e       	mov	r11, r25
    32d0:	06 c0       	rjmp	.+12     	; 0x32de <vfprintf+0x24e>
    32d2:	28 e0       	ldi	r18, 0x08	; 8
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	05 c0       	rjmp	.+10     	; 0x32e2 <vfprintf+0x252>
    32d8:	20 e1       	ldi	r18, 0x10	; 16
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	02 c0       	rjmp	.+4      	; 0x32e2 <vfprintf+0x252>
    32de:	20 e1       	ldi	r18, 0x10	; 16
    32e0:	32 e0       	ldi	r19, 0x02	; 2
    32e2:	f8 01       	movw	r30, r16
    32e4:	b7 fe       	sbrs	r11, 7
    32e6:	07 c0       	rjmp	.+14     	; 0x32f6 <vfprintf+0x266>
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	93 81       	ldd	r25, Z+3	; 0x03
    32f0:	0c 5f       	subi	r16, 0xFC	; 252
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	06 c0       	rjmp	.+12     	; 0x3302 <vfprintf+0x272>
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 5f       	subi	r16, 0xFE	; 254
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	a4 01       	movw	r20, r8
    3304:	d0 d0       	rcall	.+416    	; 0x34a6 <__ultoa_invert>
    3306:	a8 2e       	mov	r10, r24
    3308:	a8 18       	sub	r10, r8
    330a:	fb 2d       	mov	r31, r11
    330c:	ff 77       	andi	r31, 0x7F	; 127
    330e:	bf 2e       	mov	r11, r31
    3310:	b6 fe       	sbrs	r11, 6
    3312:	0b c0       	rjmp	.+22     	; 0x332a <vfprintf+0x29a>
    3314:	2b 2d       	mov	r18, r11
    3316:	2e 7f       	andi	r18, 0xFE	; 254
    3318:	a5 14       	cp	r10, r5
    331a:	50 f4       	brcc	.+20     	; 0x3330 <vfprintf+0x2a0>
    331c:	b4 fe       	sbrs	r11, 4
    331e:	0a c0       	rjmp	.+20     	; 0x3334 <vfprintf+0x2a4>
    3320:	b2 fc       	sbrc	r11, 2
    3322:	08 c0       	rjmp	.+16     	; 0x3334 <vfprintf+0x2a4>
    3324:	2b 2d       	mov	r18, r11
    3326:	2e 7e       	andi	r18, 0xEE	; 238
    3328:	05 c0       	rjmp	.+10     	; 0x3334 <vfprintf+0x2a4>
    332a:	7a 2c       	mov	r7, r10
    332c:	2b 2d       	mov	r18, r11
    332e:	03 c0       	rjmp	.+6      	; 0x3336 <vfprintf+0x2a6>
    3330:	7a 2c       	mov	r7, r10
    3332:	01 c0       	rjmp	.+2      	; 0x3336 <vfprintf+0x2a6>
    3334:	75 2c       	mov	r7, r5
    3336:	24 ff       	sbrs	r18, 4
    3338:	0d c0       	rjmp	.+26     	; 0x3354 <vfprintf+0x2c4>
    333a:	fe 01       	movw	r30, r28
    333c:	ea 0d       	add	r30, r10
    333e:	f1 1d       	adc	r31, r1
    3340:	80 81       	ld	r24, Z
    3342:	80 33       	cpi	r24, 0x30	; 48
    3344:	11 f4       	brne	.+4      	; 0x334a <vfprintf+0x2ba>
    3346:	29 7e       	andi	r18, 0xE9	; 233
    3348:	09 c0       	rjmp	.+18     	; 0x335c <vfprintf+0x2cc>
    334a:	22 ff       	sbrs	r18, 2
    334c:	06 c0       	rjmp	.+12     	; 0x335a <vfprintf+0x2ca>
    334e:	73 94       	inc	r7
    3350:	73 94       	inc	r7
    3352:	04 c0       	rjmp	.+8      	; 0x335c <vfprintf+0x2cc>
    3354:	82 2f       	mov	r24, r18
    3356:	86 78       	andi	r24, 0x86	; 134
    3358:	09 f0       	breq	.+2      	; 0x335c <vfprintf+0x2cc>
    335a:	73 94       	inc	r7
    335c:	23 fd       	sbrc	r18, 3
    335e:	12 c0       	rjmp	.+36     	; 0x3384 <vfprintf+0x2f4>
    3360:	20 ff       	sbrs	r18, 0
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <vfprintf+0x2e0>
    3364:	5a 2c       	mov	r5, r10
    3366:	73 14       	cp	r7, r3
    3368:	18 f4       	brcc	.+6      	; 0x3370 <vfprintf+0x2e0>
    336a:	53 0c       	add	r5, r3
    336c:	57 18       	sub	r5, r7
    336e:	73 2c       	mov	r7, r3
    3370:	73 14       	cp	r7, r3
    3372:	60 f4       	brcc	.+24     	; 0x338c <vfprintf+0x2fc>
    3374:	b7 01       	movw	r22, r14
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	2c 87       	std	Y+12, r18	; 0x0c
    337c:	62 d0       	rcall	.+196    	; 0x3442 <fputc>
    337e:	73 94       	inc	r7
    3380:	2c 85       	ldd	r18, Y+12	; 0x0c
    3382:	f6 cf       	rjmp	.-20     	; 0x3370 <vfprintf+0x2e0>
    3384:	73 14       	cp	r7, r3
    3386:	10 f4       	brcc	.+4      	; 0x338c <vfprintf+0x2fc>
    3388:	37 18       	sub	r3, r7
    338a:	01 c0       	rjmp	.+2      	; 0x338e <vfprintf+0x2fe>
    338c:	31 2c       	mov	r3, r1
    338e:	24 ff       	sbrs	r18, 4
    3390:	11 c0       	rjmp	.+34     	; 0x33b4 <vfprintf+0x324>
    3392:	b7 01       	movw	r22, r14
    3394:	80 e3       	ldi	r24, 0x30	; 48
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	2c 87       	std	Y+12, r18	; 0x0c
    339a:	53 d0       	rcall	.+166    	; 0x3442 <fputc>
    339c:	2c 85       	ldd	r18, Y+12	; 0x0c
    339e:	22 ff       	sbrs	r18, 2
    33a0:	16 c0       	rjmp	.+44     	; 0x33ce <vfprintf+0x33e>
    33a2:	21 ff       	sbrs	r18, 1
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <vfprintf+0x31c>
    33a6:	88 e5       	ldi	r24, 0x58	; 88
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <vfprintf+0x320>
    33ac:	88 e7       	ldi	r24, 0x78	; 120
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	b7 01       	movw	r22, r14
    33b2:	0c c0       	rjmp	.+24     	; 0x33cc <vfprintf+0x33c>
    33b4:	82 2f       	mov	r24, r18
    33b6:	86 78       	andi	r24, 0x86	; 134
    33b8:	51 f0       	breq	.+20     	; 0x33ce <vfprintf+0x33e>
    33ba:	21 fd       	sbrc	r18, 1
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <vfprintf+0x332>
    33be:	80 e2       	ldi	r24, 0x20	; 32
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <vfprintf+0x334>
    33c2:	8b e2       	ldi	r24, 0x2B	; 43
    33c4:	27 fd       	sbrc	r18, 7
    33c6:	8d e2       	ldi	r24, 0x2D	; 45
    33c8:	b7 01       	movw	r22, r14
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	3a d0       	rcall	.+116    	; 0x3442 <fputc>
    33ce:	a5 14       	cp	r10, r5
    33d0:	30 f4       	brcc	.+12     	; 0x33de <vfprintf+0x34e>
    33d2:	b7 01       	movw	r22, r14
    33d4:	80 e3       	ldi	r24, 0x30	; 48
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	34 d0       	rcall	.+104    	; 0x3442 <fputc>
    33da:	5a 94       	dec	r5
    33dc:	f8 cf       	rjmp	.-16     	; 0x33ce <vfprintf+0x33e>
    33de:	aa 94       	dec	r10
    33e0:	f4 01       	movw	r30, r8
    33e2:	ea 0d       	add	r30, r10
    33e4:	f1 1d       	adc	r31, r1
    33e6:	80 81       	ld	r24, Z
    33e8:	b7 01       	movw	r22, r14
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	2a d0       	rcall	.+84     	; 0x3442 <fputc>
    33ee:	a1 10       	cpse	r10, r1
    33f0:	f6 cf       	rjmp	.-20     	; 0x33de <vfprintf+0x34e>
    33f2:	33 20       	and	r3, r3
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <vfprintf+0x368>
    33f6:	5d ce       	rjmp	.-838    	; 0x30b2 <vfprintf+0x22>
    33f8:	b7 01       	movw	r22, r14
    33fa:	80 e2       	ldi	r24, 0x20	; 32
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	21 d0       	rcall	.+66     	; 0x3442 <fputc>
    3400:	3a 94       	dec	r3
    3402:	f7 cf       	rjmp	.-18     	; 0x33f2 <vfprintf+0x362>
    3404:	f7 01       	movw	r30, r14
    3406:	86 81       	ldd	r24, Z+6	; 0x06
    3408:	97 81       	ldd	r25, Z+7	; 0x07
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <vfprintf+0x380>
    340c:	8f ef       	ldi	r24, 0xFF	; 255
    340e:	9f ef       	ldi	r25, 0xFF	; 255
    3410:	2c 96       	adiw	r28, 0x0c	; 12
    3412:	e2 e1       	ldi	r30, 0x12	; 18
    3414:	c2 c0       	rjmp	.+388    	; 0x359a <__epilogue_restores__>

00003416 <strnlen_P>:
    3416:	fc 01       	movw	r30, r24
    3418:	05 90       	lpm	r0, Z+
    341a:	61 50       	subi	r22, 0x01	; 1
    341c:	70 40       	sbci	r23, 0x00	; 0
    341e:	01 10       	cpse	r0, r1
    3420:	d8 f7       	brcc	.-10     	; 0x3418 <strnlen_P+0x2>
    3422:	80 95       	com	r24
    3424:	90 95       	com	r25
    3426:	8e 0f       	add	r24, r30
    3428:	9f 1f       	adc	r25, r31
    342a:	08 95       	ret

0000342c <strnlen>:
    342c:	fc 01       	movw	r30, r24
    342e:	61 50       	subi	r22, 0x01	; 1
    3430:	70 40       	sbci	r23, 0x00	; 0
    3432:	01 90       	ld	r0, Z+
    3434:	01 10       	cpse	r0, r1
    3436:	d8 f7       	brcc	.-10     	; 0x342e <strnlen+0x2>
    3438:	80 95       	com	r24
    343a:	90 95       	com	r25
    343c:	8e 0f       	add	r24, r30
    343e:	9f 1f       	adc	r25, r31
    3440:	08 95       	ret

00003442 <fputc>:
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	18 2f       	mov	r17, r24
    344c:	09 2f       	mov	r16, r25
    344e:	eb 01       	movw	r28, r22
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	81 fd       	sbrc	r24, 1
    3454:	03 c0       	rjmp	.+6      	; 0x345c <fputc+0x1a>
    3456:	8f ef       	ldi	r24, 0xFF	; 255
    3458:	9f ef       	ldi	r25, 0xFF	; 255
    345a:	20 c0       	rjmp	.+64     	; 0x349c <fputc+0x5a>
    345c:	82 ff       	sbrs	r24, 2
    345e:	10 c0       	rjmp	.+32     	; 0x3480 <fputc+0x3e>
    3460:	4e 81       	ldd	r20, Y+6	; 0x06
    3462:	5f 81       	ldd	r21, Y+7	; 0x07
    3464:	2c 81       	ldd	r18, Y+4	; 0x04
    3466:	3d 81       	ldd	r19, Y+5	; 0x05
    3468:	42 17       	cp	r20, r18
    346a:	53 07       	cpc	r21, r19
    346c:	7c f4       	brge	.+30     	; 0x348c <fputc+0x4a>
    346e:	e8 81       	ld	r30, Y
    3470:	f9 81       	ldd	r31, Y+1	; 0x01
    3472:	9f 01       	movw	r18, r30
    3474:	2f 5f       	subi	r18, 0xFF	; 255
    3476:	3f 4f       	sbci	r19, 0xFF	; 255
    3478:	39 83       	std	Y+1, r19	; 0x01
    347a:	28 83       	st	Y, r18
    347c:	10 83       	st	Z, r17
    347e:	06 c0       	rjmp	.+12     	; 0x348c <fputc+0x4a>
    3480:	e8 85       	ldd	r30, Y+8	; 0x08
    3482:	f9 85       	ldd	r31, Y+9	; 0x09
    3484:	81 2f       	mov	r24, r17
    3486:	09 95       	icall
    3488:	89 2b       	or	r24, r25
    348a:	29 f7       	brne	.-54     	; 0x3456 <fputc+0x14>
    348c:	2e 81       	ldd	r18, Y+6	; 0x06
    348e:	3f 81       	ldd	r19, Y+7	; 0x07
    3490:	2f 5f       	subi	r18, 0xFF	; 255
    3492:	3f 4f       	sbci	r19, 0xFF	; 255
    3494:	3f 83       	std	Y+7, r19	; 0x07
    3496:	2e 83       	std	Y+6, r18	; 0x06
    3498:	81 2f       	mov	r24, r17
    349a:	90 2f       	mov	r25, r16
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	08 95       	ret

000034a6 <__ultoa_invert>:
    34a6:	fa 01       	movw	r30, r20
    34a8:	aa 27       	eor	r26, r26
    34aa:	28 30       	cpi	r18, 0x08	; 8
    34ac:	51 f1       	breq	.+84     	; 0x3502 <__ultoa_invert+0x5c>
    34ae:	20 31       	cpi	r18, 0x10	; 16
    34b0:	81 f1       	breq	.+96     	; 0x3512 <__ultoa_invert+0x6c>
    34b2:	e8 94       	clt
    34b4:	6f 93       	push	r22
    34b6:	6e 7f       	andi	r22, 0xFE	; 254
    34b8:	6e 5f       	subi	r22, 0xFE	; 254
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	8f 4f       	sbci	r24, 0xFF	; 255
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	af 4f       	sbci	r26, 0xFF	; 255
    34c2:	b1 e0       	ldi	r27, 0x01	; 1
    34c4:	3e d0       	rcall	.+124    	; 0x3542 <__ultoa_invert+0x9c>
    34c6:	b4 e0       	ldi	r27, 0x04	; 4
    34c8:	3c d0       	rcall	.+120    	; 0x3542 <__ultoa_invert+0x9c>
    34ca:	67 0f       	add	r22, r23
    34cc:	78 1f       	adc	r23, r24
    34ce:	89 1f       	adc	r24, r25
    34d0:	9a 1f       	adc	r25, r26
    34d2:	a1 1d       	adc	r26, r1
    34d4:	68 0f       	add	r22, r24
    34d6:	79 1f       	adc	r23, r25
    34d8:	8a 1f       	adc	r24, r26
    34da:	91 1d       	adc	r25, r1
    34dc:	a1 1d       	adc	r26, r1
    34de:	6a 0f       	add	r22, r26
    34e0:	71 1d       	adc	r23, r1
    34e2:	81 1d       	adc	r24, r1
    34e4:	91 1d       	adc	r25, r1
    34e6:	a1 1d       	adc	r26, r1
    34e8:	20 d0       	rcall	.+64     	; 0x352a <__ultoa_invert+0x84>
    34ea:	09 f4       	brne	.+2      	; 0x34ee <__ultoa_invert+0x48>
    34ec:	68 94       	set
    34ee:	3f 91       	pop	r19
    34f0:	2a e0       	ldi	r18, 0x0A	; 10
    34f2:	26 9f       	mul	r18, r22
    34f4:	11 24       	eor	r1, r1
    34f6:	30 19       	sub	r19, r0
    34f8:	30 5d       	subi	r19, 0xD0	; 208
    34fa:	31 93       	st	Z+, r19
    34fc:	de f6       	brtc	.-74     	; 0x34b4 <__ultoa_invert+0xe>
    34fe:	cf 01       	movw	r24, r30
    3500:	08 95       	ret
    3502:	46 2f       	mov	r20, r22
    3504:	47 70       	andi	r20, 0x07	; 7
    3506:	40 5d       	subi	r20, 0xD0	; 208
    3508:	41 93       	st	Z+, r20
    350a:	b3 e0       	ldi	r27, 0x03	; 3
    350c:	0f d0       	rcall	.+30     	; 0x352c <__ultoa_invert+0x86>
    350e:	c9 f7       	brne	.-14     	; 0x3502 <__ultoa_invert+0x5c>
    3510:	f6 cf       	rjmp	.-20     	; 0x34fe <__ultoa_invert+0x58>
    3512:	46 2f       	mov	r20, r22
    3514:	4f 70       	andi	r20, 0x0F	; 15
    3516:	40 5d       	subi	r20, 0xD0	; 208
    3518:	4a 33       	cpi	r20, 0x3A	; 58
    351a:	18 f0       	brcs	.+6      	; 0x3522 <__ultoa_invert+0x7c>
    351c:	49 5d       	subi	r20, 0xD9	; 217
    351e:	31 fd       	sbrc	r19, 1
    3520:	40 52       	subi	r20, 0x20	; 32
    3522:	41 93       	st	Z+, r20
    3524:	02 d0       	rcall	.+4      	; 0x352a <__ultoa_invert+0x84>
    3526:	a9 f7       	brne	.-22     	; 0x3512 <__ultoa_invert+0x6c>
    3528:	ea cf       	rjmp	.-44     	; 0x34fe <__ultoa_invert+0x58>
    352a:	b4 e0       	ldi	r27, 0x04	; 4
    352c:	a6 95       	lsr	r26
    352e:	97 95       	ror	r25
    3530:	87 95       	ror	r24
    3532:	77 95       	ror	r23
    3534:	67 95       	ror	r22
    3536:	ba 95       	dec	r27
    3538:	c9 f7       	brne	.-14     	; 0x352c <__ultoa_invert+0x86>
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	61 05       	cpc	r22, r1
    353e:	71 05       	cpc	r23, r1
    3540:	08 95       	ret
    3542:	9b 01       	movw	r18, r22
    3544:	ac 01       	movw	r20, r24
    3546:	0a 2e       	mov	r0, r26
    3548:	06 94       	lsr	r0
    354a:	57 95       	ror	r21
    354c:	47 95       	ror	r20
    354e:	37 95       	ror	r19
    3550:	27 95       	ror	r18
    3552:	ba 95       	dec	r27
    3554:	c9 f7       	brne	.-14     	; 0x3548 <__ultoa_invert+0xa2>
    3556:	62 0f       	add	r22, r18
    3558:	73 1f       	adc	r23, r19
    355a:	84 1f       	adc	r24, r20
    355c:	95 1f       	adc	r25, r21
    355e:	a0 1d       	adc	r26, r0
    3560:	08 95       	ret

00003562 <__prologue_saves__>:
    3562:	2f 92       	push	r2
    3564:	3f 92       	push	r3
    3566:	4f 92       	push	r4
    3568:	5f 92       	push	r5
    356a:	6f 92       	push	r6
    356c:	7f 92       	push	r7
    356e:	8f 92       	push	r8
    3570:	9f 92       	push	r9
    3572:	af 92       	push	r10
    3574:	bf 92       	push	r11
    3576:	cf 92       	push	r12
    3578:	df 92       	push	r13
    357a:	ef 92       	push	r14
    357c:	ff 92       	push	r15
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	ca 1b       	sub	r28, r26
    358c:	db 0b       	sbc	r29, r27
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	09 94       	ijmp

0000359a <__epilogue_restores__>:
    359a:	2a 88       	ldd	r2, Y+18	; 0x12
    359c:	39 88       	ldd	r3, Y+17	; 0x11
    359e:	48 88       	ldd	r4, Y+16	; 0x10
    35a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ac:	b9 84       	ldd	r11, Y+9	; 0x09
    35ae:	c8 84       	ldd	r12, Y+8	; 0x08
    35b0:	df 80       	ldd	r13, Y+7	; 0x07
    35b2:	ee 80       	ldd	r14, Y+6	; 0x06
    35b4:	fd 80       	ldd	r15, Y+5	; 0x05
    35b6:	0c 81       	ldd	r16, Y+4	; 0x04
    35b8:	1b 81       	ldd	r17, Y+3	; 0x03
    35ba:	aa 81       	ldd	r26, Y+2	; 0x02
    35bc:	b9 81       	ldd	r27, Y+1	; 0x01
    35be:	ce 0f       	add	r28, r30
    35c0:	d1 1d       	adc	r29, r1
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	ed 01       	movw	r28, r26
    35ce:	08 95       	ret

000035d0 <_exit>:
    35d0:	f8 94       	cli

000035d2 <__stop_program>:
    35d2:	ff cf       	rjmp	.-2      	; 0x35d2 <__stop_program>
